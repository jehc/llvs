// **********************************************************************
//
// Generated by the Orbix/E IDL-to-C++ Translator
//
// Copyright (c) 2003
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 2.2.0

#include <OBE/CORBAServer.h>
#include <LowLevelVisionSystem_skel.h>

#ifndef OBEC_INTEGER_VERSION
#   error No Orbix/E version defined! Is <OBE/CORBA.h> included?
#endif

#ifndef OBEC_NO_VERSION_CHECK
#   if (OBEC_INTEGER_VERSION != 2020000L)
#       error Orbix/E version mismatch!
#   endif
#endif

//
// IDL:HRP2Camera/GetCameraParameter:1.0
//
void
POA_HRP2Camera::_OB_op_GetCameraParameter(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    ::HRP2Camera::CameraParameter_var _ob_r = GetCameraParameter();

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    _ob_r.in()._OB_marshal(_ob_out, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:HRP2Camera/GetIntrinsicParameters:1.0
//
void
POA_HRP2Camera::_OB_op_GetIntrinsicParameters(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    ::HRP2Camera::IntrinsicParameters _ob_r = GetIntrinsicParameters();

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    _ob_r._OB_marshal(_ob_out, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:HRP2Camera/SetAcquisitionSize:1.0
//
void
POA_HRP2Camera::_OB_op_SetAcquisitionSize(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Long _ob_a0;
    CORBA::Long _ob_a1;
    OBEC_InputStreamImpl* _ob_in = OBEC_UpcallImpl_preUnmarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    _ob_a0 = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
    _ob_a1 = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    CORBA::Long _ob_r = SetAcquisitionSize(_ob_a0, _ob_a1);

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_r, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:HRP2Camera/GetProjectiveParameters:1.0
//
void
POA_HRP2Camera::_OB_op_GetProjectiveParameters(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    ::HRP2Camera::ProjectiveParameters _ob_r = GetProjectiveParameters();

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    _ob_r._OB_marshal(_ob_out, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:HRP2Camera:1.0
//
CORBA::Boolean
POA_HRP2Camera::_is_a(
    const char* type
) throw(CORBA::SystemException)
{
    const char** _ob_ids = ::HRP2Camera::_OB_staticIds();
    for(CORBA::ULong _ob_i = 0 ; _ob_ids[_ob_i] != 0 ; _ob_i++)
        if(strcmp(type, _ob_ids[_ob_i]) == 0)
            return true;

    return false;
}

CORBA::RepositoryId
POA_HRP2Camera::_primary_interface(
    const PortableServer::ObjectId&,
    PortableServer::POA_ptr
)
{
    return CORBA::string_dup(::HRP2Camera::_OB_staticIds()[0]);
}

::HRP2Camera_ptr
POA_HRP2Camera::_this(
)
{
    CORBA::Object_var obj = _OB_createReference();
    ::HRP2Camera_var result = ::HRP2Camera::_narrow(obj);
    return result._retn();
}

void
POA_HRP2Camera::_OB_dispatch(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    static const char* _ob_names[] =
    {
        "GetCameraParameter",
        "GetIntrinsicParameters",
        "GetProjectiveParameters",
        "SetAcquisitionSize"
    };
    static const CORBA::ULong _ob_num_names = 4;

    const char* _ob_op = OBEC_UpcallImpl_operation(_ob_up, _ob_cev);
    switch(OBEC_BinarySearch(_ob_op, _ob_names, _ob_num_names))
    {
    case 0: // GetCameraParameter
        _OB_op_GetCameraParameter(_ob_up, _ob_cev);
        return;

    case 1: // GetIntrinsicParameters
        _OB_op_GetIntrinsicParameters(_ob_up, _ob_cev);
        return;

    case 2: // GetProjectiveParameters
        _OB_op_GetProjectiveParameters(_ob_up, _ob_cev);
        return;

    case 3: // SetAcquisitionSize
        _OB_op_SetAcquisitionSize(_ob_up, _ob_cev);
        return;
    }

    _OB_dispatchBase(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/destroy:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_destroy(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    destroy();

    OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/GetVersion:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_GetVersion(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Long _ob_r = GetVersion();

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_r, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/StartMainProcess:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_StartMainProcess(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Long _ob_r = StartMainProcess();

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_r, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/StopMainProcess:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_StopMainProcess(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Long _ob_r = StopMainProcess();

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_r, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/StartProcess:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_StartProcess(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    const char* _ob_a0;
    OBEC_InputStreamImpl* _ob_in = OBEC_UpcallImpl_preUnmarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    _ob_a0 = OBEC_InputStreamImpl_read_string_nodup(_ob_in, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    CORBA::Long _ob_r = StartProcess(_ob_a0);

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_r, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/StopProcess:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_StopProcess(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    const char* _ob_a0;
    OBEC_InputStreamImpl* _ob_in = OBEC_UpcallImpl_preUnmarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    _ob_a0 = OBEC_InputStreamImpl_read_string_nodup(_ob_in, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    CORBA::Long _ob_r = StopProcess(_ob_a0);

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_r, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/ProcessStatus:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_ProcessStatus(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    const char* _ob_a0;
    OBEC_InputStreamImpl* _ob_in = OBEC_UpcallImpl_preUnmarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    _ob_a0 = OBEC_InputStreamImpl_read_string_nodup(_ob_in, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    CORBA::Long _ob_r = ProcessStatus(_ob_a0);

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_r, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/GetInputMode:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_GetInputMode(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    ::LowLevelVisionSystem::InputMode _ob_r = GetInputMode();

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_ulong(_ob_out, (CORBA::ULong)_ob_r, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/SynchronizationMode:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_SynchronizationMode(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    ::LowLevelVisionSystem::SynchroMode _ob_r = SynchronizationMode();

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_ulong(_ob_out, (CORBA::ULong)_ob_r, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/SetImage:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_SetImage(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    ::ColorBuffer _ob_a0;
    CORBA::Long _ob_a1;
    CORBA::Long _ob_a2;
    OBEC_InputStreamImpl* _ob_in = OBEC_UpcallImpl_preUnmarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    CORBA::ULong _ob_len0 = OBEC_InputStreamImpl_read_ulong(_ob_in, _ob_cev);
    CORBA::Long* _ob_a0buf;
    OBEC_InputStreamImpl_read_long_array_nodup(_ob_in, &_ob_a0buf, _ob_len0, _ob_cev);
    _ob_a0.replace(_ob_len0, _ob_len0, _ob_a0buf);
    _ob_a1 = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
    _ob_a2 = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    CORBA::Long _ob_r = SetImage(_ob_a0, _ob_a1, _ob_a2);

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_r, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/SetImagesGrabbedSize:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_SetImagesGrabbedSize(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Long _ob_a0;
    CORBA::Long _ob_a1;
    OBEC_InputStreamImpl* _ob_in = OBEC_UpcallImpl_preUnmarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    _ob_a0 = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
    _ob_a1 = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    CORBA::Long _ob_r = SetImagesGrabbedSize(_ob_a0, _ob_a1);

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_r, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/TriggerSynchro:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_TriggerSynchro(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Long _ob_r = TriggerSynchro();

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_r, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/getCameraSeq:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_getCameraSeq(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    ::HRP2CameraSeq_var _ob_a0;

    CORBA::Long _ob_r = getCameraSeq(_ob_a0.out());

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_r, _ob_cev);
    CORBA::ULong _ob_len0 = _ob_a0.in().length();
    OBEC_OutputStreamImpl_write_ulong(_ob_out, _ob_len0, _ob_cev);
    ::HRP2Camera_ptr const * _ob_buf0 = _ob_a0.in().get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        OBMarshal(_ob_buf0[_ob_i0], _ob_out, _ob_cev);
    }
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/getImage:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_getImage(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Long _ob_a0;
    ::ImageData_var _ob_a1;
    OB::StrForStruct _ob_a2;
    OBEC_InputStreamImpl* _ob_in = OBEC_UpcallImpl_preUnmarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    _ob_a0 = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
    _ob_a2 = OBEC_InputStreamImpl_read_string(_ob_in, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    CORBA::Long _ob_r = getImage(_ob_a0, _ob_a1.out(), _ob_a2.inout());

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_r, _ob_cev);
    _ob_a1.in()._OB_marshal(_ob_out, _ob_cev);
    OBEC_OutputStreamImpl_write_string(_ob_out, _ob_a2.in(), _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/getEdgeImage:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_getEdgeImage(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Long _ob_a0;
    ::ImageData_var _ob_a1;
    OB::StrForStruct _ob_a2;
    OBEC_InputStreamImpl* _ob_in = OBEC_UpcallImpl_preUnmarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    _ob_a0 = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
    _ob_a2 = OBEC_InputStreamImpl_read_string(_ob_in, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    CORBA::Long _ob_r = getEdgeImage(_ob_a0, _ob_a1.out(), _ob_a2.inout());

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_r, _ob_cev);
    _ob_a1.in()._OB_marshal(_ob_out, _ob_cev);
    OBEC_OutputStreamImpl_write_string(_ob_out, _ob_a2.in(), _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/getRectifiedImage:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_getRectifiedImage(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Long _ob_a0;
    ::ImageData_var _ob_a1;
    OB::StrForStruct _ob_a2;
    OBEC_InputStreamImpl* _ob_in = OBEC_UpcallImpl_preUnmarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    _ob_a0 = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
    _ob_a2 = OBEC_InputStreamImpl_read_string(_ob_in, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    CORBA::Long _ob_r = getRectifiedImage(_ob_a0, _ob_a1.out(), _ob_a2.inout());

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_r, _ob_cev);
    _ob_a1.in()._OB_marshal(_ob_out, _ob_cev);
    OBEC_OutputStreamImpl_write_string(_ob_out, _ob_a2.in(), _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/getRangeMap:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_getRangeMap(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    ::RangeMap_var _ob_a0;
    OB::StrForStruct _ob_a1;
    OBEC_InputStreamImpl* _ob_in = OBEC_UpcallImpl_preUnmarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    _ob_a1 = OBEC_InputStreamImpl_read_string(_ob_in, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    CORBA::Long _ob_r = getRangeMap(_ob_a0.out(), _ob_a1.inout());

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_r, _ob_cev);
    CORBA::ULong _ob_len0 = _ob_a0.in().length();
    OBEC_OutputStreamImpl_write_ulong(_ob_out, _ob_len0, _ob_cev);
    OBEC_OutputStreamImpl_write_float_array(_ob_out, _ob_a0.in().get_buffer(), _ob_len0, _ob_cev);
    OBEC_OutputStreamImpl_write_string(_ob_out, _ob_a1.in(), _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/getImageDerivative:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_getImageDerivative(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Long _ob_a0;
    CORBA::Long _ob_a1;
    ::FloatBuffer_var _ob_a2;
    CORBA::Long _ob_a3;
    CORBA::Long _ob_a4;
    OBEC_InputStreamImpl* _ob_in = OBEC_UpcallImpl_preUnmarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    _ob_a0 = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
    _ob_a1 = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    CORBA::Long _ob_r = getImageDerivative(_ob_a0, _ob_a1, _ob_a2.out(), _ob_a3, _ob_a4);

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_r, _ob_cev);
    CORBA::ULong _ob_len0 = _ob_a2.in().length();
    OBEC_OutputStreamImpl_write_ulong(_ob_out, _ob_len0, _ob_cev);
    OBEC_OutputStreamImpl_write_float_array(_ob_out, _ob_a2.in().get_buffer(), _ob_len0, _ob_cev);
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_a3, _ob_cev);
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_a4, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/getOpticalFlow:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_getOpticalFlow(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Long _ob_a0;
    ::FloatBuffer_var _ob_a1;
    ::FloatBuffer_var _ob_a2;
    CORBA::Long _ob_a3;
    CORBA::Long _ob_a4;
    OBEC_InputStreamImpl* _ob_in = OBEC_UpcallImpl_preUnmarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    _ob_a0 = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    CORBA::Long _ob_r = getOpticalFlow(_ob_a0, _ob_a1.out(), _ob_a2.out(), _ob_a3, _ob_a4);

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_r, _ob_cev);
    CORBA::ULong _ob_len0 = _ob_a1.in().length();
    OBEC_OutputStreamImpl_write_ulong(_ob_out, _ob_len0, _ob_cev);
    OBEC_OutputStreamImpl_write_float_array(_ob_out, _ob_a1.in().get_buffer(), _ob_len0, _ob_cev);
    CORBA::ULong _ob_len1 = _ob_a2.in().length();
    OBEC_OutputStreamImpl_write_ulong(_ob_out, _ob_len1, _ob_cev);
    OBEC_OutputStreamImpl_write_float_array(_ob_out, _ob_a2.in().get_buffer(), _ob_len1, _ob_cev);
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_a3, _ob_cev);
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_a4, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/getHarrisDetector:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_getHarrisDetector(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Long _ob_a0;
    ::FloatBuffer_var _ob_a1;
    CORBA::Long _ob_a2;
    CORBA::Long _ob_a3;
    OBEC_InputStreamImpl* _ob_in = OBEC_UpcallImpl_preUnmarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    _ob_a0 = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    CORBA::Long _ob_r = getHarrisDetector(_ob_a0, _ob_a1.out(), _ob_a2, _ob_a3);

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_r, _ob_cev);
    CORBA::ULong _ob_len0 = _ob_a1.in().length();
    OBEC_OutputStreamImpl_write_ulong(_ob_out, _ob_len0, _ob_cev);
    OBEC_OutputStreamImpl_write_float_array(_ob_out, _ob_a1.in().get_buffer(), _ob_len0, _ob_cev);
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_a2, _ob_cev);
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_a3, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/getLowLevelVisionProcesses:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_getLowLevelVisionProcesses(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    ::HRP2LowLevelVisionProcessesSeq_var _ob_a0;

    CORBA::Long _ob_r = getLowLevelVisionProcesses(_ob_a0.out());

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_r, _ob_cev);
    CORBA::ULong _ob_len0 = _ob_a0.in().length();
    OBEC_OutputStreamImpl_write_ulong(_ob_out, _ob_len0, _ob_cev);
    const char* const *_ob_buf0 = _ob_a0.in().get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        OBEC_OutputStreamImpl_write_string(_ob_out, _ob_buf0[_ob_i0], _ob_cev);
    }
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/SetAProcessParameterAndValue:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_SetAProcessParameterAndValue(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    const char* _ob_a0;
    const char* _ob_a1;
    const char* _ob_a2;
    OBEC_InputStreamImpl* _ob_in = OBEC_UpcallImpl_preUnmarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    _ob_a0 = OBEC_InputStreamImpl_read_string_nodup(_ob_in, _ob_cev);
    _ob_a1 = OBEC_InputStreamImpl_read_string_nodup(_ob_in, _ob_cev);
    _ob_a2 = OBEC_InputStreamImpl_read_string_nodup(_ob_in, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    SetAProcessParameterAndValue(_ob_a0, _ob_a1, _ob_a2);

    OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/GetProcessParameter:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_GetProcessParameter(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    const char* _ob_a0;
    const char* _ob_a1;
    CORBA::String_var _ob_a2;
    OBEC_InputStreamImpl* _ob_in = OBEC_UpcallImpl_preUnmarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    _ob_a0 = OBEC_InputStreamImpl_read_string_nodup(_ob_in, _ob_cev);
    _ob_a1 = OBEC_InputStreamImpl_read_string_nodup(_ob_in, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    CORBA::Long _ob_r = GetProcessParameter(_ob_a0, _ob_a1, _ob_a2.out());

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_r, _ob_cev);
    OBEC_OutputStreamImpl_write_string(_ob_out, _ob_a2.in(), _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/GetProcessParameters:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_GetProcessParameters(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    const char* _ob_a0;
    ::HRP2LowLevelVisionParametersSeq_var _ob_a1;
    ::HRP2LowLevelVisionParametersSeq_var _ob_a2;
    OBEC_InputStreamImpl* _ob_in = OBEC_UpcallImpl_preUnmarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    _ob_a0 = OBEC_InputStreamImpl_read_string_nodup(_ob_in, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    CORBA::Long _ob_r = GetProcessParameters(_ob_a0, _ob_a1.out(), _ob_a2.out());

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_r, _ob_cev);
    CORBA::ULong _ob_len0 = _ob_a1.in().length();
    OBEC_OutputStreamImpl_write_ulong(_ob_out, _ob_len0, _ob_cev);
    const char* const *_ob_buf0 = _ob_a1.in().get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        OBEC_OutputStreamImpl_write_string(_ob_out, _ob_buf0[_ob_i0], _ob_cev);
    }
    CORBA::ULong _ob_len1 = _ob_a2.in().length();
    OBEC_OutputStreamImpl_write_ulong(_ob_out, _ob_len1, _ob_cev);
    const char* const *_ob_buf1 = _ob_a2.in().get_buffer();
    for(CORBA::ULong _ob_i1 = 0 ; _ob_i1 < _ob_len1 ; _ob_i1++)
    {
        OBEC_OutputStreamImpl_write_string(_ob_out, _ob_buf1[_ob_i1], _ob_cev);
    }
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/SetDumpImageMode:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_SetDumpImageMode(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    ::LowLevelVisionSystem::DumpImageMode _ob_a0;
    ::FloatBuffer _ob_a1;
    CORBA::Long _ob_a2;
    OBEC_InputStreamImpl* _ob_in = OBEC_UpcallImpl_preUnmarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    _ob_a0 = (::LowLevelVisionSystem::DumpImageMode)OBEC_InputStreamImpl_read_ulong(_ob_in, _ob_cev);
    CORBA::ULong _ob_len0 = OBEC_InputStreamImpl_read_ulong(_ob_in, _ob_cev);
    CORBA::Float* _ob_a1buf;
    OBEC_InputStreamImpl_read_float_array_nodup(_ob_in, &_ob_a1buf, _ob_len0, _ob_cev);
    _ob_a1.replace(_ob_len0, _ob_len0, _ob_a1buf);
    _ob_a2 = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    SetDumpImageMode(_ob_a0, _ob_a1, _ob_a2);

    OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/GetDumpImageMode:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_GetDumpImageMode(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    ::LowLevelVisionSystem::DumpImageMode _ob_r = GetDumpImageMode();

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_ulong(_ob_out, (CORBA::ULong)_ob_r, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/GetMatrixHeadTOrg:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_GetMatrixHeadTOrg(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    ::DoubleBuffer_var _ob_a0;

    CORBA::Long _ob_r = GetMatrixHeadTOrg(_ob_a0.out());

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_r, _ob_cev);
    CORBA::ULong _ob_len0 = _ob_a0.in().length();
    OBEC_OutputStreamImpl_write_ulong(_ob_out, _ob_len0, _ob_cev);
    OBEC_OutputStreamImpl_write_double_array(_ob_out, _ob_a0.in().get_buffer(), _ob_len0, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/GetBoundaryRepresentation:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_GetBoundaryRepresentation(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    ::CBREPSeq_var _ob_a0;

    CORBA::Long _ob_r = GetBoundaryRepresentation(_ob_a0.out());

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_r, _ob_cev);
    CORBA::ULong _ob_len0 = _ob_a0.in().length();
    OBEC_OutputStreamImpl_write_ulong(_ob_out, _ob_len0, _ob_cev);
    ::CBREP const * _ob_buf0 = _ob_a0.in().get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        _ob_buf0[_ob_i0]._OB_marshal(_ob_out, _ob_cev);
    }
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/GetSceneObject:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_GetSceneObject(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    ::SceneObject_var _ob_a0;

    CORBA::Long _ob_r = GetSceneObject(_ob_a0.out());

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_r, _ob_cev);
    _ob_a0.in()._OB_marshal(_ob_out, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/SceneDeleteFeature:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_SceneDeleteFeature(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Long _ob_a0;
    OBEC_InputStreamImpl* _ob_in = OBEC_UpcallImpl_preUnmarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    _ob_a0 = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    SceneDeleteFeature(_ob_a0);

    OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/GetImageIdentifier:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_GetImageIdentifier(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Long _ob_r = GetImageIdentifier();

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_r, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem/getStereoVision:1.0
//
void
POA_LowLevelVisionSystem::_OB_op_getStereoVision(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    ::StereoVision_var _ob_r = getStereoVision();

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBMarshal(_ob_r.in(), _ob_out, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:LowLevelVisionSystem:1.0
//
CORBA::Boolean
POA_LowLevelVisionSystem::_is_a(
    const char* type
) throw(CORBA::SystemException)
{
    const char** _ob_ids = ::LowLevelVisionSystem::_OB_staticIds();
    for(CORBA::ULong _ob_i = 0 ; _ob_ids[_ob_i] != 0 ; _ob_i++)
        if(strcmp(type, _ob_ids[_ob_i]) == 0)
            return true;

    return false;
}

CORBA::RepositoryId
POA_LowLevelVisionSystem::_primary_interface(
    const PortableServer::ObjectId&,
    PortableServer::POA_ptr
)
{
    return CORBA::string_dup(::LowLevelVisionSystem::_OB_staticIds()[0]);
}

::LowLevelVisionSystem_ptr
POA_LowLevelVisionSystem::_this(
)
{
    CORBA::Object_var obj = _OB_createReference();
    ::LowLevelVisionSystem_var result = ::LowLevelVisionSystem::_narrow(obj);
    return result._retn();
}

void
POA_LowLevelVisionSystem::_OB_dispatch(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    static const char* _ob_names[] =
    {
        "GetBoundaryRepresentation",
        "GetDumpImageMode",
        "GetImageIdentifier",
        "GetInputMode",
        "GetMatrixHeadTOrg",
        "GetProcessParameter",
        "GetProcessParameters",
        "GetSceneObject",
        "GetVersion",
        "ProcessStatus",
        "SceneDeleteFeature",
        "SetAProcessParameterAndValue",
        "SetDumpImageMode",
        "SetImage",
        "SetImagesGrabbedSize",
        "StartMainProcess",
        "StartProcess",
        "StopMainProcess",
        "StopProcess",
        "SynchronizationMode",
        "TriggerSynchro",
        "destroy",
        "getCameraSeq",
        "getEdgeImage",
        "getHarrisDetector",
        "getImage",
        "getImageDerivative",
        "getLowLevelVisionProcesses",
        "getOpticalFlow",
        "getRangeMap",
        "getRectifiedImage",
        "getStereoVision"
    };
    static const CORBA::ULong _ob_num_names = 32;

    const char* _ob_op = OBEC_UpcallImpl_operation(_ob_up, _ob_cev);
    switch(OBEC_BinarySearch(_ob_op, _ob_names, _ob_num_names))
    {
    case 0: // GetBoundaryRepresentation
        _OB_op_GetBoundaryRepresentation(_ob_up, _ob_cev);
        return;

    case 1: // GetDumpImageMode
        _OB_op_GetDumpImageMode(_ob_up, _ob_cev);
        return;

    case 2: // GetImageIdentifier
        _OB_op_GetImageIdentifier(_ob_up, _ob_cev);
        return;

    case 3: // GetInputMode
        _OB_op_GetInputMode(_ob_up, _ob_cev);
        return;

    case 4: // GetMatrixHeadTOrg
        _OB_op_GetMatrixHeadTOrg(_ob_up, _ob_cev);
        return;

    case 5: // GetProcessParameter
        _OB_op_GetProcessParameter(_ob_up, _ob_cev);
        return;

    case 6: // GetProcessParameters
        _OB_op_GetProcessParameters(_ob_up, _ob_cev);
        return;

    case 7: // GetSceneObject
        _OB_op_GetSceneObject(_ob_up, _ob_cev);
        return;

    case 8: // GetVersion
        _OB_op_GetVersion(_ob_up, _ob_cev);
        return;

    case 9: // ProcessStatus
        _OB_op_ProcessStatus(_ob_up, _ob_cev);
        return;

    case 10: // SceneDeleteFeature
        _OB_op_SceneDeleteFeature(_ob_up, _ob_cev);
        return;

    case 11: // SetAProcessParameterAndValue
        _OB_op_SetAProcessParameterAndValue(_ob_up, _ob_cev);
        return;

    case 12: // SetDumpImageMode
        _OB_op_SetDumpImageMode(_ob_up, _ob_cev);
        return;

    case 13: // SetImage
        _OB_op_SetImage(_ob_up, _ob_cev);
        return;

    case 14: // SetImagesGrabbedSize
        _OB_op_SetImagesGrabbedSize(_ob_up, _ob_cev);
        return;

    case 15: // StartMainProcess
        _OB_op_StartMainProcess(_ob_up, _ob_cev);
        return;

    case 16: // StartProcess
        _OB_op_StartProcess(_ob_up, _ob_cev);
        return;

    case 17: // StopMainProcess
        _OB_op_StopMainProcess(_ob_up, _ob_cev);
        return;

    case 18: // StopProcess
        _OB_op_StopProcess(_ob_up, _ob_cev);
        return;

    case 19: // SynchronizationMode
        _OB_op_SynchronizationMode(_ob_up, _ob_cev);
        return;

    case 20: // TriggerSynchro
        _OB_op_TriggerSynchro(_ob_up, _ob_cev);
        return;

    case 21: // destroy
        _OB_op_destroy(_ob_up, _ob_cev);
        return;

    case 22: // getCameraSeq
        _OB_op_getCameraSeq(_ob_up, _ob_cev);
        return;

    case 23: // getEdgeImage
        _OB_op_getEdgeImage(_ob_up, _ob_cev);
        return;

    case 24: // getHarrisDetector
        _OB_op_getHarrisDetector(_ob_up, _ob_cev);
        return;

    case 25: // getImage
        _OB_op_getImage(_ob_up, _ob_cev);
        return;

    case 26: // getImageDerivative
        _OB_op_getImageDerivative(_ob_up, _ob_cev);
        return;

    case 27: // getLowLevelVisionProcesses
        _OB_op_getLowLevelVisionProcesses(_ob_up, _ob_cev);
        return;

    case 28: // getOpticalFlow
        _OB_op_getOpticalFlow(_ob_up, _ob_cev);
        return;

    case 29: // getRangeMap
        _OB_op_getRangeMap(_ob_up, _ob_cev);
        return;

    case 30: // getRectifiedImage
        _OB_op_getRectifiedImage(_ob_up, _ob_cev);
        return;

    case 31: // getStereoVision
        _OB_op_getStereoVision(_ob_up, _ob_cev);
        return;
    }

    _OB_dispatchBase(_ob_up, _ob_cev);
}
