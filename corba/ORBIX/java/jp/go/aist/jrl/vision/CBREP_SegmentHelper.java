// **********************************************************************
//
// Generated by the Orbix/E IDL to Java Translator
//
// Copyright (c) 2003
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 2.0.1

package jp.go.aist.jrl.vision;

//
// IDL:CBREP_Segment:1.0
//
final public class CBREP_SegmentHelper
{
    public static void
    insert(org.omg.CORBA.Any any, CBREP_Segment val)
    {
        org.omg.CORBA.portable.OutputStream out = any.create_output_stream();
        write(out, val);
        any.read_value(out.create_input_stream(), type());
    }

    public static CBREP_Segment
    extract(org.omg.CORBA.Any any)
    {
        if(any.type().equivalent(type()))
            return read(any.create_input_stream());
        else
            throw new org.omg.CORBA.BAD_OPERATION();
    }

    private static org.omg.CORBA.TypeCode typeCode_;

    public static org.omg.CORBA.TypeCode
    type()
    {
        if(typeCode_ == null)
        {
            org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init();
            org.omg.CORBA.StructMember[] members = new org.omg.CORBA.StructMember[10];

            members[0] = new org.omg.CORBA.StructMember();
            members[0].name = "label";
            members[0].type = orb.get_primitive_tc(org.omg.CORBA.TCKind.tk_long);

            members[1] = new org.omg.CORBA.StructMember();
            members[1].name = "n";
            members[1].type = orb.get_primitive_tc(org.omg.CORBA.TCKind.tk_long);

            members[2] = new org.omg.CORBA.StructMember();
            members[2].name = "npoint";
            members[2].type = orb.get_primitive_tc(org.omg.CORBA.TCKind.tk_long);

            members[3] = new org.omg.CORBA.StructMember();
            members[3].name = "curvature";
            members[3].type = orb.get_primitive_tc(org.omg.CORBA.TCKind.tk_float);

            members[4] = new org.omg.CORBA.StructMember();
            members[4].name = "error";
            members[4].type = orb.get_primitive_tc(org.omg.CORBA.TCKind.tk_float);

            members[5] = new org.omg.CORBA.StructMember();
            members[5].name = "intensity_sigma";
            members[5].type = orb.get_primitive_tc(org.omg.CORBA.TCKind.tk_float);

            members[6] = new org.omg.CORBA.StructMember();
            members[6].name = "point";
            members[6].type = CBREP_PointSeqHelper.type();

            members[7] = new org.omg.CORBA.StructMember();
            members[7].name = "red";
            members[7].type = orb.get_primitive_tc(org.omg.CORBA.TCKind.tk_octet);

            members[8] = new org.omg.CORBA.StructMember();
            members[8].name = "green";
            members[8].type = orb.get_primitive_tc(org.omg.CORBA.TCKind.tk_octet);

            members[9] = new org.omg.CORBA.StructMember();
            members[9].name = "blue";
            members[9].type = orb.get_primitive_tc(org.omg.CORBA.TCKind.tk_octet);

            typeCode_ = orb.create_struct_tc(id(), "CBREP_Segment", members);
        }

        return typeCode_;
    }

    public static String
    id()
    {
        return "IDL:CBREP_Segment:1.0";
    }

    public static CBREP_Segment
    read(org.omg.CORBA.portable.InputStream in)
    {
        CBREP_Segment _ob_v = new CBREP_Segment();
        _ob_v.label = in.read_long();
        _ob_v.n = in.read_long();
        _ob_v.npoint = in.read_long();
        _ob_v.curvature = in.read_float();
        _ob_v.error = in.read_float();
        _ob_v.intensity_sigma = in.read_float();
        _ob_v.point = CBREP_PointSeqHelper.read(in);
        _ob_v.red = in.read_octet();
        _ob_v.green = in.read_octet();
        _ob_v.blue = in.read_octet();
        return _ob_v;
    }

    public static void
    write(org.omg.CORBA.portable.OutputStream out, CBREP_Segment val)
    {
        out.write_long(val.label);
        out.write_long(val.n);
        out.write_long(val.npoint);
        out.write_float(val.curvature);
        out.write_float(val.error);
        out.write_float(val.intensity_sigma);
        CBREP_PointSeqHelper.write(out, val.point);
        out.write_octet(val.red);
        out.write_octet(val.green);
        out.write_octet(val.blue);
    }
}
