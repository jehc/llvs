// **********************************************************************
//
// Generated by the Orbix/E IDL to Java Translator
//
// Copyright (c) 2003
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 2.0.1

package jp.go.aist.jrl.vision.LowLevelVisionSystemPackage;

//
// IDL:LowLevelVisionSystem/DerivativeID:1.0
//
final public class DerivativeIDHelper
{
    public static void
    insert(org.omg.CORBA.Any any, DerivativeID val)
    {
        org.omg.CORBA.portable.OutputStream out = any.create_output_stream();
        write(out, val);
        any.read_value(out.create_input_stream(), type());
    }

    public static DerivativeID
    extract(org.omg.CORBA.Any any)
    {
        if(any.type().equivalent(type()))
            return read(any.create_input_stream());
        else
            throw new org.omg.CORBA.BAD_OPERATION();
    }

    private static org.omg.CORBA.TypeCode typeCode_;

    public static org.omg.CORBA.TypeCode
    type()
    {
        if(typeCode_ == null)
        {
            org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init();
            String[] members = new String[14];
            members[0] = "IDT";
            members[1] = "IDX";
            members[2] = "IDY";
            members[3] = "IDXDX";
            members[4] = "IDXDY";
            members[5] = "IDYDY";
            members[6] = "IDXDX2";
            members[7] = "IDXDY2";
            members[8] = "IDYDY2";
            members[9] = "IDXDT";
            members[10] = "IDYDT";
            members[11] = "IDT2";
            members[12] = "IDXDT2";
            members[13] = "IDYDT2";
            typeCode_ = orb.create_enum_tc(id(), "DerivativeID", members);
        }

        return typeCode_;
    }

    public static String
    id()
    {
        return "IDL:LowLevelVisionSystem/DerivativeID:1.0";
    }

    public static DerivativeID
    read(org.omg.CORBA.portable.InputStream in)
    {
        DerivativeID _ob_v;
        _ob_v = DerivativeID.from_int(in.read_ulong());
        return _ob_v;
    }

    public static void
    write(org.omg.CORBA.portable.OutputStream out, DerivativeID val)
    {
        out.write_ulong(val.value());
    }
}
