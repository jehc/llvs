// **********************************************************************
//
// Generated by the Orbix/E IDL-to-C++ Translator
//
// Copyright (c) 2003
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 2.2.0

#include <OBE/CORBAServer.h>
#include <StereoVision_skel.h>

#ifndef OBEC_INTEGER_VERSION
#   error No Orbix/E version defined! Is <OBE/CORBA.h> included?
#endif

#ifndef OBEC_NO_VERSION_CHECK
#   if (OBEC_INTEGER_VERSION != 2020000L)
#       error Orbix/E version mismatch!
#   endif
#endif

//
// IDL:StereoVision/rbt2scmCalibStart:1.0
//
void
POA_StereoVision::_OB_op_rbt2scmCalibStart(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_r = rbt2scmCalibStart();

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_boolean(_ob_out, _ob_r, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:StereoVision/rbt2scmCalibEnd:1.0
//
void
POA_StereoVision::_OB_op_rbt2scmCalibEnd(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_r = rbt2scmCalibEnd();

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_boolean(_ob_out, _ob_r, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:StereoVision/detectCrossMark:1.0
//
void
POA_StereoVision::_OB_op_detectCrossMark(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    ::TransformQuaternion _ob_a0;
    ::TransformQuaternion _ob_a1;
    OBEC_InputStreamImpl* _ob_in = OBEC_UpcallImpl_preUnmarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    ::TransformQuaternion::_OB_unmarshal(_ob_a0, _ob_in, _ob_cev);
    ::TransformQuaternion::_OB_unmarshal(_ob_a1, _ob_in, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    CORBA::Boolean _ob_r = detectCrossMark(_ob_a0, _ob_a1);

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_boolean(_ob_out, _ob_r, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:StereoVision/getObjectPosition:1.0
//
void
POA_StereoVision::_OB_op_getObjectPosition(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    const char* _ob_a0;
    ::TransformQuaternion _ob_a1;
    ::TransformQuaternion _ob_a2;
    OBEC_InputStreamImpl* _ob_in = OBEC_UpcallImpl_preUnmarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    _ob_a0 = OBEC_InputStreamImpl_read_string_nodup(_ob_in, _ob_cev);
    ::TransformQuaternion::_OB_unmarshal(_ob_a1, _ob_in, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    CORBA::Boolean _ob_r = getObjectPosition(_ob_a0, _ob_a1, _ob_a2);

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_boolean(_ob_out, _ob_r, _ob_cev);
    _ob_a2._OB_marshal(_ob_out, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:StereoVision/StartProcess:1.0
//
void
POA_StereoVision::_OB_op_StartProcess(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    const char* _ob_a0;
    OBEC_InputStreamImpl* _ob_in = OBEC_UpcallImpl_preUnmarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    _ob_a0 = OBEC_InputStreamImpl_read_string_nodup(_ob_in, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    CORBA::Boolean _ob_r = StartProcess(_ob_a0);

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_boolean(_ob_out, _ob_r, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:StereoVision/StopProcess:1.0
//
void
POA_StereoVision::_OB_op_StopProcess(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    const char* _ob_a0;
    OBEC_InputStreamImpl* _ob_in = OBEC_UpcallImpl_preUnmarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    _ob_a0 = OBEC_InputStreamImpl_read_string_nodup(_ob_in, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    CORBA::Boolean _ob_r = StopProcess(_ob_a0);

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_boolean(_ob_out, _ob_r, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:StereoVision/getImage:1.0
//
void
POA_StereoVision::_OB_op_getImage(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Long _ob_a0;
    ::ImageData_var _ob_a1;
    OB::StrForStruct _ob_a2;
    OBEC_InputStreamImpl* _ob_in = OBEC_UpcallImpl_preUnmarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    _ob_a0 = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
    _ob_a2 = OBEC_InputStreamImpl_read_string(_ob_in, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    CORBA::Long _ob_r = getImage(_ob_a0, _ob_a1.out(), _ob_a2.inout());

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_r, _ob_cev);
    _ob_a1.in()._OB_marshal(_ob_out, _ob_cev);
    OBEC_OutputStreamImpl_write_string(_ob_out, _ob_a2.in(), _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:StereoVision/getRangeMap:1.0
//
void
POA_StereoVision::_OB_op_getRangeMap(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    ::RangeMap_var _ob_a0;
    OB::StrForStruct _ob_a1;
    OBEC_InputStreamImpl* _ob_in = OBEC_UpcallImpl_preUnmarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    _ob_a1 = OBEC_InputStreamImpl_read_string(_ob_in, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    CORBA::Long _ob_r = getRangeMap(_ob_a0.out(), _ob_a1.inout());

    OBEC_OutputStreamImpl* _ob_out = OBEC_UpcallImpl_preMarshal(_ob_up, _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;
    OBEC_OutputStreamImpl_write_long(_ob_out, _ob_r, _ob_cev);
    CORBA::ULong _ob_len0 = _ob_a0.in().length();
    OBEC_OutputStreamImpl_write_ulong(_ob_out, _ob_len0, _ob_cev);
    OBEC_OutputStreamImpl_write_float_array(_ob_out, _ob_a0.in().get_buffer(), _ob_len0, _ob_cev);
    OBEC_OutputStreamImpl_write_string(_ob_out, _ob_a1.in(), _ob_cev);
    if (_ob_cev->_major != CORBA_NO_EXCEPTION)
        return;

    OBEC_UpcallImpl_postMarshal(_ob_up, _ob_cev);
}

//
// IDL:StereoVision:1.0
//
CORBA::Boolean
POA_StereoVision::_is_a(
    const char* type
) throw(CORBA::SystemException)
{
    const char** _ob_ids = ::StereoVision::_OB_staticIds();
    for(CORBA::ULong _ob_i = 0 ; _ob_ids[_ob_i] != 0 ; _ob_i++)
        if(strcmp(type, _ob_ids[_ob_i]) == 0)
            return true;

    return false;
}

CORBA::RepositoryId
POA_StereoVision::_primary_interface(
    const PortableServer::ObjectId&,
    PortableServer::POA_ptr
)
{
    return CORBA::string_dup(::StereoVision::_OB_staticIds()[0]);
}

::StereoVision_ptr
POA_StereoVision::_this(
)
{
    CORBA::Object_var obj = _OB_createReference();
    ::StereoVision_var result = ::StereoVision::_narrow(obj);
    return result._retn();
}

void
POA_StereoVision::_OB_dispatch(
    OBEC_UpcallImpl* _ob_up,
    CORBA_Environment* _ob_cev
)
{
    static const char* _ob_names[] =
    {
        "StartProcess",
        "StopProcess",
        "detectCrossMark",
        "getImage",
        "getObjectPosition",
        "getRangeMap",
        "rbt2scmCalibEnd",
        "rbt2scmCalibStart"
    };
    static const CORBA::ULong _ob_num_names = 8;

    const char* _ob_op = OBEC_UpcallImpl_operation(_ob_up, _ob_cev);
    switch(OBEC_BinarySearch(_ob_op, _ob_names, _ob_num_names))
    {
    case 0: // StartProcess
        _OB_op_StartProcess(_ob_up, _ob_cev);
        return;

    case 1: // StopProcess
        _OB_op_StopProcess(_ob_up, _ob_cev);
        return;

    case 2: // detectCrossMark
        _OB_op_detectCrossMark(_ob_up, _ob_cev);
        return;

    case 3: // getImage
        _OB_op_getImage(_ob_up, _ob_cev);
        return;

    case 4: // getObjectPosition
        _OB_op_getObjectPosition(_ob_up, _ob_cev);
        return;

    case 5: // getRangeMap
        _OB_op_getRangeMap(_ob_up, _ob_cev);
        return;

    case 6: // rbt2scmCalibEnd
        _OB_op_rbt2scmCalibEnd(_ob_up, _ob_cev);
        return;

    case 7: // rbt2scmCalibStart
        _OB_op_rbt2scmCalibStart(_ob_up, _ob_cev);
        return;
    }

    _OB_dispatchBase(_ob_up, _ob_cev);
}
