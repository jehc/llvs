# Olivier Stasse, JRL, CNRS/AIST
# Creation: 09/09/2008
# Copyright CNRS/AIST

cmake_minimum_required(VERSION 2.6)

enable_language(CXX)

# Debug mode for cmake
SET(CMAKE_VERBOSE_MAKEFILE ON)

# Name of the Project
project(LLVS)

# Unset parameters variable
SET(LLVS_CXX_FLAGS)
SET(LLVS_LINK_FLAGS)

# Set the name of the library generated by this package
SET(LLVS_INTERN_LIBS "llvs-0")

# Specify the compile flags for the overall library

# To be used for debugging
SET(LLVS_CXX_FLAGS "-g -c  -Wall -Wno-unused -fexceptions -DSTDC_HEADERS -I/usr/local/")
# Normal settings
#SET(LLVS_CXX_FLAGS "-O3 -c  -Wall -Wno-unused -fexceptions -DSTDC_HEADERS")

# Specify the binary directory 
SET(LLVS_BINARY_DIR ${LLVS_SOURCE_DIR}/server)

# Specify the version
SET(LLVS_VERSION_MAJOR "1")
SET(LLVS_VERSION_MINOR "0")
SET(LLVS_VERSION_PATCH "0")
SET(LLVS_VERSION "${LLVS_VERSION_MAJOR}.${LLVS_VERSION_MINOR}.${LLVS_VERSION_PATCH}")

# display the defaultsearch option in ccmake menu
OPTION(SEARCH_FOR_OPENCV "search for opencv lib." ON)
OPTION(SEARCH_FOR_VW "search for vW lib." OFF)
OPTION(SEARCH_FOR_SCENE "search for slam davison." OFF)
OPTION(SEARCH_FOR_VVV "search for aist vision lib vvv." OFF)
OPTION(SEARCH_FOR_OMNIORB4 "search for corba." ON)
OPTION(SEARCH_FOR_MMX "search for mmx lib. " OFF)
OPTION(SEARCH_FOR_DC1394_V2 "search for lib dc 1394 v2." ON)
OPTION(SEARCH_FOR_VISP "search for visual servoing plateform." ON)
OPTION(SEARCH_FOR_NMBT "search for model tracker new version." ON)
OPTION(SEARCH_FOR_MBT "search for model tracker old version." ON)

#Set defaut value for the third part libraries
SET(LLVS_HAVE_OPENCV 0)
SET(LLVS_HAVE_VW 0)
SET(LLVS_HAVE_SCENE 0)
SET(LLVS_HAVE_VVV 0)
SET(LLVS_HAVE_OMNIORB4 0)
SET(LLVS_HAVE_MMX 0)
SET(LLVS_HAVE_DC1394_V2 0)
SET(LLVS_HAVE_VISP 0)
SET(LLVS_HAVE_MBT 0)
SET(LLVS_HAVE_NMBT 0)

#-------------------
# Important options
#-------------------
OPTION(BUILD_SHARED_LIBS "Build LLVS with shared libraries." ON)

#--------------------
# Init the llvs path
#--------------------
SET(LLVS_INCLUDE_DIR "${LLVS_BINARY_DIR}/include/llvs")
SET(LLVS_DOC_DIR "${LLVS_BINARY_DIR}/doc")

# Specify the include directory on which the code depend upon
SET(LLVS_INTERN_INCLUDE_DIR ${LLVS_SOURCE_DIR}/include/llvs)

#---------------------------------------------------
# Specify the cmake path and option
#----------------------------------------------------
SET(CMAKE_C_INCLUDE_PATH "")
SET(CMAKE_CXX_INCLUDE_PATH "")
INCLUDE_DIRECTORIES(${LLVS_INTERN_INCLUDE_DIR})

# Get the OS
SET(OS ${CMAKE_SYSTEM_NAME})

# where are use-specific cmake modules
SET(CMAKE_MODULE_PATH ${LLVS_SOURCE_DIR}/CMakeModules)

#----------------------------------------
#  Third part libraries
#----------------------------------------

# Detect Pkg config
INCLUDE(FindPkgConfig)

# Detect OpenHRP
INCLUDE(FindOpenHRP)

# Detect VW config
IF (SEARCH_FOR_VW)
  INCLUDE(FindVW)
  IF (VW_FOUND)
     SET(LLVS_CXX_FLAGS "${LLVS_CXX_FLAGS} ${VW_CXX_FLAGS}")
     SET(LLVS_LINK_FLAGS "${LLVS_LINK_FLAGS} ${VW_LD_FLAGS}")
     SET(LLVS_HAVE_VW 1)
     #MESSAGE(STATUS "LLVS_CXX_FLAGS: ${LLVS_CXX_FLAGS}")
  ENDIF(VW_FOUND)
ENDIF(SEARCH_FOR_VW)

# Detect VVV
IF (SEARCH_FOR_VVV)
  INCLUDE(FindVVV)
  IF (VVV_FOUND)
     SET(LLVS_CXX_FLAGS "${LLVS_CXX_FLAGS} ${VVV_CXX_FLAGS}")
     SET(LLVS_LINK_FLAGS "${LLVS_LINK_FLAGS} ${VVV_LD_FLAGS}")
     SET(LLVS_HAVE_VVV 1)
     #MESSAGE(STATUS "LLVS_CXX_FLAGS: ${LLVS_CXX_FLAGS}")
  ENDIF(VVV_FOUND)
ENDIF(SEARCH_FOR_VVV)

# Detect OpenCV config
IF (SEARCH_FOR_OPENCV)
  INCLUDE(FindOpenCV)
  IF (OPENCV_FOUND)
     SET(LLVS_CXX_FLAGS "${LLVS_CXX_FLAGS} ${OPENCV_CXX_FLAGS}")
     SET(LLVS_LINK_FLAGS "${LLVS_LINK_FLAGS} ${OPENCV_LD_FLAGS}")
     SET(LLVS_HAVE_OPENCV 1)
     #MESSAGE(STATUS "LLVS_CXX_FLAGS: ${LLVS_CXX_FLAGS}")
  ENDIF(OPENCV_FOUND)
ENDIF(SEARCH_FOR_OPENCV)

# Detect Scene
IF (SEARCH_FOR_SCENE)
  INCLUDE(FindScene)
  IF (SCENE_FOUND)
     SET(LLVS_CXX_FLAGS "${LLVS_CXX_FLAGS} ${SCENE_CXX_FLAGS}")
     SET(LLVS_LINK_FLAGS "${LLVS_LINK_FLAGS} ${SCENE_LD_FLAGS}")
     SET(LLVS_HAVE_SCENE 1)
     #MESSAGE(STATUS "LLVS_CXX_FLAGS: ${LLVS_CXX_FLAGS}")
  ENDIF(SCENE_FOUND)
ENDIF(SEARCH_FOR_SCENE)

# Detect OmniOrb.
IF (SEARCH_FOR_OMNIORB4)
  INCLUDE(${CMAKE_MODULE_PATH}/UseOmniORB4.cmake)
  IF (OMNIORB4_FOUND)
    SET(LLVS_CXX_FLAGS "${LLVS_CXX_FLAGS} ${omniORB4_cflags}")
    IF(omniORB4_include_DIR)
      SET(LLVS_CXX_FLAGS "${LLVS_CXX_FLAGS} -I${omniORB4_include_DIR}")
    ENDIF(omniORB4_include_DIR)
    SET(LLVS_HAVE_OMNIORB4 1)
    SET(LLVS_LINK_FLAGS "${LLVS_LINK_FLAGS} ${omniORB4_link_FLAGS}")
  ELSE(OMNIORB4_FOUND)
    MESSAGE(STATUS "OMNIORB4 not found")
  ENDIF (OMNIORB4_FOUND)
ENDIF(SEARCH_FOR_OMNIORB4)

# Detect libdc1394
IF (SEARCH_FOR_DC1394_V2)
  pkg_search_module(libdc1394-2 libdc1394-2>=2.0.2)
  IF (libdc1394-2_FOUND)
			FOREACH(option_cxxflags ${libdc1394-2_CFLAGS})
				SET(LLVS_CXX_FLAGS "${LLVS_CXX_FLAGS} ${option_cxxflags}")
        MESSAGE(STATUS "option lidc1394: ${option_cxxflags}")
			ENDFOREACH(option_cxxflags)

			FOREACH(option_ldflags ${libdc1394-2_LDFLAGS})
         MESSAGE(STATUS "option lidc1394: ${option_ldflags}")
         SET(LLVS_LINK_FLAGS "${LLVS_LINK_FLAGS} ${option_ldflags}")
      ENDFOREACH(option_ldflags)
 
      MESSAGE(STATUS "libdc1394: ${LLVS_LINK_FLAGS}")
      SET(LLVS_HAVE_DC1394_V2 1)
  ELSE(libdc1394-2_FOUND)
     MESSAGE(STATUS "libdc1394-2 not found")
  ENDIF(libdc1394-2_FOUND)
ENDIF(SEARCH_FOR_DC1394_V2)


# Detect visp
IF (SEARCH_FOR_VISP)
  INCLUDE(FindVISP)
  IF (VISP_FOUND)
      LIST(APPEND LLVS_CXX_FLAGS  ${VISP_CXX_FLAGS})
      LIST(APPEND LLVS_LINK_FLAGS ${VISP_LD_FLAGS})
      SET(LLVS_HAVE_VISP 1)
      #MESSAGE(STATUS "LLVS_CXX_FLAGS: ${LLVS_CXX_FLAGS}")
  ENDIF(VISP_FOUND)
ENDIF(SEARCH_FOR_VISP)

# Detect visp
IF (SEARCH_FOR_VISP)
  INCLUDE(FindVISP)
  IF (VISP_FOUND)
      LIST(APPEND LLVS_CXX_FLAGS  ${VISP_CXX_FLAGS})
      LIST(APPEND LLVS_LINK_FLAGS ${VISP_LD_FLAGS})
      SET(LLVS_HAVE_VISP 1)
      #MESSAGE(STATUS "LLVS_CXX_FLAGS: ${LLVS_CXX_FLAGS}")
  ENDIF(VISP_FOUND)
ENDIF(SEARCH_FOR_VISP)

# Detect MBT
IF (SEARCH_FOR_MBT)
  INCLUDE(FindMBT)
  IF (MBT_FOUND)
      LIST(APPEND LLVS_CXX_FLAGS  ${LIBMBT_INCLUDE_DIR})
      LIST(APPEND LLVS_LINK_FLAGS ${LIBMBT_LIBRARIES})
      SET(LLVS_HAVE_MBT 1)
      #MESSAGE(STATUS "LLVS_CXX_FLAGS: ${LLVS_CXX_FLAGS}")
  ENDIF(MBT_FOUND)
ENDIF(SEARCH_FOR_MBT)

# Detect NMBT
IF (SEARCH_FOR_NMBT)
  INCLUDE(FindNMBT)
  IF (NMBT_FOUND)
      LIST(APPEND LLVS_CXX_FLAGS  ${LIBNMBT_INCLUDE_DIR})
      LIST(APPEND LLVS_LINK_FLAGS ${LIBNMBT_LIBRARIES})
      SET(LLVS_HAVE_NMBT 1)
      #MESSAGE(STATUS "LLVS_CXX_FLAGS: ${LLVS_CXX_FLAGS}")
  ENDIF(NMBT_FOUND)
ENDIF(SEARCH_FOR_NMBT)


SET(LLVS_SRC_FILES "")
SET(LLVS_HEADERS_FILES "")   

#----------------------------------------------------
# Generate the package dependent file sotConfig.h
#----------------------------------------------------
CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/include/llvs/llvsConfig.h.cmake
	${PROJECT_SOURCE_DIR}/include/llvs/llvsConfig.h
)

#----------------------------------------------------
# Include the rules to make the server library,
# the server itself,
# and the necessary CORBA related files. 
#----------------------------------------------------
INCLUDE(${PROJECT_SOURCE_DIR}/corba/SourceList.cmake)
INCLUDE(${PROJECT_SOURCE_DIR}/src/SourceList.cmake)
INCLUDE(${PROJECT_SOURCE_DIR}/include/llvs/SourceList.cmake)

#MESSAGE(STATUS "LLVS_SRC_FILES: ${LLVS_SRC_FILES}")
#MESSAGE(STATUS "LLVS_HEADER_FILES: ${LLVS_HEADER_FILES}")
#----------------------------------------------------
# Create the library. 
#----------------------------------------------------
ADD_LIBRARY(${LLVS_INTERN_LIBS} ${LLVS_SRC_FILES} ${LLVS_HEADER_FILES})
SET_TARGET_PROPERTIES(${LLVS_INTERN_LIBS} PROPERTIES COMPILE_FLAGS "${LLVS_CXX_FLAGS}")

#----------------------------------------------------
# Create the server.
#----------------------------------------------------
ADD_EXECUTABLE(LLVS_server ./src/MainEntryPoint.cpp )
SET_TARGET_PROPERTIES(LLVS_server PROPERTIES COMPILE_FLAGS 
  "${LLVS_server_CXX_FLAGS} ${LLVS_CXX_FLAGS}"
  LINK_FLAGS 
  "${LLVS_server_LINK_FLAGS} ${LLVS_LINK_FLAGS}  -L. -lllvs-0 ")

ADD_DEPENDENCIES(LLVS_server ${LLVS_INTERN_LIBS})

#--------------------------------------------------
# Install
#------------------------------------------------
install(TARGETS LLVS_server DESTINATION bin)
install(TARGETS ${LLVS_INTERN_LIBS} DESTINATION lib)
install(FILES ${LLVS_HEADER_FILES} DESTINATION include)


