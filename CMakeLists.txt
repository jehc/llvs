# Olivier Stasse, JRL, CNRS/AIST
# Creation: 09/09/2008
# Modify by Claire Dune : 06/10/2010
# use append instead of set and use path list instead
# of CXX flags
# 
# Copyright CNRS/AIST

#-----------------------------------------------------------
# Name of the Project
#------------------------------------------------------------
  project(LLVS)

#-----------------------------------------------------------
# CMake Settings
#------------------------------------------------------------
  CMAKE_MINIMUM_REQUIRED(VERSION 2.6.4)
  enable_language(CXX)
#Debug mode for cmake
  SET(CMAKE_VERBOSE_MAKEFILE ON)
#Get the OS
  SET(OS ${CMAKE_SYSTEM_NAME})


#----------------------------------------------------------
# Specify the project version,  An even minor number corresponds to releases.
#------------------------------------------------------------
  SET(LLVS_VERSION_MAJOR "1")
  SET(LLVS_VERSION_MINOR "0")
  SET(LLVS_VERSION_PATCH "0")
  SET(LLVS_VERSION "${LLVS_VERSION_MAJOR}.${LLVS_VERSION_MINOR}.${LLVS_VERSION_PATCH}")

#---------------------------------------------------------
# Init the path to binary, lib,doc  and include
#------------------------------------------------------------
#set the path of the binary to be generated
  SET(LLVS_BINARY_DIR "${LLVS_SOURCE_DIR}/server")
#set the path to the doc
  SET(LLVS_DOC_DIR "${CMAKE_INSTALL_PREFIX}/doc")
#set the include di
  SET(LLVS_INCLUDE_DIR "${LLVS_BINARY_DIR}/include/llvs")
#set the path to the include
  SET(LLVS_INTERN_INCLUDE_DIR "${LLVS_SOURCE_DIR}/include/llvs")
#the third party include directories we depend on
  SET(LLVS_EXTERN_INCLUDE_DIR "")
#set the name of the library generated by this package
  SET(LLVS_INTERN_LIBS "llvs-0")
#the third party libraries we depend on
  SET(LLVS_EXTERN_LIBS "")
#the third party libraries we depend on
  SET(LLVS_DEFS "")
#set the link to lib
  SET(LLVS_EXTERN_LINK_DIR "")
#set intern lib dir
  SET(LLVS_INTERN_LINK_DIR "${CMAKE_INSTALL_PREFIX}/lib")
#The location in which to install Example libraries.
   SET(LIBRARY_OUTPUT_PATH lib)
#---------------------------------------------------
# Specify the cmake path and option
#------------------------------------------------------------
  SET(CMAKE_C_INCLUDE_PATH "")
  SET(CMAKE_CXX_INCLUDE_PATH "")

#Create include directory which will contain all the headers
  MAKE_DIRECTORY(${LLVS_INTERN_INCLUDE_DIR})
  
#where are use-specific cmake modules
  LIST(
		APPEND
		CMAKE_MODULE_PATH 
		${LLVS_SOURCE_DIR}/CMakeModules
		$ENV{ROBOTPKG_BASE}/share/cmake
	)
	FIND_PACKAGE(
		Modules
		COMPONENTS
		image
		architecture
		middleware
		localization
	)
	FIND_PACKAGE(LLVT)
  INCLUDE(CheckLibraryExists)

#---------------------------------------------------------
# Specify the compile flags for the overall library
#------------------------------------------------------------
#To be used for debugging
  SET(LLVS_CXX_FLAGS " -g -c  -Wall -Wno-unused -fexceptions -DSTDC_HEADERS -I/usr/local/include/")
#Normal settings
  #SET(LLVS_CXX_FLAGS "-O3 -c  -Wall -Wno-unused -fexceptions -DSTDC_HEADERS")

#----------------------------------------------------------
# Important options
#------------------------------------------------------------
#  OPTION(BUILD_SHARED_LIBS "Build LLVS with shared libraries." ON)


#---------------------------------------------------------
# display the defaultsearch option in ccmake menu
#------------------------------------------------------------
  OPTION(SEARCH_FOR_OPENCV "search for opencv lib." ON)
  OPTION(SEARCH_FOR_VW "search for vW lib." OFF)
  OPTION(SEARCH_FOR_SCENE "search for slam davison." OFF)
  OPTION(SEARCH_FOR_VVV "search for aist vision lib vvv." OFF)
  OPTION(SEARCH_FOR_OMNIORB4 "search for corba." ON)
  OPTION(SEARCH_FOR_MMX "search for mmx lib. " OFF)
  OPTION(SEARCH_FOR_DC1394_V2 "search for lib dc 1394 v2." ON)
  OPTION(SEARCH_FOR_VISP "search for visual servoing plateform." OFF)
  OPTION(SEARCH_FOR_NMBT "search for model tracker new version." OFF)
  OPTION(SEARCH_FOR_MBT "search for model tracker old version." OFF)
  OPTION(SEARCH_FOR_BTL_SLAM "search for Bristol Visual SLAM." OFF)

#---------------------------------------------------------
#Set defaut value for the third part libraries
#------------------------------------------------------------
  SET(LLVS_HAVE_OPENCV 0)
  SET(LLVS_HAVE_VW 0)
  SET(LLVS_HAVE_SCENE 0)
  SET(LLVS_HAVE_VVV 0)
  SET(LLVS_HAVE_OMNIORB4 0)
  SET(LLVS_HAVE_MMX 0)
  SET(LLVS_HAVE_DC1394_V2 0)
  SET(LLVS_HAVE_VISP 0)
  SET(LLVS_HAVE_MBT 0)
  SET(LLVS_HAVE_NMBT 0)
  SET(LLVS_HAVE_BTL_SLAM 0)


#---------------------------------------------------------
#  Third part libraries
#
# Two solutions are used here to include lib:
# 
#   1) The first solution is to directly fill the variables 
#      LLVS_CXX_FLAGS and LLVS_LINK_FLAGS. This mean you will
#      have to write -I/pathToMyDeclarations and -L/pahtToMyLib/mylib.so 
#      This solution is well suited when a.pc file is available
#         
#   2) The second solution is used when no .pc files are availabe
#      It lists the pathToMyDeclarations in LLVS_EXTERN_INCLUDE_DIR
#      and pahtToMyLib in LLVS_INTERN_LIBS and then us the command 
#      "INCLUDE_DIRECTORIES" and "LINK_LIBRARIES" to take them into account
#------------------------------------------------------------

#Detect Pkg config
  INCLUDE(FindPkgConfig)

#Detect OpenHRP
  INCLUDE(FindOpenHRP)

#Detect VW config
  IF (SEARCH_FOR_VW)
     INCLUDE(FindVW)
     IF (VW_FOUND)
     	SET(LLVS_CXX_FLAGS "${LLVS_CXX_FLAGS} ${VW_CXX_FLAGS}")
     	SET(LLVS_LINK_FLAGS "${LLVS_LINK_FLAGS} ${VW_LD_FLAGS}")
     	SET(LLVS_HAVE_VW 1)
     ENDIF(VW_FOUND)
	 MESSAGE(STATUS "VW found: ${VW_FOUND}")
  ENDIF(SEARCH_FOR_VW)

#Detect VVV
  IF (SEARCH_FOR_VVV)
     INCLUDE(FindVVV)
     IF (VVV_FOUND)
     	SET(LLVS_CXX_FLAGS "${LLVS_CXX_FLAGS} ${VVV_CXX_FLAGS}")
     	SET(LLVS_LINK_FLAGS "${LLVS_LINK_FLAGS} ${VVV_LD_FLAGS}")
     	SET(LLVS_HAVE_VVV 1)
     ENDIF(VVV_FOUND)
	 MESSAGE(STATUS "VVV found: ${VVV_FOUND}")
  ENDIF(SEARCH_FOR_VVV)

#Detect OpenCV config
  IF (SEARCH_FOR_OPENCV)
     INCLUDE(FindOpenCV)
     IF (OPENCV_FOUND)
       	SET(LLVS_HAVE_OPENCV 1)
     	SET(LLVS_CXX_FLAGS "${LLVS_CXX_FLAGS} ${OPENCV_CXX_FLAGS}")
     	SET(LLVS_LINK_FLAGS "${LLVS_LINK_FLAGS} ${OPENCV_LD_FLAGS}")
     ENDIF(OPENCV_FOUND)
	 MESSAGE(STATUS "OPENCV found: ${OPENCV_FOUND}")
  ENDIF(SEARCH_FOR_OPENCV)

#Detect Scene
  IF (SEARCH_FOR_SCENE)
     INCLUDE(FindScene)
     IF (SCENE_FOUND)
     	SET(LLVS_CXX_FLAGS "${LLVS_CXX_FLAGS} ${SCENE_CXX_FLAGS}")
     	SET(LLVS_LINK_FLAGS "${LLVS_LINK_FLAGS} ${SCENE_LD_FLAGS}")
     	SET(LLVS_HAVE_SCENE 1)
     ENDIF(SCENE_FOUND)
	 MESSAGE(STATUS "SCENE found: ${SCENE_FOUND}")
  ENDIF(SEARCH_FOR_SCENE)

#Detect OmniOrb.
  IF (SEARCH_FOR_OMNIORB4)
    INCLUDE(UseOmniORB4)
    IF (OMNIORB4_FOUND)
     	SET(LLVS_CXX_FLAGS "${LLVS_CXX_FLAGS} ${omniORB4_cflags}")
    	IF(omniORB4_include_DIR)
		SET(LLVS_CXX_FLAGS "${LLVS_CXX_FLAGS} -I${omniORB4_include_DIR}")
    	ENDIF(omniORB4_include_DIR)
    	SET(LLVS_HAVE_OMNIORB4 1)
    	SET(LLVS_LINK_FLAGS "${LLVS_LINK_FLAGS} ${omniORB4_link_FLAGS}")
    	#MESSAGE(STATUS "OmniOrb4: LLVS_CXX_FLAGS: ${LLVS_CXX_FLAGS}")
    ENDIF (OMNIORB4_FOUND)
	MESSAGE(STATUS "OMNIORB4 found: ${OMNIORB4_FOUND}")
  ENDIF(SEARCH_FOR_OMNIORB4)

#Detect libdc1394
  IF (SEARCH_FOR_DC1394_V2)
	pkg_search_module(libdc1394-2 libdc1394-2>=2.0.2)
	IF (libdc1394-2_FOUND)
		FOREACH(option_cxxflags ${libdc1394-2_CFLAGS})
			SET(LLVS_CXX_FLAGS "${LLVS_CXX_FLAGS} ${option_cxxflags}")
			MESSAGE(STATUS "option CXX libdc1394-2: ${option_cxxflags}")
		ENDFOREACH(option_cxxflags)
		MESSAGE(STATUS "libdc1394-2: LLVS_CXX_FLAGS: ${LLVS_CXX_FLAGS}")
		FOREACH(option_ldflags ${libdc1394-2_LDFLAGS})
			MESSAGE(STATUS "option LD libdc1394-2: ${option_ldflags}")
			SET(LLVS_LINK_FLAGS "${LLVS_LINK_FLAGS} ${option_ldflags}")
		ENDFOREACH(option_ldflags)
        MESSAGE(STATUS "libdc1394-2: ${LLVS_LINK_FLAGS}")
		SET(LLVS_HAVE_DC1394_V2 1)
		SET(LLVS_EXTERN_LIBS ${LLVS_EXTERN_LIBS} "dc1394")
    ENDIF(libdc1394-2_FOUND)
	MESSAGE(STATUS "libdc1394-2 found: ${libdc1394-2_FOUND}")
  ENDIF(SEARCH_FOR_DC1394_V2)

#Detect visp
  IF (SEARCH_FOR_VISP)
     FIND_PACKAGE(VISP)
     IF (VISP_FOUND)
         SET(LLVS_HAVE_VISP 1)
      	 LIST(APPEND LLVS_EXTERN_LIBS ${VISP_LIBRARIES})
         LIST(APPEND LLVS_EXTERN_INCLUDE_DIR ${VISP_INCLUDE_DIR}) 
      	 LIST(APPEND LLVS_EXTERN_LINK_DIR ${VISP_LINK_DIRECTORIES})
    ENDIF(VISP_FOUND)
	MESSAGE(STATUS "VISP found: ${VISP_FOUND}")
  ENDIF(SEARCH_FOR_VISP)



#Detect NMBT it needs ViSP to work
  IF (SEARCH_FOR_NMBT)
     IF(NOT VISP_FOUND)
       MESSAGE(STATUS "ERROR NMBT: Visp is not found yet needed to use NMBT")
     ELSE(NOT VISP_FOUND)
       FIND_PACKAGE(NMBT)
       IF (NMBT_FOUND)
      	  SET(LLVS_HAVE_NMBT 1)
      	  LIST(APPEND LLVS_EXTERN_LIBS ${NMBT_LIBRARIES})
          LIST(APPEND LLVS_EXTERN_INCLUDE_DIR ${NMBT_INCLUDE_DIR})
      	  LIST(APPEND LLVS_EXTERN_LINK_DIR ${NMBT_LINK_DIRECTORIES})
       ENDIF (NMBT_FOUND)
     ENDIF(NOT VISP_FOUND)
	 MESSAGE(STATUS "NMBT found: ${NMBT_FOUND}")
  ENDIF(SEARCH_FOR_NMBT)

#Detect BtlSlam
# Important note: SLAM uses a different boost library version than
# the one provided by robotpkg. The only way to avoid wrong boost
# inclusion for now is to put boost includes first in the gcc
# command line.
	IF (SEARCH_FOR_BTL_SLAM)
		FIND_PACKAGE(BtlSlam)
		IF (BTL_SLAM_FOUND)
			SET(LLVS_HAVE_BTL_SLAM 1)
			INCLUDE_DIRECTORIES(${BTL_SLAM_INCLUDE_DIRS})
			#FOREACH(_include_dir ${BTL_SLAM_INCLUDE_DIRS})
			#	SET(LLVS_CXX_FLAGS "-I${_include_dir} ${LLVS_CXX_FLAGS}")
			#ENDFOREACH(_include_dir ${BTL_SLAM_INCLUDE_DIRS})
			FOREACH(_link_dir ${BTL_SLAM_LIBRARY_DIRS})
				SET(LLVS_LINK_FLAGS "${LLVS_LINK_FLAGS} -L${_link_dir}")
			ENDFOREACH(_link_dir ${BTL_SLAM_LIBRARY_DIRS})
			FOREACH(_library ${BTL_SLAM_LIBRARIES})
				SET(LLVS_LINK_FLAGS "${LLVS_LINK_FLAGS} -l${_library}")
			ENDFOREACH(_library ${BTL_SLAM_LIBRARIES})
		ENDIF(BTL_SLAM_FOUND)
		MESSAGE(STATUS "BTL_SLAM found: ${BTL_SLAM_FOUND}")
	ENDIF(SEARCH_FOR_BTL_SLAM)


# Display the compilation and linker options once and for all
MESSAGE(STATUS "LLVS_CXX_FLAGS: ${LLVS_CXX_FLAGS}")
MESSAGE(STATUS "LLVS_LINK_FLAGS: ${LLVS_LINK_FLAGS}")

MESSAGE(STATUS "LLVS_INTERN_INCLUDE_DIR : ${LLVS_INTERN_INCLUDE_DIR}")
MESSAGE(STATUS "LLVS_EXTERN_INCLUDE_DIR : ${LLVS_EXTERN_INCLUDE_DIR}")

MESSAGE(STATUS "LLVS_INTERN_LINK_DIR : ${LLVS_INTERN_LINK_DIR}")
MESSAGE(STATUS "LLVS_EXTERN_LINK_DIR : ${LLVS_EXTERN_LINK_DIR}")

MESSAGE(STATUS "LLVS_INTERN_LIBS : ${LLVS_INTERN_LIBS}")
MESSAGE(STATUS "LLVS_EXTERN_LIBS : ${LLVS_EXTERN_LIBS}")


#------------------------------------------------------------
# Concatenate intern and third party include dirs
#------------------------------------------------------------
 LIST(APPEND LLVS_INCLUDE_DIR "${LLVS_INTERN_INCLUDE_DIR}")
 LIST(APPEND LLVS_INCLUDE_DIR "${LLVS_EXTERN_INCLUDE_DIR}")
 INCLUDE_DIRECTORIES(${LLVS_INCLUDE_DIR})

#------------------------------------------------------------
# Add library path
#------------------------------------------------------------
 SET (LLVS_LINK_DIR)
 LIST(APPEND LLVS_LINK_DIR "${LLVS_INTERN_LINK_DIR}")
 LIST(APPEND LLVS_LINK_DIR "${LLVS_EXTERN_LINK_DIR}")
 LINK_DIRECTORIES(${LLVS_LINK_DIR})

#------------------------------------------------------------
# Link Libraries
#------------------------------------------------------------
  LINK_LIBRARIES(${LLVS_INTERN_LIBS};${LLVS_EXTERN_LIBS})

#----------------------------------------------------
# Generate the package dependent file llvsConfig.h
#------------------------------------------------------------
  CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/include/llvs/llvsConfig.h.cmake
	${PROJECT_SOURCE_DIR}/include/llvs/llvsConfig.h)

#----------------------------------------------------
# Include the rules to make the server library,
# the server itself,
# and the necessary CORBA related files. 
#----------------------------------------------------
  INCLUDE(${PROJECT_SOURCE_DIR}/corba/SourceList.cmake)
  INCLUDE(${PROJECT_SOURCE_DIR}/src/SourceList.cmake)
  INCLUDE(${PROJECT_SOURCE_DIR}/include/llvs/SourceList.cmake)

  MESSAGE(STATUS "LLVS_SRC_FILES: ${LLVS_SRC_FILES}")
  MESSAGE(STATUS "LLVS_HEADER_FILES: ${LLVS_HEADER_FILES}")
#----------------------------------------------------
# Create the library. 
#----------------------------------------------------
  ADD_LIBRARY(${LLVS_INTERN_LIBS} ${LLVS_SRC_FILES} ${LLVS_HEADER_FILES})
  SET_TARGET_PROPERTIES(${LLVS_INTERN_LIBS} PROPERTIES 
    COMPILE_FLAGS "${LLVS_CXX_FLAGS}"
    LINK_FLAGS " ${LLVS_LINK_FLAGS} ")
 
#----------------------------------------------------
# Create the server.
#----------------------------------------------------
  ADD_EXECUTABLE(LLVS_server ./src/MainEntryPoint.cpp )
  TARGET_LINK_LIBRARIES(${binary} 
    ${LLVS_INTERN_LIBS} ${LLVS_EXTERN_LIBS})
  
  SET_TARGET_PROPERTIES(
	LLVS_server 
	PROPERTIES
		COMPILE_FLAGS 
	  	"${LLVS_CXX_FLAGS} ${LLVS_server_CXX_FLAGS}"
	  LINK_FLAGS 
	 	 "${LLVS_server_LINK_FLAGS} ${LLVS_LINK_FLAGS}  -Llib -lllvs-0 "
	)

ADD_DEPENDENCIES(LLVS_server ${LLVS_INTERN_LIBS})
  
#--------------------------------------------------
# Install
#------------------------------------------------
  install(TARGETS LLVS_server DESTINATION bin)
  install(TARGETS ${LLVS_INTERN_LIBS} DESTINATION lib)
  install(FILES ${LLVS_HEADER_FILES} DESTINATION include/llvs)
  install(FILES ${IDL_FILES} DESTINATION share/idl/llvs) 


#----------------------------------------------------------------------
# Propagation in sub dirs
#----------------------------------------------------------------------
   SUBDIRS(unitTesting)

