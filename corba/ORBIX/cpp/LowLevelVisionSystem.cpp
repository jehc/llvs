// **********************************************************************
//
// Generated by the Orbix/E IDL-to-C++ Translator
//
// Copyright (c) 2003
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 2.2.0

#include <OBE/CORBAClient.h>
#include <LowLevelVisionSystem.h>

#ifndef OBEC_INTEGER_VERSION
#   error No Orbix/E version defined! Is <OBE/CORBA.h> included?
#endif

#ifndef OBEC_NO_VERSION_CHECK
#   if (OBEC_INTEGER_VERSION != 2020000L)
#       error Orbix/E version mismatch!
#   endif
#endif

extern "C"
{

typedef CORBA_Object _OBE_C_HRP2Camera;

typedef CORBA_Object _OBE_C_LowLevelVisionSystem;

#ifndef __OBE_C_CORBA_sequence_double_defined
#define __OBE_C_CORBA_sequence_double_defined
typedef struct
{
    CORBA_unsigned_long _maximum;
    CORBA_unsigned_long _length;
    CORBA_double* _buffer;
    CORBA_boolean _release;
} _OBE_C_CORBA_sequence_double;
#endif

typedef _OBE_C_CORBA_sequence_double _OBE_C_DoubleBuffer;

typedef struct _OBE_C_HRP2Camera_CameraParameter _OBE_C_HRP2Camera_CameraParameter;

struct _OBE_C_HRP2Camera_CameraParameter
{
    CORBA_long type;
    CORBA_long CameraId;
    CORBA_char* CameraName;
    CORBA_long Width;
    CORBA_long Height;
    CORBA_long CalibrationWidth;
    CORBA_long CalibrationHeight;
};

typedef struct _OBE_C_HRP2Camera_IntrinsicParameters _OBE_C_HRP2Camera_IntrinsicParameters;

struct _OBE_C_HRP2Camera_IntrinsicParameters
{
    CORBA_float Focal;
    CORBA_float Scale[2];
    CORBA_float SkewFactor;
    CORBA_float ImageCenter[2];
};

typedef struct _OBE_C_HRP2Camera_ProjectiveParameters _OBE_C_HRP2Camera_ProjectiveParameters;

struct _OBE_C_HRP2Camera_ProjectiveParameters
{
    CORBA_double ProjectiveMatrix[3][4];
    CORBA_double RotationMatrix[3][3];
    CORBA_double PositionVector[3];
    CORBA_double IntrinsicMatrix[3][3];
};

#ifndef __OBE_C_CORBA_sequence__OBE_C_HRP2Camera_defined
#define __OBE_C_CORBA_sequence__OBE_C_HRP2Camera_defined
typedef struct
{
    CORBA_unsigned_long _maximum;
    CORBA_unsigned_long _length;
    _OBE_C_HRP2Camera* _buffer;
    CORBA_boolean _release;
} _OBE_C_CORBA_sequence__OBE_C_HRP2Camera;
#endif

typedef _OBE_C_CORBA_sequence__OBE_C_HRP2Camera _OBE_C_HRP2CameraSeq;

#ifndef __OBE_C_CORBA_sequence_string_defined
#define __OBE_C_CORBA_sequence_string_defined
typedef struct
{
    CORBA_unsigned_long _maximum;
    CORBA_unsigned_long _length;
    CORBA_char** _buffer;
    CORBA_boolean _release;
} _OBE_C_CORBA_sequence_string;
#endif

typedef _OBE_C_CORBA_sequence_string _OBE_C_HRP2LowLevelVisionProcessesSeq;

typedef _OBE_C_CORBA_sequence_string _OBE_C_HRP2LowLevelVisionParametersSeq;

typedef CORBA_unsigned_long _OBE_C_LowLevelVisionSystem_DerivativeID;

#define _OBE_C_LowLevelVisionSystem_IDT 0
#define _OBE_C_LowLevelVisionSystem_IDX 1
#define _OBE_C_LowLevelVisionSystem_IDY 2
#define _OBE_C_LowLevelVisionSystem_IDXDX 3
#define _OBE_C_LowLevelVisionSystem_IDXDY 4
#define _OBE_C_LowLevelVisionSystem_IDYDY 5
#define _OBE_C_LowLevelVisionSystem_IDXDX2 6
#define _OBE_C_LowLevelVisionSystem_IDXDY2 7
#define _OBE_C_LowLevelVisionSystem_IDYDY2 8
#define _OBE_C_LowLevelVisionSystem_IDXDT 9
#define _OBE_C_LowLevelVisionSystem_IDYDT 10
#define _OBE_C_LowLevelVisionSystem_IDT2 11
#define _OBE_C_LowLevelVisionSystem_IDXDT2 12
#define _OBE_C_LowLevelVisionSystem_IDYDT2 13

typedef CORBA_unsigned_long _OBE_C_LowLevelVisionSystem_InputMode;

#define _OBE_C_LowLevelVisionSystem_FRAMEGRABBER 0
#define _OBE_C_LowLevelVisionSystem_FILES 1
#define _OBE_C_LowLevelVisionSystem_FILESINGLE 2
#define _OBE_C_LowLevelVisionSystem_SIMULATION 3

typedef CORBA_unsigned_long _OBE_C_LowLevelVisionSystem_SynchroMode;

#define _OBE_C_LowLevelVisionSystem_SYNCHRO_FLOW 0
#define _OBE_C_LowLevelVisionSystem_SYNCHRO_TRIGGER 1

typedef CORBA_unsigned_long _OBE_C_LowLevelVisionSystem_DumpImageMode;

#define _OBE_C_LowLevelVisionSystem_NONE 0
#define _OBE_C_LowLevelVisionSystem_SINGLE 1
#define _OBE_C_LowLevelVisionSystem_FLOW 2

typedef struct _OBE_C_LowLevelVisionSystem_VisionSensorException _OBE_C_LowLevelVisionSystem_VisionSensorException;

struct _OBE_C_LowLevelVisionSystem_VisionSensorException
{
    CORBA_char* description;
};
}

//
// IDL:DoubleBuffer:1.0
//

static _CORBA_TypeCode _OB_TC_0__OBE_C_DoubleBuffer =
{
    CORBA_tk_double,
    NULL,
    NULL,
    0,
    NULL,
    NULL,
    NULL,
    NULL,
    0,
    NULL,
    OBEC_TRUE
};

static _CORBA_TypeCode _OB_TC_1__OBE_C_DoubleBuffer =
{
    CORBA_tk_sequence,
    NULL,
    NULL,
    0,
    NULL,
    NULL,
    NULL,
    NULL,
    0,
    &_OB_TC_0__OBE_C_DoubleBuffer,
    OBEC_TRUE
};

static _CORBA_TypeCode _OB_TC__OBE_C_DoubleBuffer =
{
    CORBA_tk_alias,
    (char*)"IDL:DoubleBuffer:1.0",
    (char*)"DoubleBuffer",
    0,
    NULL,
    NULL,
    NULL,
    NULL,
    0,
    &_OB_TC_1__OBE_C_DoubleBuffer,
    OBEC_TRUE
};

static OB::TypeCodeConst _OBE_TC_DoubleBuffer(&_OB_TC__OBE_C_DoubleBuffer);

//
// IDL:HRP2Camera:1.0
//
static _CORBA_TypeCode _OB_TC__OBE_C_HRP2Camera =
{
    CORBA_tk_objref,
    (char*)"IDL:HRP2Camera:1.0",
    (char*)"HRP2Camera",
    0,
    NULL,
    NULL,
    NULL,
    NULL,
    0,
    NULL,
    OBEC_TRUE
};

static OB::TypeCodeConst _OBE_TC_HRP2Camera(&_OB_TC__OBE_C_HRP2Camera);

//
// IDL:HRP2Camera/CameraParameter:1.0
//

extern _CORBA_TypeCode _OB_TC__OBE_C_HRP2Camera_CameraParameter;

static _CORBA_TypeCode _OB_TC_0__OBE_C_HRP2Camera_CameraParameter =
{
    CORBA_tk_long,
    NULL,
    NULL,
    0,
    NULL,
    NULL,
    NULL,
    NULL,
    0,
    NULL,
    OBEC_TRUE
};

static _CORBA_TypeCode _OB_TC_1__OBE_C_HRP2Camera_CameraParameter =
{
    CORBA_tk_string,
    NULL,
    NULL,
    0,
    NULL,
    NULL,
    NULL,
    NULL,
    0,
    NULL,
    OBEC_TRUE
};

static _CORBA_TypeCode* _OB_TC__OBE_C_HRP2Camera_CameraParameter__OB_tc_member_types[] =
{
    &_OB_TC_0__OBE_C_HRP2Camera_CameraParameter,
    &_OB_TC_0__OBE_C_HRP2Camera_CameraParameter,
    &_OB_TC_1__OBE_C_HRP2Camera_CameraParameter,
    &_OB_TC_0__OBE_C_HRP2Camera_CameraParameter,
    &_OB_TC_0__OBE_C_HRP2Camera_CameraParameter,
    &_OB_TC_0__OBE_C_HRP2Camera_CameraParameter,
    &_OB_TC_0__OBE_C_HRP2Camera_CameraParameter
};

static char* _OB_TC__OBE_C_HRP2Camera_CameraParameter__OB_tc_member_names[] =
{
    (char*)"type",
    (char*)"CameraId",
    (char*)"CameraName",
    (char*)"Width",
    (char*)"Height",
    (char*)"CalibrationWidth",
    (char*)"CalibrationHeight"
};

_CORBA_TypeCode _OB_TC__OBE_C_HRP2Camera_CameraParameter =
{
    CORBA_tk_struct,
    (char*)"IDL:HRP2Camera/CameraParameter:1.0",
    (char*)"CameraParameter",
    7,
    _OB_TC__OBE_C_HRP2Camera_CameraParameter__OB_tc_member_names,
    _OB_TC__OBE_C_HRP2Camera_CameraParameter__OB_tc_member_types,
    NULL,
    NULL,
    0,
    NULL,
    OBEC_TRUE
};

static OB::TypeCodeConst _OBE_TC_HRP2Camera_CameraParameter(&_OB_TC__OBE_C_HRP2Camera_CameraParameter);

//
// IDL:HRP2Camera/IntrinsicParameters:1.0
//

extern _CORBA_TypeCode _OB_TC__OBE_C_HRP2Camera_IntrinsicParameters;

static _CORBA_TypeCode _OB_TC_0__OBE_C_HRP2Camera_IntrinsicParameters =
{
    CORBA_tk_float,
    NULL,
    NULL,
    0,
    NULL,
    NULL,
    NULL,
    NULL,
    0,
    NULL,
    OBEC_TRUE
};

static _CORBA_TypeCode _OB_TC_1__OBE_C_HRP2Camera_IntrinsicParameters =
{
    CORBA_tk_array,
    NULL,
    NULL,
    0,
    NULL,
    NULL,
    NULL,
    NULL,
    2,
    &_OB_TC_0__OBE_C_HRP2Camera_IntrinsicParameters,
    OBEC_TRUE
};

static _CORBA_TypeCode _OB_TC_2__OBE_C_HRP2Camera_IntrinsicParameters =
{
    CORBA_tk_array,
    NULL,
    NULL,
    0,
    NULL,
    NULL,
    NULL,
    NULL,
    2,
    &_OB_TC_0__OBE_C_HRP2Camera_IntrinsicParameters,
    OBEC_TRUE
};

static _CORBA_TypeCode* _OB_TC__OBE_C_HRP2Camera_IntrinsicParameters__OB_tc_member_types[] =
{
    &_OB_TC_0__OBE_C_HRP2Camera_IntrinsicParameters,
    &_OB_TC_1__OBE_C_HRP2Camera_IntrinsicParameters,
    &_OB_TC_0__OBE_C_HRP2Camera_IntrinsicParameters,
    &_OB_TC_2__OBE_C_HRP2Camera_IntrinsicParameters
};

static char* _OB_TC__OBE_C_HRP2Camera_IntrinsicParameters__OB_tc_member_names[] =
{
    (char*)"Focal",
    (char*)"Scale",
    (char*)"SkewFactor",
    (char*)"ImageCenter"
};

_CORBA_TypeCode _OB_TC__OBE_C_HRP2Camera_IntrinsicParameters =
{
    CORBA_tk_struct,
    (char*)"IDL:HRP2Camera/IntrinsicParameters:1.0",
    (char*)"IntrinsicParameters",
    4,
    _OB_TC__OBE_C_HRP2Camera_IntrinsicParameters__OB_tc_member_names,
    _OB_TC__OBE_C_HRP2Camera_IntrinsicParameters__OB_tc_member_types,
    NULL,
    NULL,
    0,
    NULL,
    OBEC_TRUE
};

static OB::TypeCodeConst _OBE_TC_HRP2Camera_IntrinsicParameters(&_OB_TC__OBE_C_HRP2Camera_IntrinsicParameters);

//
// IDL:HRP2Camera/ProjectiveParameters:1.0
//

extern _CORBA_TypeCode _OB_TC__OBE_C_HRP2Camera_ProjectiveParameters;

static _CORBA_TypeCode _OB_TC_0__OBE_C_HRP2Camera_ProjectiveParameters =
{
    CORBA_tk_array,
    NULL,
    NULL,
    0,
    NULL,
    NULL,
    NULL,
    NULL,
    4,
    &_OB_TC_0__OBE_C_DoubleBuffer,
    OBEC_TRUE
};

static _CORBA_TypeCode _OB_TC_1__OBE_C_HRP2Camera_ProjectiveParameters =
{
    CORBA_tk_array,
    NULL,
    NULL,
    0,
    NULL,
    NULL,
    NULL,
    NULL,
    3,
    &_OB_TC_0__OBE_C_HRP2Camera_ProjectiveParameters,
    OBEC_TRUE
};

static _CORBA_TypeCode _OB_TC_2__OBE_C_HRP2Camera_ProjectiveParameters =
{
    CORBA_tk_array,
    NULL,
    NULL,
    0,
    NULL,
    NULL,
    NULL,
    NULL,
    3,
    &_OB_TC_0__OBE_C_DoubleBuffer,
    OBEC_TRUE
};

static _CORBA_TypeCode _OB_TC_3__OBE_C_HRP2Camera_ProjectiveParameters =
{
    CORBA_tk_array,
    NULL,
    NULL,
    0,
    NULL,
    NULL,
    NULL,
    NULL,
    3,
    &_OB_TC_2__OBE_C_HRP2Camera_ProjectiveParameters,
    OBEC_TRUE
};

static _CORBA_TypeCode _OB_TC_4__OBE_C_HRP2Camera_ProjectiveParameters =
{
    CORBA_tk_array,
    NULL,
    NULL,
    0,
    NULL,
    NULL,
    NULL,
    NULL,
    3,
    &_OB_TC_0__OBE_C_DoubleBuffer,
    OBEC_TRUE
};

static _CORBA_TypeCode _OB_TC_5__OBE_C_HRP2Camera_ProjectiveParameters =
{
    CORBA_tk_array,
    NULL,
    NULL,
    0,
    NULL,
    NULL,
    NULL,
    NULL,
    3,
    &_OB_TC_0__OBE_C_DoubleBuffer,
    OBEC_TRUE
};

static _CORBA_TypeCode _OB_TC_6__OBE_C_HRP2Camera_ProjectiveParameters =
{
    CORBA_tk_array,
    NULL,
    NULL,
    0,
    NULL,
    NULL,
    NULL,
    NULL,
    3,
    &_OB_TC_5__OBE_C_HRP2Camera_ProjectiveParameters,
    OBEC_TRUE
};

static _CORBA_TypeCode* _OB_TC__OBE_C_HRP2Camera_ProjectiveParameters__OB_tc_member_types[] =
{
    &_OB_TC_1__OBE_C_HRP2Camera_ProjectiveParameters,
    &_OB_TC_3__OBE_C_HRP2Camera_ProjectiveParameters,
    &_OB_TC_4__OBE_C_HRP2Camera_ProjectiveParameters,
    &_OB_TC_6__OBE_C_HRP2Camera_ProjectiveParameters
};

static char* _OB_TC__OBE_C_HRP2Camera_ProjectiveParameters__OB_tc_member_names[] =
{
    (char*)"ProjectiveMatrix",
    (char*)"RotationMatrix",
    (char*)"PositionVector",
    (char*)"IntrinsicMatrix"
};

_CORBA_TypeCode _OB_TC__OBE_C_HRP2Camera_ProjectiveParameters =
{
    CORBA_tk_struct,
    (char*)"IDL:HRP2Camera/ProjectiveParameters:1.0",
    (char*)"ProjectiveParameters",
    4,
    _OB_TC__OBE_C_HRP2Camera_ProjectiveParameters__OB_tc_member_names,
    _OB_TC__OBE_C_HRP2Camera_ProjectiveParameters__OB_tc_member_types,
    NULL,
    NULL,
    0,
    NULL,
    OBEC_TRUE
};

static OB::TypeCodeConst _OBE_TC_HRP2Camera_ProjectiveParameters(&_OB_TC__OBE_C_HRP2Camera_ProjectiveParameters);

//
// IDL:HRP2CameraSeq:1.0
//

static _CORBA_TypeCode _OB_TC_0__OBE_C_HRP2CameraSeq =
{
    CORBA_tk_sequence,
    NULL,
    NULL,
    0,
    NULL,
    NULL,
    NULL,
    NULL,
    0,
    &_OB_TC__OBE_C_HRP2Camera,
    OBEC_TRUE
};

static _CORBA_TypeCode _OB_TC__OBE_C_HRP2CameraSeq =
{
    CORBA_tk_alias,
    (char*)"IDL:HRP2CameraSeq:1.0",
    (char*)"HRP2CameraSeq",
    0,
    NULL,
    NULL,
    NULL,
    NULL,
    0,
    &_OB_TC_0__OBE_C_HRP2CameraSeq,
    OBEC_TRUE
};

static OB::TypeCodeConst _OBE_TC_HRP2CameraSeq(&_OB_TC__OBE_C_HRP2CameraSeq);

//
// IDL:HRP2LowLevelVisionProcessesSeq:1.0
//

static _CORBA_TypeCode _OB_TC_0__OBE_C_HRP2LowLevelVisionProcessesSeq =
{
    CORBA_tk_sequence,
    NULL,
    NULL,
    0,
    NULL,
    NULL,
    NULL,
    NULL,
    0,
    &_OB_TC_1__OBE_C_HRP2Camera_CameraParameter,
    OBEC_TRUE
};

static _CORBA_TypeCode _OB_TC__OBE_C_HRP2LowLevelVisionProcessesSeq =
{
    CORBA_tk_alias,
    (char*)"IDL:HRP2LowLevelVisionProcessesSeq:1.0",
    (char*)"HRP2LowLevelVisionProcessesSeq",
    0,
    NULL,
    NULL,
    NULL,
    NULL,
    0,
    &_OB_TC_0__OBE_C_HRP2LowLevelVisionProcessesSeq,
    OBEC_TRUE
};

static OB::TypeCodeConst _OBE_TC_HRP2LowLevelVisionProcessesSeq(&_OB_TC__OBE_C_HRP2LowLevelVisionProcessesSeq);

//
// IDL:HRP2LowLevelVisionParametersSeq:1.0
//

static _CORBA_TypeCode _OB_TC_0__OBE_C_HRP2LowLevelVisionParametersSeq =
{
    CORBA_tk_sequence,
    NULL,
    NULL,
    0,
    NULL,
    NULL,
    NULL,
    NULL,
    0,
    &_OB_TC_1__OBE_C_HRP2Camera_CameraParameter,
    OBEC_TRUE
};

static _CORBA_TypeCode _OB_TC__OBE_C_HRP2LowLevelVisionParametersSeq =
{
    CORBA_tk_alias,
    (char*)"IDL:HRP2LowLevelVisionParametersSeq:1.0",
    (char*)"HRP2LowLevelVisionParametersSeq",
    0,
    NULL,
    NULL,
    NULL,
    NULL,
    0,
    &_OB_TC_0__OBE_C_HRP2LowLevelVisionParametersSeq,
    OBEC_TRUE
};

static OB::TypeCodeConst _OBE_TC_HRP2LowLevelVisionParametersSeq(&_OB_TC__OBE_C_HRP2LowLevelVisionParametersSeq);

//
// IDL:LowLevelVisionSystem:1.0
//
static _CORBA_TypeCode _OB_TC__OBE_C_LowLevelVisionSystem =
{
    CORBA_tk_objref,
    (char*)"IDL:LowLevelVisionSystem:1.0",
    (char*)"LowLevelVisionSystem",
    0,
    NULL,
    NULL,
    NULL,
    NULL,
    0,
    NULL,
    OBEC_TRUE
};

static OB::TypeCodeConst _OBE_TC_LowLevelVisionSystem(&_OB_TC__OBE_C_LowLevelVisionSystem);

//
// IDL:LowLevelVisionSystem/DerivativeID:1.0
//

static char* _OB_TC__OBE_C_LowLevelVisionSystem_DerivativeID__OB_tc_member_names[] =
{
    (char*)"IDT",
    (char*)"IDX",
    (char*)"IDY",
    (char*)"IDXDX",
    (char*)"IDXDY",
    (char*)"IDYDY",
    (char*)"IDXDX2",
    (char*)"IDXDY2",
    (char*)"IDYDY2",
    (char*)"IDXDT",
    (char*)"IDYDT",
    (char*)"IDT2",
    (char*)"IDXDT2",
    (char*)"IDYDT2"
};

static _CORBA_TypeCode _OB_TC__OBE_C_LowLevelVisionSystem_DerivativeID =
{
    CORBA_tk_enum,
    (char*)"IDL:LowLevelVisionSystem/DerivativeID:1.0",
    (char*)"DerivativeID",
    14,
    _OB_TC__OBE_C_LowLevelVisionSystem_DerivativeID__OB_tc_member_names,
    NULL,
    NULL,
    NULL,
    0,
    NULL,
    OBEC_TRUE
};

static OB::TypeCodeConst _OBE_TC_LowLevelVisionSystem_DerivativeID(&_OB_TC__OBE_C_LowLevelVisionSystem_DerivativeID);

//
// IDL:LowLevelVisionSystem/InputMode:1.0
//

static char* _OB_TC__OBE_C_LowLevelVisionSystem_InputMode__OB_tc_member_names[] =
{
    (char*)"FRAMEGRABBER",
    (char*)"FILES",
    (char*)"FILESINGLE",
    (char*)"SIMULATION"
};

static _CORBA_TypeCode _OB_TC__OBE_C_LowLevelVisionSystem_InputMode =
{
    CORBA_tk_enum,
    (char*)"IDL:LowLevelVisionSystem/InputMode:1.0",
    (char*)"InputMode",
    4,
    _OB_TC__OBE_C_LowLevelVisionSystem_InputMode__OB_tc_member_names,
    NULL,
    NULL,
    NULL,
    0,
    NULL,
    OBEC_TRUE
};

static OB::TypeCodeConst _OBE_TC_LowLevelVisionSystem_InputMode(&_OB_TC__OBE_C_LowLevelVisionSystem_InputMode);

//
// IDL:LowLevelVisionSystem/SynchroMode:1.0
//

static char* _OB_TC__OBE_C_LowLevelVisionSystem_SynchroMode__OB_tc_member_names[] =
{
    (char*)"SYNCHRO_FLOW",
    (char*)"SYNCHRO_TRIGGER"
};

static _CORBA_TypeCode _OB_TC__OBE_C_LowLevelVisionSystem_SynchroMode =
{
    CORBA_tk_enum,
    (char*)"IDL:LowLevelVisionSystem/SynchroMode:1.0",
    (char*)"SynchroMode",
    2,
    _OB_TC__OBE_C_LowLevelVisionSystem_SynchroMode__OB_tc_member_names,
    NULL,
    NULL,
    NULL,
    0,
    NULL,
    OBEC_TRUE
};

static OB::TypeCodeConst _OBE_TC_LowLevelVisionSystem_SynchroMode(&_OB_TC__OBE_C_LowLevelVisionSystem_SynchroMode);

//
// IDL:LowLevelVisionSystem/DumpImageMode:1.0
//

static char* _OB_TC__OBE_C_LowLevelVisionSystem_DumpImageMode__OB_tc_member_names[] =
{
    (char*)"NONE",
    (char*)"SINGLE",
    (char*)"FLOW"
};

static _CORBA_TypeCode _OB_TC__OBE_C_LowLevelVisionSystem_DumpImageMode =
{
    CORBA_tk_enum,
    (char*)"IDL:LowLevelVisionSystem/DumpImageMode:1.0",
    (char*)"DumpImageMode",
    3,
    _OB_TC__OBE_C_LowLevelVisionSystem_DumpImageMode__OB_tc_member_names,
    NULL,
    NULL,
    NULL,
    0,
    NULL,
    OBEC_TRUE
};

static OB::TypeCodeConst _OBE_TC_LowLevelVisionSystem_DumpImageMode(&_OB_TC__OBE_C_LowLevelVisionSystem_DumpImageMode);

//
// IDL:LowLevelVisionSystem/VisionSensorException:1.0
//

extern _CORBA_TypeCode _OB_TC__OBE_C_LowLevelVisionSystem_VisionSensorException;

static _CORBA_TypeCode* _OB_TC__OBE_C_LowLevelVisionSystem_VisionSensorException__OB_tc_member_types[] =
{
    &_OB_TC_1__OBE_C_HRP2Camera_CameraParameter
};

static char* _OB_TC__OBE_C_LowLevelVisionSystem_VisionSensorException__OB_tc_member_names[] =
{
    (char*)"description"
};

_CORBA_TypeCode _OB_TC__OBE_C_LowLevelVisionSystem_VisionSensorException =
{
    CORBA_tk_except,
    (char*)"IDL:LowLevelVisionSystem/VisionSensorException:1.0",
    (char*)"VisionSensorException",
    1,
    _OB_TC__OBE_C_LowLevelVisionSystem_VisionSensorException__OB_tc_member_names,
    _OB_TC__OBE_C_LowLevelVisionSystem_VisionSensorException__OB_tc_member_types,
    NULL,
    NULL,
    0,
    NULL,
    OBEC_TRUE
};

static OB::TypeCodeConst _OBE_TC_LowLevelVisionSystem_VisionSensorException(&_OB_TC__OBE_C_LowLevelVisionSystem_VisionSensorException);

CORBA::TypeCode_ptr _tc_DoubleBuffer = &_OBE_TC_DoubleBuffer;

CORBA::TypeCode_ptr _tc_HRP2Camera = &_OBE_TC_HRP2Camera;

CORBA::TypeCode_ptr HRP2Camera::_tc_CameraParameter = &_OBE_TC_HRP2Camera_CameraParameter;

CORBA::TypeCode_ptr HRP2Camera::_tc_IntrinsicParameters = &_OBE_TC_HRP2Camera_IntrinsicParameters;

CORBA::TypeCode_ptr HRP2Camera::_tc_ProjectiveParameters = &_OBE_TC_HRP2Camera_ProjectiveParameters;

CORBA::TypeCode_ptr _tc_HRP2CameraSeq = &_OBE_TC_HRP2CameraSeq;

CORBA::TypeCode_ptr _tc_HRP2LowLevelVisionProcessesSeq = &_OBE_TC_HRP2LowLevelVisionProcessesSeq;

CORBA::TypeCode_ptr _tc_HRP2LowLevelVisionParametersSeq = &_OBE_TC_HRP2LowLevelVisionParametersSeq;

CORBA::TypeCode_ptr _tc_LowLevelVisionSystem = &_OBE_TC_LowLevelVisionSystem;

CORBA::TypeCode_ptr LowLevelVisionSystem::_tc_DerivativeID = &_OBE_TC_LowLevelVisionSystem_DerivativeID;

CORBA::TypeCode_ptr LowLevelVisionSystem::_tc_InputMode = &_OBE_TC_LowLevelVisionSystem_InputMode;

CORBA::TypeCode_ptr LowLevelVisionSystem::_tc_SynchroMode = &_OBE_TC_LowLevelVisionSystem_SynchroMode;

CORBA::TypeCode_ptr LowLevelVisionSystem::_tc_DumpImageMode = &_OBE_TC_LowLevelVisionSystem_DumpImageMode;

CORBA::TypeCode_ptr LowLevelVisionSystem::_tc_VisionSensorException = &_OBE_TC_LowLevelVisionSystem_VisionSensorException;

//
// IDL:DoubleBuffer:1.0
//
static CORBA::AnyContentDestroyerDelete<DoubleBuffer> OBAnyContentDestroyerInstance_DoubleBuffer;

void
operator<<=(CORBA::Any& any, DoubleBuffer* v)
{
    _OBE_C_CORBA_sequence_double* p = (_OBE_C_CORBA_sequence_double*)OBEC_allocate_with_arg(CORBA_any__fini_with_typecode, _tc_DoubleBuffer->_OB_impl_nodup(), sizeof(_OBE_C_CORBA_sequence_double));
    (*p)._length = (*v).length();
    (*p)._maximum = (*v).length();
    (*p)._release = OBEC_TRUE;
    (*p)._buffer = (CORBA_double*)OBEC_allocate_buffer(NULL, sizeof(CORBA_double) * (*p)._length, (*p)._length, OBEC_FALSE);

    memcpy((*p)._buffer, (*v).get_buffer(), sizeof(CORBA_double) * (*p)._length);
    any.replace(_tc_DoubleBuffer, p, false, v, &OBAnyContentDestroyerInstance_DoubleBuffer);
}

void
operator<<=(CORBA::Any& any, const DoubleBuffer& v)
{
    _OBE_C_CORBA_sequence_double* p = (_OBE_C_CORBA_sequence_double*)OBEC_allocate_with_arg(CORBA_any__fini_with_typecode, _tc_DoubleBuffer->_OB_impl_nodup(), sizeof(_OBE_C_CORBA_sequence_double));
    (*p)._length = v.length();
    (*p)._maximum = v.length();
    (*p)._release = OBEC_TRUE;
    (*p)._buffer = (CORBA_double*)OBEC_allocate_buffer(NULL, sizeof(CORBA_double) * (*p)._length, (*p)._length, OBEC_FALSE);

    memcpy((*p)._buffer, v.get_buffer(), sizeof(CORBA_double) * (*p)._length);
    any.replace(_tc_DoubleBuffer, p, 0);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const DoubleBuffer*& v)
{
    if (!any.check_type(_tc_DoubleBuffer))
        return false;

    v = (const DoubleBuffer*)any.cpp_value();
    if (v == 0)
    {
        _OBE_C_CORBA_sequence_double* p = (_OBE_C_CORBA_sequence_double*)any.value();
        assert(p != NULL);
        DoubleBuffer* val = new DoubleBuffer;
        (*val).length((*p)._length);

        memcpy((*val).get_buffer(), (*p)._buffer, sizeof(CORBA_double) * (*p)._length);
        ((CORBA::Any&)any).cpp_value(val, &OBAnyContentDestroyerInstance_DoubleBuffer);
        v = val;
    }

    return true;
}

//
// IDL:HRP2Camera:1.0
//
const char* HRP2Camera::ids_[] =
{
    "IDL:HRP2Camera:1.0",
    0
};

void
OBDuplicate(HRP2Camera_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(HRP2Camera_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

HRP2Camera_ptr
HRP2Camera::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        HRP2Camera_ptr v = dynamic_cast<HRP2Camera_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            ::HRP2Camera* val = new ::HRP2Camera;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

const char**
HRP2Camera::_OB_staticIds()
{
    return ids_;
}

const char**
HRP2Camera::_OB_ids() const
{
    return ::HRP2Camera::ids_;
}

void
OBMarshal(
    HRP2Camera_ptr _ob_v,
    OBEC_OutputStreamImpl* _ob_out,
    CORBA_Environment* _ob_cev
)
{
    CORBA_Object _ob_cobj = NULL;
    if (_ob_v)
    {
        _ob_cobj = _ob_v->_OB_impl_nodup();
        assert(_ob_cobj != NULL);
    }
    OBEC_OutputStreamImpl_write_Object(_ob_out, _ob_cobj, _ob_cev);
}

void
OBUnmarshal(
    HRP2Camera_ptr& _ob_v,
    OBEC_InputStreamImpl* _ob_in,
    CORBA_Environment* _ob_cev
)
{
    HRP2Camera_var old = _ob_v;
    CORBA_Object _ob_cobj = OBEC_InputStreamImpl_read_Object(_ob_in, _ob_cev);

    if (_ob_cobj != NULL && _ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_v = new HRP2Camera;
        _ob_v->_OB_setup(_ob_cobj);
        CORBA_Object_release(_ob_cobj);
    }
    else
        _ob_v = HRP2Camera::_nil();
}

//
// IDL:HRP2Camera/GetCameraParameter:1.0
//
::HRP2Camera::CameraParameter*
HRP2Camera::_OB_op_GetCameraParameter(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    ::HRP2Camera::CameraParameter_var _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "GetCameraParameter", 18, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = new ::HRP2Camera::CameraParameter;
                ::HRP2Camera::CameraParameter::_OB_unmarshal(_ob_r.inout(), _ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r._retn();
}

//
// IDL:HRP2Camera/GetIntrinsicParameters:1.0
//
::HRP2Camera::IntrinsicParameters
HRP2Camera::_OB_op_GetIntrinsicParameters(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    ::HRP2Camera::IntrinsicParameters _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "GetIntrinsicParameters", 22, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                ::HRP2Camera::IntrinsicParameters::_OB_unmarshal(_ob_r, _ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:HRP2Camera/SetAcquisitionSize:1.0
//
CORBA::Long
HRP2Camera::_OB_op_SetAcquisitionSize(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA::Long aWidth,
    CORBA::Long aHeight,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    CORBA::Long _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = 0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_OutputStreamImpl* _ob_out;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "SetAcquisitionSize", 18, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            _ob_out = OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            OBEC_OutputStreamImpl_write_long(_ob_out, aWidth, _ob_cev);
            OBEC_OutputStreamImpl_write_long(_ob_out, aHeight, _ob_cev);
            if (_ob_cev->_major == CORBA_SYSTEM_EXCEPTION)
            {
                OBEC_DowncallImpl_marshalEx(&_ob_down, _ob_cev);
                break;
            }

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:HRP2Camera/GetProjectiveParameters:1.0
//
::HRP2Camera::ProjectiveParameters
HRP2Camera::_OB_op_GetProjectiveParameters(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    ::HRP2Camera::ProjectiveParameters _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "GetProjectiveParameters", 23, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                ::HRP2Camera::ProjectiveParameters::_OB_unmarshal(_ob_r, _ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

void
operator<<=(CORBA::Any& any, HRP2Camera_ptr* v)
{
    CORBA_Object cobj = CORBA_OBJECT_NIL;
    if (!CORBA::is_nil(*v))
    {
        cobj = (*v)->_OB_impl_nodup();
    }
    any.replace(_tc_HRP2Camera, &cobj, true, (CORBA::Object_ptr)*v, &CORBA::Any::sm_any_content_destroyer_object);
}

void
operator<<=(CORBA::Any& any, HRP2Camera_ptr v)
{
    HRP2Camera_ptr val = HRP2Camera::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, HRP2Camera_ptr& v)
{
    if (any.check_type(_tc_HRP2Camera))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.cpp_value();
        if (!CORBA::is_nil(val))
            v = dynamic_cast<HRP2Camera_ptr>(val);
        else
        {
            CORBA_Object cobj = *(CORBA_Object*)any.value();
            if (cobj != CORBA_OBJECT_NIL)
            {
                HRP2Camera* obj = new HRP2Camera;
                obj->_OB_setup(cobj);
                v = obj;
                ((CORBA::Any&)any).cpp_value((CORBA::Object_ptr)obj, &CORBA::Any::sm_any_content_destroyer_object);
            }
            else
                v = HRP2Camera::_nil();
        }

        return true;
    }
    else
        return false;
}

//
// IDL:HRP2Camera/CameraParameter:1.0
//
#ifdef OB_PURIFY_CLEAN
HRP2Camera::CameraParameter::CameraParameter()
{
    memset(&type, 0, sizeof(type));
    memset(&CameraId, 0, sizeof(CameraId));
    memset(&Width, 0, sizeof(Width));
    memset(&Height, 0, sizeof(Height));
    memset(&CalibrationWidth, 0, sizeof(CalibrationWidth));
    memset(&CalibrationHeight, 0, sizeof(CalibrationHeight));
}
#endif

HRP2Camera::CameraParameter::CameraParameter(const CameraParameter& _ob_a)
    : type(_ob_a.type),
      CameraId(_ob_a.CameraId),
      CameraName(_ob_a.CameraName),
      Width(_ob_a.Width),
      Height(_ob_a.Height),
      CalibrationWidth(_ob_a.CalibrationWidth),
      CalibrationHeight(_ob_a.CalibrationHeight)
{
}

HRP2Camera::CameraParameter&
HRP2Camera::CameraParameter::operator=(const CameraParameter& _ob_a)
{
    if(this != &_ob_a)
    {
        type = _ob_a.type;
        CameraId = _ob_a.CameraId;
        CameraName = _ob_a.CameraName;
        Width = _ob_a.Width;
        Height = _ob_a.Height;
        CalibrationWidth = _ob_a.CalibrationWidth;
        CalibrationHeight = _ob_a.CalibrationHeight;
    }
    return *this;
}

void
HRP2Camera::CameraParameter::_OB_marshal(
    OBEC_OutputStreamImpl* _ob_out,
    CORBA_Environment* _ob_cev
) const
{
    OBEC_OutputStreamImpl_write_long(_ob_out, type, _ob_cev);
    OBEC_OutputStreamImpl_write_long(_ob_out, CameraId, _ob_cev);
    OBEC_OutputStreamImpl_write_string(_ob_out, CameraName, _ob_cev);
    OBEC_OutputStreamImpl_write_long(_ob_out, Width, _ob_cev);
    OBEC_OutputStreamImpl_write_long(_ob_out, Height, _ob_cev);
    OBEC_OutputStreamImpl_write_long(_ob_out, CalibrationWidth, _ob_cev);
    OBEC_OutputStreamImpl_write_long(_ob_out, CalibrationHeight, _ob_cev);
}

void
HRP2Camera::CameraParameter::_OB_unmarshal(
    CameraParameter& _ob_v,
    OBEC_InputStreamImpl* _ob_in,
    CORBA_Environment* _ob_cev
)
{
    _ob_v.type = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
    _ob_v.CameraId = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
    _ob_v.CameraName = OBEC_InputStreamImpl_read_string(_ob_in, _ob_cev);
    _ob_v.Width = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
    _ob_v.Height = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
    _ob_v.CalibrationWidth = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
    _ob_v.CalibrationHeight = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
}

void
HRP2Camera::CameraParameter::_OB_convert_to(
    void* _ob_data
) const
{
    _OBE_C_HRP2Camera_CameraParameter* _ob_p = (_OBE_C_HRP2Camera_CameraParameter*)_ob_data;
    _ob_p->type = type;
    _ob_p->CameraId = CameraId;
    _ob_p->CameraName = CORBA_string_dup(CameraName);
    _ob_p->Width = Width;
    _ob_p->Height = Height;
    _ob_p->CalibrationWidth = CalibrationWidth;
    _ob_p->CalibrationHeight = CalibrationHeight;
}

void
HRP2Camera::CameraParameter::_OB_convert_from(
    CameraParameter& _ob_v,
    void* _ob_data
)
{
    _OBE_C_HRP2Camera_CameraParameter* _ob_p = (_OBE_C_HRP2Camera_CameraParameter*)_ob_data;
    _ob_v.type = _ob_p->type;
    _ob_v.CameraId = _ob_p->CameraId;
    _ob_v.CameraName = CORBA::string_dup(_ob_p->CameraName);
    _ob_v.Width = _ob_p->Width;
    _ob_v.Height = _ob_p->Height;
    _ob_v.CalibrationWidth = _ob_p->CalibrationWidth;
    _ob_v.CalibrationHeight = _ob_p->CalibrationHeight;
}

static CORBA::AnyContentDestroyerDelete<HRP2Camera::CameraParameter> OBAnyContentDestroyerInstance_HRP2Camera_CameraParameter;

void
operator<<=(CORBA::Any& any, HRP2Camera::CameraParameter* v)
{
    _OBE_C_HRP2Camera_CameraParameter* p = (_OBE_C_HRP2Camera_CameraParameter*)OBEC_allocate_with_arg(CORBA_any__fini_with_typecode, HRP2Camera::_tc_CameraParameter->_OB_impl_nodup(), sizeof(_OBE_C_HRP2Camera_CameraParameter));
    (*v)._OB_convert_to(&(*p));
    any.replace(HRP2Camera::_tc_CameraParameter, p, false, v, &OBAnyContentDestroyerInstance_HRP2Camera_CameraParameter);
}

void
operator<<=(CORBA::Any& any, const HRP2Camera::CameraParameter& v)
{
    _OBE_C_HRP2Camera_CameraParameter* p = (_OBE_C_HRP2Camera_CameraParameter*)OBEC_allocate_with_arg(CORBA_any__fini_with_typecode, HRP2Camera::_tc_CameraParameter->_OB_impl_nodup(), sizeof(_OBE_C_HRP2Camera_CameraParameter));
    v._OB_convert_to(&(*p));
    any.replace(HRP2Camera::_tc_CameraParameter, p, 0);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const HRP2Camera::CameraParameter*& v)
{
    if (!any.check_type(HRP2Camera::_tc_CameraParameter))
        return 0;

    v = (const HRP2Camera::CameraParameter*)any.cpp_value();
    if (v == 0)
    {
        _OBE_C_HRP2Camera_CameraParameter* p = (_OBE_C_HRP2Camera_CameraParameter*)any.value();
        assert(p != NULL);
        HRP2Camera::CameraParameter* val = new HRP2Camera::CameraParameter;
        HRP2Camera::CameraParameter::_OB_convert_from((*val), &(*p));
        ((CORBA::Any&)any).cpp_value(val, &OBAnyContentDestroyerInstance_HRP2Camera_CameraParameter);
        v = val;
    }

    return 1;
}

//
// IDL:HRP2Camera/IntrinsicParameters:1.0
//
void
HRP2Camera::IntrinsicParameters::_OB_marshal(
    OBEC_OutputStreamImpl* _ob_out,
    CORBA_Environment* _ob_cev
) const
{
    OBEC_OutputStreamImpl_write_float(_ob_out, Focal, _ob_cev);
    OBEC_OutputStreamImpl_write_float_array(_ob_out, (const CORBA::Float*)Scale, 2, _ob_cev);
    OBEC_OutputStreamImpl_write_float(_ob_out, SkewFactor, _ob_cev);
    OBEC_OutputStreamImpl_write_float_array(_ob_out, (const CORBA::Float*)ImageCenter, 2, _ob_cev);
}

void
HRP2Camera::IntrinsicParameters::_OB_unmarshal(
    IntrinsicParameters& _ob_v,
    OBEC_InputStreamImpl* _ob_in,
    CORBA_Environment* _ob_cev
)
{
    _ob_v.Focal = OBEC_InputStreamImpl_read_float(_ob_in, _ob_cev);
    OBEC_InputStreamImpl_read_float_array(_ob_in, (CORBA::Float*)_ob_v.Scale, 2, _ob_cev);
    _ob_v.SkewFactor = OBEC_InputStreamImpl_read_float(_ob_in, _ob_cev);
    OBEC_InputStreamImpl_read_float_array(_ob_in, (CORBA::Float*)_ob_v.ImageCenter, 2, _ob_cev);
}

void
HRP2Camera::IntrinsicParameters::_OB_convert_to(
    void* _ob_data
) const
{
    _OBE_C_HRP2Camera_IntrinsicParameters* _ob_p = (_OBE_C_HRP2Camera_IntrinsicParameters*)_ob_data;
    _ob_p->Focal = Focal;
    memcpy(_ob_p->Scale, Scale, sizeof(CORBA_float) * 2);
    _ob_p->SkewFactor = SkewFactor;
    memcpy(_ob_p->ImageCenter, ImageCenter, sizeof(CORBA_float) * 2);
}

void
HRP2Camera::IntrinsicParameters::_OB_convert_from(
    IntrinsicParameters& _ob_v,
    void* _ob_data
)
{
    _OBE_C_HRP2Camera_IntrinsicParameters* _ob_p = (_OBE_C_HRP2Camera_IntrinsicParameters*)_ob_data;
    _ob_v.Focal = _ob_p->Focal;
    memcpy(_ob_v.Scale, _ob_p->Scale, sizeof(CORBA_float) * 2);
    _ob_v.SkewFactor = _ob_p->SkewFactor;
    memcpy(_ob_v.ImageCenter, _ob_p->ImageCenter, sizeof(CORBA_float) * 2);
}

static CORBA::AnyContentDestroyerDelete<HRP2Camera::IntrinsicParameters> OBAnyContentDestroyerInstance_HRP2Camera_IntrinsicParameters;

void
operator<<=(CORBA::Any& any, HRP2Camera::IntrinsicParameters* v)
{
    _OBE_C_HRP2Camera_IntrinsicParameters* p = (_OBE_C_HRP2Camera_IntrinsicParameters*)OBEC_allocate_with_arg(CORBA_any__fini_with_typecode, HRP2Camera::_tc_IntrinsicParameters->_OB_impl_nodup(), sizeof(_OBE_C_HRP2Camera_IntrinsicParameters));
    (*v)._OB_convert_to(&(*p));
    any.replace(HRP2Camera::_tc_IntrinsicParameters, p, false, v, &OBAnyContentDestroyerInstance_HRP2Camera_IntrinsicParameters);
}

void
operator<<=(CORBA::Any& any, const HRP2Camera::IntrinsicParameters& v)
{
    _OBE_C_HRP2Camera_IntrinsicParameters* p = (_OBE_C_HRP2Camera_IntrinsicParameters*)OBEC_allocate_with_arg(CORBA_any__fini_with_typecode, HRP2Camera::_tc_IntrinsicParameters->_OB_impl_nodup(), sizeof(_OBE_C_HRP2Camera_IntrinsicParameters));
    v._OB_convert_to(&(*p));
    any.replace(HRP2Camera::_tc_IntrinsicParameters, p, 0);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const HRP2Camera::IntrinsicParameters*& v)
{
    if (!any.check_type(HRP2Camera::_tc_IntrinsicParameters))
        return 0;

    v = (const HRP2Camera::IntrinsicParameters*)any.cpp_value();
    if (v == 0)
    {
        _OBE_C_HRP2Camera_IntrinsicParameters* p = (_OBE_C_HRP2Camera_IntrinsicParameters*)any.value();
        assert(p != NULL);
        HRP2Camera::IntrinsicParameters* val = new HRP2Camera::IntrinsicParameters;
        HRP2Camera::IntrinsicParameters::_OB_convert_from((*val), &(*p));
        ((CORBA::Any&)any).cpp_value(val, &OBAnyContentDestroyerInstance_HRP2Camera_IntrinsicParameters);
        v = val;
    }

    return 1;
}

//
// IDL:HRP2Camera/ProjectiveParameters:1.0
//
void
HRP2Camera::ProjectiveParameters::_OB_marshal(
    OBEC_OutputStreamImpl* _ob_out,
    CORBA_Environment* _ob_cev
) const
{
    OBEC_OutputStreamImpl_write_double_array(_ob_out, (const CORBA::Double*)ProjectiveMatrix, 12, _ob_cev);
    OBEC_OutputStreamImpl_write_double_array(_ob_out, (const CORBA::Double*)RotationMatrix, 9, _ob_cev);
    OBEC_OutputStreamImpl_write_double_array(_ob_out, (const CORBA::Double*)PositionVector, 3, _ob_cev);
    OBEC_OutputStreamImpl_write_double_array(_ob_out, (const CORBA::Double*)IntrinsicMatrix, 9, _ob_cev);
}

void
HRP2Camera::ProjectiveParameters::_OB_unmarshal(
    ProjectiveParameters& _ob_v,
    OBEC_InputStreamImpl* _ob_in,
    CORBA_Environment* _ob_cev
)
{
    OBEC_InputStreamImpl_read_double_array(_ob_in, (CORBA::Double*)_ob_v.ProjectiveMatrix, 12, _ob_cev);
    OBEC_InputStreamImpl_read_double_array(_ob_in, (CORBA::Double*)_ob_v.RotationMatrix, 9, _ob_cev);
    OBEC_InputStreamImpl_read_double_array(_ob_in, (CORBA::Double*)_ob_v.PositionVector, 3, _ob_cev);
    OBEC_InputStreamImpl_read_double_array(_ob_in, (CORBA::Double*)_ob_v.IntrinsicMatrix, 9, _ob_cev);
}

void
HRP2Camera::ProjectiveParameters::_OB_convert_to(
    void* _ob_data
) const
{
    _OBE_C_HRP2Camera_ProjectiveParameters* _ob_p = (_OBE_C_HRP2Camera_ProjectiveParameters*)_ob_data;
    memcpy(_ob_p->ProjectiveMatrix, ProjectiveMatrix, sizeof(CORBA_double) * 12);
    memcpy(_ob_p->RotationMatrix, RotationMatrix, sizeof(CORBA_double) * 9);
    memcpy(_ob_p->PositionVector, PositionVector, sizeof(CORBA_double) * 3);
    memcpy(_ob_p->IntrinsicMatrix, IntrinsicMatrix, sizeof(CORBA_double) * 9);
}

void
HRP2Camera::ProjectiveParameters::_OB_convert_from(
    ProjectiveParameters& _ob_v,
    void* _ob_data
)
{
    _OBE_C_HRP2Camera_ProjectiveParameters* _ob_p = (_OBE_C_HRP2Camera_ProjectiveParameters*)_ob_data;
    memcpy(_ob_v.ProjectiveMatrix, _ob_p->ProjectiveMatrix, sizeof(CORBA_double) * 12);
    memcpy(_ob_v.RotationMatrix, _ob_p->RotationMatrix, sizeof(CORBA_double) * 9);
    memcpy(_ob_v.PositionVector, _ob_p->PositionVector, sizeof(CORBA_double) * 3);
    memcpy(_ob_v.IntrinsicMatrix, _ob_p->IntrinsicMatrix, sizeof(CORBA_double) * 9);
}

static CORBA::AnyContentDestroyerDelete<HRP2Camera::ProjectiveParameters> OBAnyContentDestroyerInstance_HRP2Camera_ProjectiveParameters;

void
operator<<=(CORBA::Any& any, HRP2Camera::ProjectiveParameters* v)
{
    _OBE_C_HRP2Camera_ProjectiveParameters* p = (_OBE_C_HRP2Camera_ProjectiveParameters*)OBEC_allocate_with_arg(CORBA_any__fini_with_typecode, HRP2Camera::_tc_ProjectiveParameters->_OB_impl_nodup(), sizeof(_OBE_C_HRP2Camera_ProjectiveParameters));
    (*v)._OB_convert_to(&(*p));
    any.replace(HRP2Camera::_tc_ProjectiveParameters, p, false, v, &OBAnyContentDestroyerInstance_HRP2Camera_ProjectiveParameters);
}

void
operator<<=(CORBA::Any& any, const HRP2Camera::ProjectiveParameters& v)
{
    _OBE_C_HRP2Camera_ProjectiveParameters* p = (_OBE_C_HRP2Camera_ProjectiveParameters*)OBEC_allocate_with_arg(CORBA_any__fini_with_typecode, HRP2Camera::_tc_ProjectiveParameters->_OB_impl_nodup(), sizeof(_OBE_C_HRP2Camera_ProjectiveParameters));
    v._OB_convert_to(&(*p));
    any.replace(HRP2Camera::_tc_ProjectiveParameters, p, 0);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const HRP2Camera::ProjectiveParameters*& v)
{
    if (!any.check_type(HRP2Camera::_tc_ProjectiveParameters))
        return 0;

    v = (const HRP2Camera::ProjectiveParameters*)any.cpp_value();
    if (v == 0)
    {
        _OBE_C_HRP2Camera_ProjectiveParameters* p = (_OBE_C_HRP2Camera_ProjectiveParameters*)any.value();
        assert(p != NULL);
        HRP2Camera::ProjectiveParameters* val = new HRP2Camera::ProjectiveParameters;
        HRP2Camera::ProjectiveParameters::_OB_convert_from((*val), &(*p));
        ((CORBA::Any&)any).cpp_value(val, &OBAnyContentDestroyerInstance_HRP2Camera_ProjectiveParameters);
        v = val;
    }

    return 1;
}

//
// IDL:HRP2Camera/GetCameraParameter:1.0
//
::HRP2Camera::CameraParameter*
HRP2Camera::GetCameraParameter(
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    ::HRP2Camera::CameraParameter_var _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_GetCameraParameter(_ob_stub_impl, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r._retn();
}

//
// IDL:HRP2Camera/GetIntrinsicParameters:1.0
//
::HRP2Camera::IntrinsicParameters
HRP2Camera::GetIntrinsicParameters(
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    ::HRP2Camera::IntrinsicParameters _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_GetIntrinsicParameters(_ob_stub_impl, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:HRP2Camera/SetAcquisitionSize:1.0
//
CORBA::Long
HRP2Camera::SetAcquisitionSize(
    CORBA::Long aWidth,
    CORBA::Long aHeight
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA::Long _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_SetAcquisitionSize(_ob_stub_impl, aWidth, aHeight, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:HRP2Camera/GetProjectiveParameters:1.0
//
::HRP2Camera::ProjectiveParameters
HRP2Camera::GetProjectiveParameters(
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    ::HRP2Camera::ProjectiveParameters _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_GetProjectiveParameters(_ob_stub_impl, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:HRP2CameraSeq:1.0
//
static CORBA::AnyContentDestroyerDelete<HRP2CameraSeq> OBAnyContentDestroyerInstance_HRP2CameraSeq;

void
operator<<=(CORBA::Any& any, HRP2CameraSeq* v)
{
    _OBE_C_CORBA_sequence__OBE_C_HRP2Camera* p = (_OBE_C_CORBA_sequence__OBE_C_HRP2Camera*)OBEC_allocate_with_arg(CORBA_any__fini_with_typecode, _tc_HRP2CameraSeq->_OB_impl_nodup(), sizeof(_OBE_C_CORBA_sequence__OBE_C_HRP2Camera));
    (*p)._length = (*v).length();
    (*p)._maximum = (*v).length();
    (*p)._release = OBEC_TRUE;
    (*p)._buffer = (_OBE_C_HRP2Camera*)OBEC_allocate_buffer(NULL, sizeof(_OBE_C_HRP2Camera) * (*p)._length, (*p)._length, OBEC_FALSE);

    for (CORBA::ULong _ob_i0 = 0; _ob_i0 < (*p)._length; _ob_i0++)
    {
        if (CORBA::is_nil((*v)[_ob_i0]))
            (*p)._buffer[_ob_i0] = CORBA_OBJECT_NIL;
        else
            (*p)._buffer[_ob_i0] = CORBA_Object_duplicate((*v)[_ob_i0]->_OB_impl_nodup());
    }
    any.replace(_tc_HRP2CameraSeq, p, false, v, &OBAnyContentDestroyerInstance_HRP2CameraSeq);
}

void
operator<<=(CORBA::Any& any, const HRP2CameraSeq& v)
{
    _OBE_C_CORBA_sequence__OBE_C_HRP2Camera* p = (_OBE_C_CORBA_sequence__OBE_C_HRP2Camera*)OBEC_allocate_with_arg(CORBA_any__fini_with_typecode, _tc_HRP2CameraSeq->_OB_impl_nodup(), sizeof(_OBE_C_CORBA_sequence__OBE_C_HRP2Camera));
    (*p)._length = v.length();
    (*p)._maximum = v.length();
    (*p)._release = OBEC_TRUE;
    (*p)._buffer = (_OBE_C_HRP2Camera*)OBEC_allocate_buffer(NULL, sizeof(_OBE_C_HRP2Camera) * (*p)._length, (*p)._length, OBEC_FALSE);

    for (CORBA::ULong _ob_i0 = 0; _ob_i0 < (*p)._length; _ob_i0++)
    {
        if (CORBA::is_nil(v[_ob_i0]))
            (*p)._buffer[_ob_i0] = CORBA_OBJECT_NIL;
        else
            (*p)._buffer[_ob_i0] = CORBA_Object_duplicate(v[_ob_i0]->_OB_impl_nodup());
    }
    any.replace(_tc_HRP2CameraSeq, p, 0);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const HRP2CameraSeq*& v)
{
    if (!any.check_type(_tc_HRP2CameraSeq))
        return false;

    v = (const HRP2CameraSeq*)any.cpp_value();
    if (v == 0)
    {
        _OBE_C_CORBA_sequence__OBE_C_HRP2Camera* p = (_OBE_C_CORBA_sequence__OBE_C_HRP2Camera*)any.value();
        assert(p != NULL);
        HRP2CameraSeq* val = new HRP2CameraSeq;
        (*val).length((*p)._length);

        for (CORBA::ULong _ob_i0 = 0; _ob_i0 < (*p)._length; _ob_i0++)
        {
            if ((*p)._buffer[_ob_i0] == CORBA_OBJECT_NIL)
                (*val)[_ob_i0] = HRP2Camera::_nil();
            else
            {
                (*val)[_ob_i0] = new HRP2Camera;
                (*val)[_ob_i0]->_OB_setup((*p)._buffer[_ob_i0]);
            }
        }
        ((CORBA::Any&)any).cpp_value(val, &OBAnyContentDestroyerInstance_HRP2CameraSeq);
        v = val;
    }

    return true;
}

//
// IDL:HRP2LowLevelVisionProcessesSeq:1.0
//
static CORBA::AnyContentDestroyerDelete<HRP2LowLevelVisionProcessesSeq> OBAnyContentDestroyerInstance_HRP2LowLevelVisionProcessesSeq;

void
operator<<=(CORBA::Any& any, HRP2LowLevelVisionProcessesSeq* v)
{
    _OBE_C_CORBA_sequence_string* p = (_OBE_C_CORBA_sequence_string*)OBEC_allocate_with_arg(CORBA_any__fini_with_typecode, _tc_HRP2LowLevelVisionProcessesSeq->_OB_impl_nodup(), sizeof(_OBE_C_CORBA_sequence_string));
    (*p)._length = (*v).length();
    (*p)._maximum = (*v).length();
    (*p)._release = OBEC_TRUE;
    (*p)._buffer = (CORBA_char**)OBEC_allocate_buffer(NULL, sizeof(CORBA_char*) * (*p)._length, (*p)._length, OBEC_FALSE);

    for (CORBA::ULong _ob_i0 = 0; _ob_i0 < (*p)._length; _ob_i0++)
    {
        (*p)._buffer[_ob_i0] = CORBA_string_dup((*v)[_ob_i0]);
    }
    any.replace(_tc_HRP2LowLevelVisionProcessesSeq, p, false, v, &OBAnyContentDestroyerInstance_HRP2LowLevelVisionProcessesSeq);
}

void
operator<<=(CORBA::Any& any, const HRP2LowLevelVisionProcessesSeq& v)
{
    _OBE_C_CORBA_sequence_string* p = (_OBE_C_CORBA_sequence_string*)OBEC_allocate_with_arg(CORBA_any__fini_with_typecode, _tc_HRP2LowLevelVisionProcessesSeq->_OB_impl_nodup(), sizeof(_OBE_C_CORBA_sequence_string));
    (*p)._length = v.length();
    (*p)._maximum = v.length();
    (*p)._release = OBEC_TRUE;
    (*p)._buffer = (CORBA_char**)OBEC_allocate_buffer(NULL, sizeof(CORBA_char*) * (*p)._length, (*p)._length, OBEC_FALSE);

    for (CORBA::ULong _ob_i0 = 0; _ob_i0 < (*p)._length; _ob_i0++)
    {
        (*p)._buffer[_ob_i0] = CORBA_string_dup(v[_ob_i0]);
    }
    any.replace(_tc_HRP2LowLevelVisionProcessesSeq, p, 0);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const HRP2LowLevelVisionProcessesSeq*& v)
{
    if (!any.check_type(_tc_HRP2LowLevelVisionProcessesSeq))
        return false;

    v = (const HRP2LowLevelVisionProcessesSeq*)any.cpp_value();
    if (v == 0)
    {
        _OBE_C_CORBA_sequence_string* p = (_OBE_C_CORBA_sequence_string*)any.value();
        assert(p != NULL);
        HRP2LowLevelVisionProcessesSeq* val = new HRP2LowLevelVisionProcessesSeq;
        (*val).length((*p)._length);

        for (CORBA::ULong _ob_i0 = 0; _ob_i0 < (*p)._length; _ob_i0++)
        {
            (*val)[_ob_i0] = CORBA::string_dup((*p)._buffer[_ob_i0]);
        }
        ((CORBA::Any&)any).cpp_value(val, &OBAnyContentDestroyerInstance_HRP2LowLevelVisionProcessesSeq);
        v = val;
    }

    return true;
}

//
// IDL:HRP2LowLevelVisionParametersSeq:1.0
//
static CORBA::AnyContentDestroyerDelete<HRP2LowLevelVisionParametersSeq> OBAnyContentDestroyerInstance_HRP2LowLevelVisionParametersSeq;

void
operator<<=(CORBA::Any& any, HRP2LowLevelVisionParametersSeq* v)
{
    _OBE_C_CORBA_sequence_string* p = (_OBE_C_CORBA_sequence_string*)OBEC_allocate_with_arg(CORBA_any__fini_with_typecode, _tc_HRP2LowLevelVisionParametersSeq->_OB_impl_nodup(), sizeof(_OBE_C_CORBA_sequence_string));
    (*p)._length = (*v).length();
    (*p)._maximum = (*v).length();
    (*p)._release = OBEC_TRUE;
    (*p)._buffer = (CORBA_char**)OBEC_allocate_buffer(NULL, sizeof(CORBA_char*) * (*p)._length, (*p)._length, OBEC_FALSE);

    for (CORBA::ULong _ob_i0 = 0; _ob_i0 < (*p)._length; _ob_i0++)
    {
        (*p)._buffer[_ob_i0] = CORBA_string_dup((*v)[_ob_i0]);
    }
    any.replace(_tc_HRP2LowLevelVisionParametersSeq, p, false, v, &OBAnyContentDestroyerInstance_HRP2LowLevelVisionParametersSeq);
}

void
operator<<=(CORBA::Any& any, const HRP2LowLevelVisionParametersSeq& v)
{
    _OBE_C_CORBA_sequence_string* p = (_OBE_C_CORBA_sequence_string*)OBEC_allocate_with_arg(CORBA_any__fini_with_typecode, _tc_HRP2LowLevelVisionParametersSeq->_OB_impl_nodup(), sizeof(_OBE_C_CORBA_sequence_string));
    (*p)._length = v.length();
    (*p)._maximum = v.length();
    (*p)._release = OBEC_TRUE;
    (*p)._buffer = (CORBA_char**)OBEC_allocate_buffer(NULL, sizeof(CORBA_char*) * (*p)._length, (*p)._length, OBEC_FALSE);

    for (CORBA::ULong _ob_i0 = 0; _ob_i0 < (*p)._length; _ob_i0++)
    {
        (*p)._buffer[_ob_i0] = CORBA_string_dup(v[_ob_i0]);
    }
    any.replace(_tc_HRP2LowLevelVisionParametersSeq, p, 0);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const HRP2LowLevelVisionParametersSeq*& v)
{
    if (!any.check_type(_tc_HRP2LowLevelVisionParametersSeq))
        return false;

    v = (const HRP2LowLevelVisionParametersSeq*)any.cpp_value();
    if (v == 0)
    {
        _OBE_C_CORBA_sequence_string* p = (_OBE_C_CORBA_sequence_string*)any.value();
        assert(p != NULL);
        HRP2LowLevelVisionParametersSeq* val = new HRP2LowLevelVisionParametersSeq;
        (*val).length((*p)._length);

        for (CORBA::ULong _ob_i0 = 0; _ob_i0 < (*p)._length; _ob_i0++)
        {
            (*val)[_ob_i0] = CORBA::string_dup((*p)._buffer[_ob_i0]);
        }
        ((CORBA::Any&)any).cpp_value(val, &OBAnyContentDestroyerInstance_HRP2LowLevelVisionParametersSeq);
        v = val;
    }

    return true;
}

//
// IDL:LowLevelVisionSystem:1.0
//
const char* LowLevelVisionSystem::ids_[] =
{
    "IDL:LowLevelVisionSystem:1.0",
    0
};

void
OBDuplicate(LowLevelVisionSystem_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(LowLevelVisionSystem_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

LowLevelVisionSystem_ptr
LowLevelVisionSystem::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        LowLevelVisionSystem_ptr v = dynamic_cast<LowLevelVisionSystem_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            ::LowLevelVisionSystem* val = new ::LowLevelVisionSystem;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

const char**
LowLevelVisionSystem::_OB_staticIds()
{
    return ids_;
}

const char**
LowLevelVisionSystem::_OB_ids() const
{
    return ::LowLevelVisionSystem::ids_;
}

void
OBMarshal(
    LowLevelVisionSystem_ptr _ob_v,
    OBEC_OutputStreamImpl* _ob_out,
    CORBA_Environment* _ob_cev
)
{
    CORBA_Object _ob_cobj = NULL;
    if (_ob_v)
    {
        _ob_cobj = _ob_v->_OB_impl_nodup();
        assert(_ob_cobj != NULL);
    }
    OBEC_OutputStreamImpl_write_Object(_ob_out, _ob_cobj, _ob_cev);
}

void
OBUnmarshal(
    LowLevelVisionSystem_ptr& _ob_v,
    OBEC_InputStreamImpl* _ob_in,
    CORBA_Environment* _ob_cev
)
{
    LowLevelVisionSystem_var old = _ob_v;
    CORBA_Object _ob_cobj = OBEC_InputStreamImpl_read_Object(_ob_in, _ob_cev);

    if (_ob_cobj != NULL && _ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_v = new LowLevelVisionSystem;
        _ob_v->_OB_setup(_ob_cobj);
        CORBA_Object_release(_ob_cobj);
    }
    else
        _ob_v = LowLevelVisionSystem::_nil();
}

//
// IDL:LowLevelVisionSystem/destroy:1.0
//
void
LowLevelVisionSystem::_OB_op_destroy(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "destroy", 7, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);



            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);
}

//
// IDL:LowLevelVisionSystem/GetVersion:1.0
//
CORBA::Long
LowLevelVisionSystem::_OB_op_GetVersion(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    CORBA::Long _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = 0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "GetVersion", 10, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/StartMainProcess:1.0
//
CORBA::Long
LowLevelVisionSystem::_OB_op_StartMainProcess(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    CORBA::Long _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = 0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "StartMainProcess", 16, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/StopMainProcess:1.0
//
CORBA::Long
LowLevelVisionSystem::_OB_op_StopMainProcess(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    CORBA::Long _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = 0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "StopMainProcess", 15, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/StartProcess:1.0
//
CORBA::Long
LowLevelVisionSystem::_OB_op_StartProcess(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    const char* ProcessName,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    CORBA::Long _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = 0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_OutputStreamImpl* _ob_out;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "StartProcess", 12, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            _ob_out = OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            OBEC_OutputStreamImpl_write_string(_ob_out, ProcessName, _ob_cev);
            if (_ob_cev->_major == CORBA_SYSTEM_EXCEPTION)
            {
                OBEC_DowncallImpl_marshalEx(&_ob_down, _ob_cev);
                break;
            }

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/StopProcess:1.0
//
CORBA::Long
LowLevelVisionSystem::_OB_op_StopProcess(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    const char* ProcessName,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    CORBA::Long _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = 0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_OutputStreamImpl* _ob_out;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "StopProcess", 11, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            _ob_out = OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            OBEC_OutputStreamImpl_write_string(_ob_out, ProcessName, _ob_cev);
            if (_ob_cev->_major == CORBA_SYSTEM_EXCEPTION)
            {
                OBEC_DowncallImpl_marshalEx(&_ob_down, _ob_cev);
                break;
            }

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/ProcessStatus:1.0
//
CORBA::Long
LowLevelVisionSystem::_OB_op_ProcessStatus(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    const char* ProcessName,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    CORBA::Long _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = 0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_OutputStreamImpl* _ob_out;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "ProcessStatus", 13, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            _ob_out = OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            OBEC_OutputStreamImpl_write_string(_ob_out, ProcessName, _ob_cev);
            if (_ob_cev->_major == CORBA_SYSTEM_EXCEPTION)
            {
                OBEC_DowncallImpl_marshalEx(&_ob_down, _ob_cev);
                break;
            }

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/GetInputMode:1.0
//
::LowLevelVisionSystem::InputMode
LowLevelVisionSystem::_OB_op_GetInputMode(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    ::LowLevelVisionSystem::InputMode _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = (::LowLevelVisionSystem::InputMode)0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "GetInputMode", 12, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = (::LowLevelVisionSystem::InputMode)OBEC_InputStreamImpl_read_ulong(_ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/SynchronizationMode:1.0
//
::LowLevelVisionSystem::SynchroMode
LowLevelVisionSystem::_OB_op_SynchronizationMode(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    ::LowLevelVisionSystem::SynchroMode _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = (::LowLevelVisionSystem::SynchroMode)0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "SynchronizationMode", 19, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = (::LowLevelVisionSystem::SynchroMode)OBEC_InputStreamImpl_read_ulong(_ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/SetImage:1.0
//
CORBA::Long
LowLevelVisionSystem::_OB_op_SetImage(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    const ::ColorBuffer& aColorBuffer,
    CORBA::Long aWidth,
    CORBA::Long aHeight,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    CORBA::Long _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = 0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_OutputStreamImpl* _ob_out;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "SetImage", 8, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            _ob_out = OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            CORBA::ULong _ob_len0 = aColorBuffer.length();
            OBEC_OutputStreamImpl_write_ulong(_ob_out, _ob_len0, _ob_cev);
            OBEC_OutputStreamImpl_write_long_array(_ob_out, aColorBuffer.get_buffer(), _ob_len0, _ob_cev);
            OBEC_OutputStreamImpl_write_long(_ob_out, aWidth, _ob_cev);
            OBEC_OutputStreamImpl_write_long(_ob_out, aHeight, _ob_cev);
            if (_ob_cev->_major == CORBA_SYSTEM_EXCEPTION)
            {
                OBEC_DowncallImpl_marshalEx(&_ob_down, _ob_cev);
                break;
            }

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/SetImagesGrabbedSize:1.0
//
CORBA::Long
LowLevelVisionSystem::_OB_op_SetImagesGrabbedSize(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA::Long NewWidth,
    CORBA::Long NewHeight,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    CORBA::Long _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = 0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_OutputStreamImpl* _ob_out;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "SetImagesGrabbedSize", 20, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            _ob_out = OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            OBEC_OutputStreamImpl_write_long(_ob_out, NewWidth, _ob_cev);
            OBEC_OutputStreamImpl_write_long(_ob_out, NewHeight, _ob_cev);
            if (_ob_cev->_major == CORBA_SYSTEM_EXCEPTION)
            {
                OBEC_DowncallImpl_marshalEx(&_ob_down, _ob_cev);
                break;
            }

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/TriggerSynchro:1.0
//
CORBA::Long
LowLevelVisionSystem::_OB_op_TriggerSynchro(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    CORBA::Long _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = 0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "TriggerSynchro", 14, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/getCameraSeq:1.0
//
CORBA::Long
LowLevelVisionSystem::_OB_op_getCameraSeq(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    ::HRP2CameraSeq_out cameras,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    CORBA::Long _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = 0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "getCameraSeq", 12, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                cameras = new ::HRP2CameraSeq;
                CORBA::ULong _ob_len0 = OBEC_InputStreamImpl_read_ulong(_ob_in, _ob_cev);
                cameras -> length(_ob_len0);
                ::HRP2Camera_ptr * _ob_buf0 = cameras -> get_buffer();
                for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
                {
                    OBUnmarshal(_ob_buf0[_ob_i0], _ob_in, _ob_cev);
                }
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/getImage:1.0
//
CORBA::Long
LowLevelVisionSystem::_OB_op_getImage(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA::Long CameraID,
    ::ImageData_out anImage,
    char*& Format,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    CORBA::Long _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = 0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_OutputStreamImpl* _ob_out;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "getImage", 8, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            _ob_out = OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            OBEC_OutputStreamImpl_write_long(_ob_out, CameraID, _ob_cev);
            OBEC_OutputStreamImpl_write_string(_ob_out, Format, _ob_cev);
            if (_ob_cev->_major == CORBA_SYSTEM_EXCEPTION)
            {
                OBEC_DowncallImpl_marshalEx(&_ob_down, _ob_cev);
                break;
            }

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                anImage = new ::ImageData;
                ::ImageData::_OB_unmarshal(*anImage.ptr(), _ob_in, _ob_cev);
                CORBA::string_free(Format);
                Format = 0;
                Format = OBEC_InputStreamImpl_read_string(_ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/getEdgeImage:1.0
//
CORBA::Long
LowLevelVisionSystem::_OB_op_getEdgeImage(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA::Long CameraID,
    ::ImageData_out anImage,
    char*& Format,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    CORBA::Long _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = 0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_OutputStreamImpl* _ob_out;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "getEdgeImage", 12, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            _ob_out = OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            OBEC_OutputStreamImpl_write_long(_ob_out, CameraID, _ob_cev);
            OBEC_OutputStreamImpl_write_string(_ob_out, Format, _ob_cev);
            if (_ob_cev->_major == CORBA_SYSTEM_EXCEPTION)
            {
                OBEC_DowncallImpl_marshalEx(&_ob_down, _ob_cev);
                break;
            }

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                anImage = new ::ImageData;
                ::ImageData::_OB_unmarshal(*anImage.ptr(), _ob_in, _ob_cev);
                CORBA::string_free(Format);
                Format = 0;
                Format = OBEC_InputStreamImpl_read_string(_ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/getRectifiedImage:1.0
//
CORBA::Long
LowLevelVisionSystem::_OB_op_getRectifiedImage(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA::Long CameraID,
    ::ImageData_out anImage,
    char*& Format,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    CORBA::Long _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = 0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_OutputStreamImpl* _ob_out;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "getRectifiedImage", 17, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            _ob_out = OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            OBEC_OutputStreamImpl_write_long(_ob_out, CameraID, _ob_cev);
            OBEC_OutputStreamImpl_write_string(_ob_out, Format, _ob_cev);
            if (_ob_cev->_major == CORBA_SYSTEM_EXCEPTION)
            {
                OBEC_DowncallImpl_marshalEx(&_ob_down, _ob_cev);
                break;
            }

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                anImage = new ::ImageData;
                ::ImageData::_OB_unmarshal(*anImage.ptr(), _ob_in, _ob_cev);
                CORBA::string_free(Format);
                Format = 0;
                Format = OBEC_InputStreamImpl_read_string(_ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/getRangeMap:1.0
//
CORBA::Long
LowLevelVisionSystem::_OB_op_getRangeMap(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    ::RangeMap_out aRangeMap,
    char*& Format,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    CORBA::Long _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = 0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_OutputStreamImpl* _ob_out;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "getRangeMap", 11, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            _ob_out = OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            OBEC_OutputStreamImpl_write_string(_ob_out, Format, _ob_cev);
            if (_ob_cev->_major == CORBA_SYSTEM_EXCEPTION)
            {
                OBEC_DowncallImpl_marshalEx(&_ob_down, _ob_cev);
                break;
            }

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                aRangeMap = new ::RangeMap;
                CORBA::ULong _ob_len0 = OBEC_InputStreamImpl_read_ulong(_ob_in, _ob_cev);
                aRangeMap -> length(_ob_len0);
                OBEC_InputStreamImpl_read_float_array(_ob_in, aRangeMap -> get_buffer(), _ob_len0, _ob_cev);
                CORBA::string_free(Format);
                Format = 0;
                Format = OBEC_InputStreamImpl_read_string(_ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/getImageDerivative:1.0
//
CORBA::Long
LowLevelVisionSystem::_OB_op_getImageDerivative(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA::Long CameraID,
    CORBA::Long DerivativeID,
    ::FloatBuffer_out ImageDerivative,
    CORBA::Long_out Width,
    CORBA::Long_out Height,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    CORBA::Long _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = 0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_OutputStreamImpl* _ob_out;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "getImageDerivative", 18, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            _ob_out = OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            OBEC_OutputStreamImpl_write_long(_ob_out, CameraID, _ob_cev);
            OBEC_OutputStreamImpl_write_long(_ob_out, DerivativeID, _ob_cev);
            if (_ob_cev->_major == CORBA_SYSTEM_EXCEPTION)
            {
                OBEC_DowncallImpl_marshalEx(&_ob_down, _ob_cev);
                break;
            }

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                ImageDerivative = new ::FloatBuffer;
                CORBA::ULong _ob_len0 = OBEC_InputStreamImpl_read_ulong(_ob_in, _ob_cev);
                ImageDerivative -> length(_ob_len0);
                OBEC_InputStreamImpl_read_float_array(_ob_in, ImageDerivative -> get_buffer(), _ob_len0, _ob_cev);
                Width = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                Height = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/getOpticalFlow:1.0
//
CORBA::Long
LowLevelVisionSystem::_OB_op_getOpticalFlow(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA::Long CameraID,
    ::FloatBuffer_out OpticalFlow,
    ::FloatBuffer_out Confidence,
    CORBA::Long_out Width,
    CORBA::Long_out Height,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    CORBA::Long _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = 0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_OutputStreamImpl* _ob_out;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "getOpticalFlow", 14, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            _ob_out = OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            OBEC_OutputStreamImpl_write_long(_ob_out, CameraID, _ob_cev);
            if (_ob_cev->_major == CORBA_SYSTEM_EXCEPTION)
            {
                OBEC_DowncallImpl_marshalEx(&_ob_down, _ob_cev);
                break;
            }

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                OpticalFlow = new ::FloatBuffer;
                CORBA::ULong _ob_len0 = OBEC_InputStreamImpl_read_ulong(_ob_in, _ob_cev);
                OpticalFlow -> length(_ob_len0);
                OBEC_InputStreamImpl_read_float_array(_ob_in, OpticalFlow -> get_buffer(), _ob_len0, _ob_cev);
                Confidence = new ::FloatBuffer;
                CORBA::ULong _ob_len1 = OBEC_InputStreamImpl_read_ulong(_ob_in, _ob_cev);
                Confidence -> length(_ob_len1);
                OBEC_InputStreamImpl_read_float_array(_ob_in, Confidence -> get_buffer(), _ob_len1, _ob_cev);
                Width = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                Height = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/getHarrisDetector:1.0
//
CORBA::Long
LowLevelVisionSystem::_OB_op_getHarrisDetector(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA::Long CameraId,
    ::FloatBuffer_out Harris,
    CORBA::Long_out Width,
    CORBA::Long_out Height,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    CORBA::Long _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = 0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_OutputStreamImpl* _ob_out;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "getHarrisDetector", 17, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            _ob_out = OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            OBEC_OutputStreamImpl_write_long(_ob_out, CameraId, _ob_cev);
            if (_ob_cev->_major == CORBA_SYSTEM_EXCEPTION)
            {
                OBEC_DowncallImpl_marshalEx(&_ob_down, _ob_cev);
                break;
            }

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                Harris = new ::FloatBuffer;
                CORBA::ULong _ob_len0 = OBEC_InputStreamImpl_read_ulong(_ob_in, _ob_cev);
                Harris -> length(_ob_len0);
                OBEC_InputStreamImpl_read_float_array(_ob_in, Harris -> get_buffer(), _ob_len0, _ob_cev);
                Width = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                Height = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/getLowLevelVisionProcesses:1.0
//
CORBA::Long
LowLevelVisionSystem::_OB_op_getLowLevelVisionProcesses(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    ::HRP2LowLevelVisionProcessesSeq_out ProcessesSeq,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    CORBA::Long _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = 0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "getLowLevelVisionProcesses", 26, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                ProcessesSeq = new ::HRP2LowLevelVisionProcessesSeq;
                CORBA::ULong _ob_len0 = OBEC_InputStreamImpl_read_ulong(_ob_in, _ob_cev);
                ProcessesSeq -> length(_ob_len0);
                char* * _ob_buf0 = ProcessesSeq -> get_buffer();
                for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
                {
                    CORBA::string_free(_ob_buf0[_ob_i0]);
                    _ob_buf0[_ob_i0] = 0;
                    _ob_buf0[_ob_i0] = OBEC_InputStreamImpl_read_string(_ob_in, _ob_cev);
                }
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/SetAProcessParameterAndValue:1.0
//
void
LowLevelVisionSystem::_OB_op_SetAProcessParameterAndValue(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    const char* aProcessName,
    const char* aParameter,
    const char* aValue,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_OutputStreamImpl* _ob_out;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "SetAProcessParameterAndValue", 28, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            _ob_out = OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            OBEC_OutputStreamImpl_write_string(_ob_out, aProcessName, _ob_cev);
            OBEC_OutputStreamImpl_write_string(_ob_out, aParameter, _ob_cev);
            OBEC_OutputStreamImpl_write_string(_ob_out, aValue, _ob_cev);
            if (_ob_cev->_major == CORBA_SYSTEM_EXCEPTION)
            {
                OBEC_DowncallImpl_marshalEx(&_ob_down, _ob_cev);
                break;
            }

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);



            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);
}

//
// IDL:LowLevelVisionSystem/GetProcessParameter:1.0
//
CORBA::Long
LowLevelVisionSystem::_OB_op_GetProcessParameter(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    const char* aProcessName,
    const char* aParameterName,
    CORBA::String_out ParameterValue,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    CORBA::Long _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = 0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_OutputStreamImpl* _ob_out;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "GetProcessParameter", 19, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            _ob_out = OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            OBEC_OutputStreamImpl_write_string(_ob_out, aProcessName, _ob_cev);
            OBEC_OutputStreamImpl_write_string(_ob_out, aParameterName, _ob_cev);
            if (_ob_cev->_major == CORBA_SYSTEM_EXCEPTION)
            {
                OBEC_DowncallImpl_marshalEx(&_ob_down, _ob_cev);
                break;
            }

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                ParameterValue = OBEC_InputStreamImpl_read_string(_ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/GetProcessParameters:1.0
//
CORBA::Long
LowLevelVisionSystem::_OB_op_GetProcessParameters(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    const char* aProcessName,
    ::HRP2LowLevelVisionParametersSeq_out ParametersSeq,
    ::HRP2LowLevelVisionParametersSeq_out ParametersValueSeq,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    CORBA::Long _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = 0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_OutputStreamImpl* _ob_out;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "GetProcessParameters", 20, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            _ob_out = OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            OBEC_OutputStreamImpl_write_string(_ob_out, aProcessName, _ob_cev);
            if (_ob_cev->_major == CORBA_SYSTEM_EXCEPTION)
            {
                OBEC_DowncallImpl_marshalEx(&_ob_down, _ob_cev);
                break;
            }

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                ParametersSeq = new ::HRP2LowLevelVisionParametersSeq;
                CORBA::ULong _ob_len0 = OBEC_InputStreamImpl_read_ulong(_ob_in, _ob_cev);
                ParametersSeq -> length(_ob_len0);
                char* * _ob_buf0 = ParametersSeq -> get_buffer();
                for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
                {
                    CORBA::string_free(_ob_buf0[_ob_i0]);
                    _ob_buf0[_ob_i0] = 0;
                    _ob_buf0[_ob_i0] = OBEC_InputStreamImpl_read_string(_ob_in, _ob_cev);
                }
                ParametersValueSeq = new ::HRP2LowLevelVisionParametersSeq;
                CORBA::ULong _ob_len1 = OBEC_InputStreamImpl_read_ulong(_ob_in, _ob_cev);
                ParametersValueSeq -> length(_ob_len1);
                char* * _ob_buf1 = ParametersValueSeq -> get_buffer();
                for(CORBA::ULong _ob_i1 = 0 ; _ob_i1 < _ob_len1 ; _ob_i1++)
                {
                    CORBA::string_free(_ob_buf1[_ob_i1]);
                    _ob_buf1[_ob_i1] = 0;
                    _ob_buf1[_ob_i1] = OBEC_InputStreamImpl_read_string(_ob_in, _ob_cev);
                }
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/SetDumpImageMode:1.0
//
void
LowLevelVisionSystem::_OB_op_SetDumpImageMode(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    ::LowLevelVisionSystem::DumpImageMode aDumpImageMode,
    const ::FloatBuffer& Informations,
    CORBA::Long SizeOfInformations,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_OutputStreamImpl* _ob_out;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "SetDumpImageMode", 16, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            _ob_out = OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            OBEC_OutputStreamImpl_write_ulong(_ob_out, (CORBA::ULong)aDumpImageMode, _ob_cev);
            CORBA::ULong _ob_len0 = Informations.length();
            OBEC_OutputStreamImpl_write_ulong(_ob_out, _ob_len0, _ob_cev);
            OBEC_OutputStreamImpl_write_float_array(_ob_out, Informations.get_buffer(), _ob_len0, _ob_cev);
            OBEC_OutputStreamImpl_write_long(_ob_out, SizeOfInformations, _ob_cev);
            if (_ob_cev->_major == CORBA_SYSTEM_EXCEPTION)
            {
                OBEC_DowncallImpl_marshalEx(&_ob_down, _ob_cev);
                break;
            }

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);



            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);
}

//
// IDL:LowLevelVisionSystem/GetDumpImageMode:1.0
//
::LowLevelVisionSystem::DumpImageMode
LowLevelVisionSystem::_OB_op_GetDumpImageMode(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    ::LowLevelVisionSystem::DumpImageMode _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = (::LowLevelVisionSystem::DumpImageMode)0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "GetDumpImageMode", 16, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = (::LowLevelVisionSystem::DumpImageMode)OBEC_InputStreamImpl_read_ulong(_ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/GetMatrixHeadTOrg:1.0
//
CORBA::Long
LowLevelVisionSystem::_OB_op_GetMatrixHeadTOrg(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    ::DoubleBuffer_out HeadTOrg,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    CORBA::Long _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = 0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "GetMatrixHeadTOrg", 17, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                HeadTOrg = new ::DoubleBuffer;
                CORBA::ULong _ob_len0 = OBEC_InputStreamImpl_read_ulong(_ob_in, _ob_cev);
                HeadTOrg -> length(_ob_len0);
                OBEC_InputStreamImpl_read_double_array(_ob_in, HeadTOrg -> get_buffer(), _ob_len0, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/GetBoundaryRepresentation:1.0
//
CORBA::Long
LowLevelVisionSystem::_OB_op_GetBoundaryRepresentation(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    ::CBREPSeq_out aBrep,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    CORBA::Long _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = 0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "GetBoundaryRepresentation", 25, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                aBrep = new ::CBREPSeq;
                CORBA::ULong _ob_len0 = OBEC_InputStreamImpl_read_ulong(_ob_in, _ob_cev);
                aBrep -> length(_ob_len0);
                ::CBREP * _ob_buf0 = aBrep -> get_buffer();
                for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
                {
                    ::CBREP::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in, _ob_cev);
                }
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/GetSceneObject:1.0
//
CORBA::Long
LowLevelVisionSystem::_OB_op_GetSceneObject(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    ::SceneObject_out aSceneObject,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    CORBA::Long _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = 0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "GetSceneObject", 14, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                aSceneObject = new ::SceneObject;
                ::SceneObject::_OB_unmarshal(*aSceneObject.ptr(), _ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/SceneDeleteFeature:1.0
//
void
LowLevelVisionSystem::_OB_op_SceneDeleteFeature(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA::Long FeatureLabel,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_OutputStreamImpl* _ob_out;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "SceneDeleteFeature", 18, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            _ob_out = OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            OBEC_OutputStreamImpl_write_long(_ob_out, FeatureLabel, _ob_cev);
            if (_ob_cev->_major == CORBA_SYSTEM_EXCEPTION)
            {
                OBEC_DowncallImpl_marshalEx(&_ob_down, _ob_cev);
                break;
            }

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);



            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);
}

//
// IDL:LowLevelVisionSystem/GetImageIdentifier:1.0
//
CORBA::Long
LowLevelVisionSystem::_OB_op_GetImageIdentifier(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    CORBA::Long _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = 0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "GetImageIdentifier", 18, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/getStereoVision:1.0
//
::StereoVision_ptr
LowLevelVisionSystem::_OB_op_getStereoVision(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    ::StereoVision_var _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "getStereoVision", 15, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                OBUnmarshal(_ob_r.inout(), _ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r._retn();
}

void
operator<<=(CORBA::Any& any, LowLevelVisionSystem_ptr* v)
{
    CORBA_Object cobj = CORBA_OBJECT_NIL;
    if (!CORBA::is_nil(*v))
    {
        cobj = (*v)->_OB_impl_nodup();
    }
    any.replace(_tc_LowLevelVisionSystem, &cobj, true, (CORBA::Object_ptr)*v, &CORBA::Any::sm_any_content_destroyer_object);
}

void
operator<<=(CORBA::Any& any, LowLevelVisionSystem_ptr v)
{
    LowLevelVisionSystem_ptr val = LowLevelVisionSystem::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, LowLevelVisionSystem_ptr& v)
{
    if (any.check_type(_tc_LowLevelVisionSystem))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.cpp_value();
        if (!CORBA::is_nil(val))
            v = dynamic_cast<LowLevelVisionSystem_ptr>(val);
        else
        {
            CORBA_Object cobj = *(CORBA_Object*)any.value();
            if (cobj != CORBA_OBJECT_NIL)
            {
                LowLevelVisionSystem* obj = new LowLevelVisionSystem;
                obj->_OB_setup(cobj);
                v = obj;
                ((CORBA::Any&)any).cpp_value((CORBA::Object_ptr)obj, &CORBA::Any::sm_any_content_destroyer_object);
            }
            else
                v = LowLevelVisionSystem::_nil();
        }

        return true;
    }
    else
        return false;
}

//
// IDL:LowLevelVisionSystem/DerivativeID:1.0
//
void
operator<<=(CORBA::Any& any, LowLevelVisionSystem::DerivativeID v)
{
    CORBA_unsigned_long* p = (CORBA_unsigned_long*)OBEC_allocate_with_arg(CORBA_any__fini_with_typecode, LowLevelVisionSystem::_tc_DerivativeID->_OB_impl_nodup(), sizeof(CORBA_unsigned_long)); 
    *p = (CORBA_unsigned_long)v;
    any.replace(LowLevelVisionSystem::_tc_DerivativeID, p, 0);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, LowLevelVisionSystem::DerivativeID& v)
{
    if (!any.check_type(LowLevelVisionSystem::_tc_DerivativeID))
        return false;

    v = (LowLevelVisionSystem::DerivativeID)(*(CORBA_unsigned_long*)any.value());

    return true;
}

//
// IDL:LowLevelVisionSystem/InputMode:1.0
//
void
operator<<=(CORBA::Any& any, LowLevelVisionSystem::InputMode v)
{
    CORBA_unsigned_long* p = (CORBA_unsigned_long*)OBEC_allocate_with_arg(CORBA_any__fini_with_typecode, LowLevelVisionSystem::_tc_InputMode->_OB_impl_nodup(), sizeof(CORBA_unsigned_long)); 
    *p = (CORBA_unsigned_long)v;
    any.replace(LowLevelVisionSystem::_tc_InputMode, p, 0);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, LowLevelVisionSystem::InputMode& v)
{
    if (!any.check_type(LowLevelVisionSystem::_tc_InputMode))
        return false;

    v = (LowLevelVisionSystem::InputMode)(*(CORBA_unsigned_long*)any.value());

    return true;
}

//
// IDL:LowLevelVisionSystem/SynchroMode:1.0
//
void
operator<<=(CORBA::Any& any, LowLevelVisionSystem::SynchroMode v)
{
    CORBA_unsigned_long* p = (CORBA_unsigned_long*)OBEC_allocate_with_arg(CORBA_any__fini_with_typecode, LowLevelVisionSystem::_tc_SynchroMode->_OB_impl_nodup(), sizeof(CORBA_unsigned_long)); 
    *p = (CORBA_unsigned_long)v;
    any.replace(LowLevelVisionSystem::_tc_SynchroMode, p, 0);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, LowLevelVisionSystem::SynchroMode& v)
{
    if (!any.check_type(LowLevelVisionSystem::_tc_SynchroMode))
        return false;

    v = (LowLevelVisionSystem::SynchroMode)(*(CORBA_unsigned_long*)any.value());

    return true;
}

//
// IDL:LowLevelVisionSystem/DumpImageMode:1.0
//
void
operator<<=(CORBA::Any& any, LowLevelVisionSystem::DumpImageMode v)
{
    CORBA_unsigned_long* p = (CORBA_unsigned_long*)OBEC_allocate_with_arg(CORBA_any__fini_with_typecode, LowLevelVisionSystem::_tc_DumpImageMode->_OB_impl_nodup(), sizeof(CORBA_unsigned_long)); 
    *p = (CORBA_unsigned_long)v;
    any.replace(LowLevelVisionSystem::_tc_DumpImageMode, p, 0);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, LowLevelVisionSystem::DumpImageMode& v)
{
    if (!any.check_type(LowLevelVisionSystem::_tc_DumpImageMode))
        return false;

    v = (LowLevelVisionSystem::DumpImageMode)(*(CORBA_unsigned_long*)any.value());

    return true;
}

//
// IDL:LowLevelVisionSystem/VisionSensorException:1.0
//
LowLevelVisionSystem::VisionSensorException::VisionSensorException(const VisionSensorException& _ob_a)
    : CORBA::UserException(_ob_a),
      description(_ob_a.description)
{
}

LowLevelVisionSystem::VisionSensorException::VisionSensorException(const char* _ob_a0)
    : description(_ob_a0)
{
}

LowLevelVisionSystem::VisionSensorException&
LowLevelVisionSystem::VisionSensorException::operator=(const VisionSensorException& _ob_a)
{
    if(this != &_ob_a)
    {
        description = _ob_a.description;
    }
    return *this;
}

const char*
LowLevelVisionSystem::VisionSensorException::_rep_id() const
{
    return "IDL:LowLevelVisionSystem/VisionSensorException:1.0";
}

CORBA::Exception*
LowLevelVisionSystem::VisionSensorException::_OB_clone() const
{
    return new VisionSensorException(*this);
}

void
LowLevelVisionSystem::VisionSensorException::_OB_marshal(
    OBEC_OutputStreamImpl* _ob_out,
    CORBA_Environment* _ob_cev
) const
{
#ifdef HAVE_VCPLUSPLUS_BUGS
    UserException::_OB_marshal(_ob_out, _ob_cev);
#else
    CORBA::UserException::_OB_marshal(_ob_out, _ob_cev);
#endif
    OBEC_OutputStreamImpl_write_string(_ob_out, description, _ob_cev);
}

void
LowLevelVisionSystem::VisionSensorException::_OB_unmarshal(
    VisionSensorException& _ob_v,
    OBEC_InputStreamImpl* _ob_in,
    CORBA_Environment* _ob_cev
)
{
    CORBA::String_var id = OBEC_InputStreamImpl_read_string(_ob_in, _ob_cev);
    assert(strcmp(id, "IDL:LowLevelVisionSystem/VisionSensorException:1.0") == 0);
    _ob_v.description = OBEC_InputStreamImpl_read_string(_ob_in, _ob_cev);
}

void
LowLevelVisionSystem::VisionSensorException::_OB_convert_to(
    void* _ob_data
) const
{
    _OBE_C_LowLevelVisionSystem_VisionSensorException* _ob_p = (_OBE_C_LowLevelVisionSystem_VisionSensorException*)_ob_data;
    _ob_p->description = CORBA_string_dup(description);
}

void
LowLevelVisionSystem::VisionSensorException::_OB_convert_from(
    VisionSensorException& _ob_v,
    void* _ob_data
)
{
    _OBE_C_LowLevelVisionSystem_VisionSensorException* _ob_p = (_OBE_C_LowLevelVisionSystem_VisionSensorException*)_ob_data;
    _ob_v.description = CORBA::string_dup(_ob_p->description);
}

static CORBA::AnyContentDestroyerDelete<LowLevelVisionSystem::VisionSensorException> OBAnyContentDestroyerInstance_LowLevelVisionSystem_VisionSensorException;

void
operator<<=(CORBA::Any& any, LowLevelVisionSystem::VisionSensorException* v)
{
    _OBE_C_LowLevelVisionSystem_VisionSensorException* p = (_OBE_C_LowLevelVisionSystem_VisionSensorException*)OBEC_allocate_with_arg(CORBA_any__fini_with_typecode, LowLevelVisionSystem::_tc_VisionSensorException->_OB_impl_nodup(), sizeof(_OBE_C_LowLevelVisionSystem_VisionSensorException));
    (*v)._OB_convert_to(&(*p));
    any.replace(LowLevelVisionSystem::_tc_VisionSensorException, p, false, v, &OBAnyContentDestroyerInstance_LowLevelVisionSystem_VisionSensorException);
}

void
operator<<=(CORBA::Any& any, const LowLevelVisionSystem::VisionSensorException& v)
{
    _OBE_C_LowLevelVisionSystem_VisionSensorException* p = (_OBE_C_LowLevelVisionSystem_VisionSensorException*)OBEC_allocate_with_arg(CORBA_any__fini_with_typecode, LowLevelVisionSystem::_tc_VisionSensorException->_OB_impl_nodup(), sizeof(_OBE_C_LowLevelVisionSystem_VisionSensorException));
    v._OB_convert_to(&(*p));
    any.replace(LowLevelVisionSystem::_tc_VisionSensorException, p, 0);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const LowLevelVisionSystem::VisionSensorException*& v)
{
    if (!any.check_type(LowLevelVisionSystem::_tc_VisionSensorException))
        return 0;

    v = (const LowLevelVisionSystem::VisionSensorException*)any.cpp_value();
    if (v == 0)
    {
        _OBE_C_LowLevelVisionSystem_VisionSensorException* p = (_OBE_C_LowLevelVisionSystem_VisionSensorException*)any.value();
        assert(p != NULL);
        LowLevelVisionSystem::VisionSensorException* val = new LowLevelVisionSystem::VisionSensorException;
        LowLevelVisionSystem::VisionSensorException::_OB_convert_from((*val), &(*p));
        ((CORBA::Any&)any).cpp_value(val, &OBAnyContentDestroyerInstance_LowLevelVisionSystem_VisionSensorException);
        v = val;
    }

    return 1;
}

//
// IDL:LowLevelVisionSystem/destroy:1.0
//
void
LowLevelVisionSystem::destroy(
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _OB_op_destroy(_ob_stub_impl, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();
}

//
// IDL:LowLevelVisionSystem/GetVersion:1.0
//
CORBA::Long
LowLevelVisionSystem::GetVersion(
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA::Long _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_GetVersion(_ob_stub_impl, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/StartMainProcess:1.0
//
CORBA::Long
LowLevelVisionSystem::StartMainProcess(
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA::Long _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_StartMainProcess(_ob_stub_impl, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/StopMainProcess:1.0
//
CORBA::Long
LowLevelVisionSystem::StopMainProcess(
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA::Long _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_StopMainProcess(_ob_stub_impl, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/StartProcess:1.0
//
CORBA::Long
LowLevelVisionSystem::StartProcess(
    const char* ProcessName
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA::Long _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_StartProcess(_ob_stub_impl, ProcessName, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/StopProcess:1.0
//
CORBA::Long
LowLevelVisionSystem::StopProcess(
    const char* ProcessName
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA::Long _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_StopProcess(_ob_stub_impl, ProcessName, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/ProcessStatus:1.0
//
CORBA::Long
LowLevelVisionSystem::ProcessStatus(
    const char* ProcessName
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA::Long _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_ProcessStatus(_ob_stub_impl, ProcessName, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/GetInputMode:1.0
//
::LowLevelVisionSystem::InputMode
LowLevelVisionSystem::GetInputMode(
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    ::LowLevelVisionSystem::InputMode _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = (::LowLevelVisionSystem::InputMode)0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_GetInputMode(_ob_stub_impl, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/SynchronizationMode:1.0
//
::LowLevelVisionSystem::SynchroMode
LowLevelVisionSystem::SynchronizationMode(
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    ::LowLevelVisionSystem::SynchroMode _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = (::LowLevelVisionSystem::SynchroMode)0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_SynchronizationMode(_ob_stub_impl, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/SetImage:1.0
//
CORBA::Long
LowLevelVisionSystem::SetImage(
    const ::ColorBuffer& aColorBuffer,
    CORBA::Long aWidth,
    CORBA::Long aHeight
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA::Long _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_SetImage(_ob_stub_impl, aColorBuffer, aWidth, aHeight, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/SetImagesGrabbedSize:1.0
//
CORBA::Long
LowLevelVisionSystem::SetImagesGrabbedSize(
    CORBA::Long NewWidth,
    CORBA::Long NewHeight
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA::Long _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_SetImagesGrabbedSize(_ob_stub_impl, NewWidth, NewHeight, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/TriggerSynchro:1.0
//
CORBA::Long
LowLevelVisionSystem::TriggerSynchro(
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA::Long _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_TriggerSynchro(_ob_stub_impl, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/getCameraSeq:1.0
//
CORBA::Long
LowLevelVisionSystem::getCameraSeq(
    ::HRP2CameraSeq_out cameras
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA::Long _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_getCameraSeq(_ob_stub_impl, cameras, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/getImage:1.0
//
CORBA::Long
LowLevelVisionSystem::getImage(
    CORBA::Long CameraID,
    ::ImageData_out anImage,
    char*& Format
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA::Long _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_getImage(_ob_stub_impl, CameraID, anImage, Format, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/getEdgeImage:1.0
//
CORBA::Long
LowLevelVisionSystem::getEdgeImage(
    CORBA::Long CameraID,
    ::ImageData_out anImage,
    char*& Format
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA::Long _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_getEdgeImage(_ob_stub_impl, CameraID, anImage, Format, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/getRectifiedImage:1.0
//
CORBA::Long
LowLevelVisionSystem::getRectifiedImage(
    CORBA::Long CameraID,
    ::ImageData_out anImage,
    char*& Format
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA::Long _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_getRectifiedImage(_ob_stub_impl, CameraID, anImage, Format, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/getRangeMap:1.0
//
CORBA::Long
LowLevelVisionSystem::getRangeMap(
    ::RangeMap_out aRangeMap,
    char*& Format
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA::Long _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_getRangeMap(_ob_stub_impl, aRangeMap, Format, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/getImageDerivative:1.0
//
CORBA::Long
LowLevelVisionSystem::getImageDerivative(
    CORBA::Long CameraID,
    CORBA::Long DerivativeID,
    ::FloatBuffer_out ImageDerivative,
    CORBA::Long_out Width,
    CORBA::Long_out Height
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA::Long _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_getImageDerivative(_ob_stub_impl, CameraID, DerivativeID, ImageDerivative, Width, Height, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/getOpticalFlow:1.0
//
CORBA::Long
LowLevelVisionSystem::getOpticalFlow(
    CORBA::Long CameraID,
    ::FloatBuffer_out OpticalFlow,
    ::FloatBuffer_out Confidence,
    CORBA::Long_out Width,
    CORBA::Long_out Height
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA::Long _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_getOpticalFlow(_ob_stub_impl, CameraID, OpticalFlow, Confidence, Width, Height, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/getHarrisDetector:1.0
//
CORBA::Long
LowLevelVisionSystem::getHarrisDetector(
    CORBA::Long CameraId,
    ::FloatBuffer_out Harris,
    CORBA::Long_out Width,
    CORBA::Long_out Height
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA::Long _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_getHarrisDetector(_ob_stub_impl, CameraId, Harris, Width, Height, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/getLowLevelVisionProcesses:1.0
//
CORBA::Long
LowLevelVisionSystem::getLowLevelVisionProcesses(
    ::HRP2LowLevelVisionProcessesSeq_out ProcessesSeq
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA::Long _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_getLowLevelVisionProcesses(_ob_stub_impl, ProcessesSeq, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/SetAProcessParameterAndValue:1.0
//
void
LowLevelVisionSystem::SetAProcessParameterAndValue(
    const char* aProcessName,
    const char* aParameter,
    const char* aValue
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _OB_op_SetAProcessParameterAndValue(_ob_stub_impl, aProcessName, aParameter, aValue, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();
}

//
// IDL:LowLevelVisionSystem/GetProcessParameter:1.0
//
CORBA::Long
LowLevelVisionSystem::GetProcessParameter(
    const char* aProcessName,
    const char* aParameterName,
    CORBA::String_out ParameterValue
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA::Long _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_GetProcessParameter(_ob_stub_impl, aProcessName, aParameterName, ParameterValue, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/GetProcessParameters:1.0
//
CORBA::Long
LowLevelVisionSystem::GetProcessParameters(
    const char* aProcessName,
    ::HRP2LowLevelVisionParametersSeq_out ParametersSeq,
    ::HRP2LowLevelVisionParametersSeq_out ParametersValueSeq
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA::Long _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_GetProcessParameters(_ob_stub_impl, aProcessName, ParametersSeq, ParametersValueSeq, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/SetDumpImageMode:1.0
//
void
LowLevelVisionSystem::SetDumpImageMode(
    ::LowLevelVisionSystem::DumpImageMode aDumpImageMode,
    const ::FloatBuffer& Informations,
    CORBA::Long SizeOfInformations
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _OB_op_SetDumpImageMode(_ob_stub_impl, aDumpImageMode, Informations, SizeOfInformations, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();
}

//
// IDL:LowLevelVisionSystem/GetDumpImageMode:1.0
//
::LowLevelVisionSystem::DumpImageMode
LowLevelVisionSystem::GetDumpImageMode(
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    ::LowLevelVisionSystem::DumpImageMode _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = (::LowLevelVisionSystem::DumpImageMode)0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_GetDumpImageMode(_ob_stub_impl, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/GetMatrixHeadTOrg:1.0
//
CORBA::Long
LowLevelVisionSystem::GetMatrixHeadTOrg(
    ::DoubleBuffer_out HeadTOrg
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA::Long _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_GetMatrixHeadTOrg(_ob_stub_impl, HeadTOrg, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/GetBoundaryRepresentation:1.0
//
CORBA::Long
LowLevelVisionSystem::GetBoundaryRepresentation(
    ::CBREPSeq_out aBrep
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA::Long _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_GetBoundaryRepresentation(_ob_stub_impl, aBrep, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/GetSceneObject:1.0
//
CORBA::Long
LowLevelVisionSystem::GetSceneObject(
    ::SceneObject_out aSceneObject
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA::Long _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_GetSceneObject(_ob_stub_impl, aSceneObject, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/SceneDeleteFeature:1.0
//
void
LowLevelVisionSystem::SceneDeleteFeature(
    CORBA::Long FeatureLabel
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _OB_op_SceneDeleteFeature(_ob_stub_impl, FeatureLabel, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();
}

//
// IDL:LowLevelVisionSystem/GetImageIdentifier:1.0
//
CORBA::Long
LowLevelVisionSystem::GetImageIdentifier(
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA::Long _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_GetImageIdentifier(_ob_stub_impl, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:LowLevelVisionSystem/getStereoVision:1.0
//
::StereoVision_ptr
LowLevelVisionSystem::getStereoVision(
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    ::StereoVision_var _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_getStereoVision(_ob_stub_impl, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r._retn();
}
