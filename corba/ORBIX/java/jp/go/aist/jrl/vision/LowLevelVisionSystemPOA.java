// **********************************************************************
//
// Generated by the Orbix/E IDL to Java Translator
//
// Copyright (c) 2003
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 2.0.1

package jp.go.aist.jrl.vision;

//
// IDL:LowLevelVisionSystem:1.0
//
public abstract class LowLevelVisionSystemPOA
    extends org.omg.PortableServer.Servant
    implements org.omg.CORBA.portable.InvokeHandler,
               LowLevelVisionSystemOperations
{
    static final String[] _ob_ids_ =
    {
        "IDL:LowLevelVisionSystem:1.0",
    };

    public LowLevelVisionSystem
    _this()
    {
        return LowLevelVisionSystemHelper.narrow(super._this_object());
    }

    public LowLevelVisionSystem
    _this(org.omg.CORBA.ORB orb)
    {
        return LowLevelVisionSystemHelper.narrow(super._this_object(orb));
    }

    public String[]
    _all_interfaces(org.omg.PortableServer.POA poa, byte[] objectId)
    {
        return _ob_ids_;
    }

    public org.omg.CORBA.portable.OutputStream
    _invoke(String opName,
            org.omg.CORBA.portable.InputStream in,
            org.omg.CORBA.portable.ResponseHandler handler)
    {
        final String[] _ob_names =
        {
            "GetBoundaryRepresentation",
            "GetDumpImageMode",
            "GetImageIdentifier",
            "GetInputMode",
            "GetMatrixHeadTOrg",
            "GetProcessParameter",
            "GetProcessParameters",
            "GetSceneObject",
            "GetVersion",
            "ProcessStatus",
            "SceneDeleteFeature",
            "SetAProcessParameterAndValue",
            "SetDumpImageMode",
            "SetImage",
            "SetImagesGrabbedSize",
            "StartMainProcess",
            "StartProcess",
            "StopMainProcess",
            "StopProcess",
            "SynchronizationMode",
            "TriggerSynchro",
            "destroy",
            "getCameraSeq",
            "getEdgeImage",
            "getHarrisDetector",
            "getImage",
            "getImageDerivative",
            "getLowLevelVisionProcesses",
            "getOpticalFlow",
            "getRangeMap",
            "getRectifiedImage"
        };

        int _ob_left = 0;
        int _ob_right = _ob_names.length;
        int _ob_index = -1;

        while(_ob_left < _ob_right)
        {
            int _ob_m = (_ob_left + _ob_right) / 2;
            int _ob_res = _ob_names[_ob_m].compareTo(opName);
            if(_ob_res == 0)
            {
                _ob_index = _ob_m;
                break;
            }
            else if(_ob_res > 0)
                _ob_right = _ob_m;
            else
                _ob_left = _ob_m + 1;
        }

        switch(_ob_index)
        {
        case 0: // GetBoundaryRepresentation
            return _OB_op_GetBoundaryRepresentation(in, handler);

        case 1: // GetDumpImageMode
            return _OB_op_GetDumpImageMode(in, handler);

        case 2: // GetImageIdentifier
            return _OB_op_GetImageIdentifier(in, handler);

        case 3: // GetInputMode
            return _OB_op_GetInputMode(in, handler);

        case 4: // GetMatrixHeadTOrg
            return _OB_op_GetMatrixHeadTOrg(in, handler);

        case 5: // GetProcessParameter
            return _OB_op_GetProcessParameter(in, handler);

        case 6: // GetProcessParameters
            return _OB_op_GetProcessParameters(in, handler);

        case 7: // GetSceneObject
            return _OB_op_GetSceneObject(in, handler);

        case 8: // GetVersion
            return _OB_op_GetVersion(in, handler);

        case 9: // ProcessStatus
            return _OB_op_ProcessStatus(in, handler);

        case 10: // SceneDeleteFeature
            return _OB_op_SceneDeleteFeature(in, handler);

        case 11: // SetAProcessParameterAndValue
            return _OB_op_SetAProcessParameterAndValue(in, handler);

        case 12: // SetDumpImageMode
            return _OB_op_SetDumpImageMode(in, handler);

        case 13: // SetImage
            return _OB_op_SetImage(in, handler);

        case 14: // SetImagesGrabbedSize
            return _OB_op_SetImagesGrabbedSize(in, handler);

        case 15: // StartMainProcess
            return _OB_op_StartMainProcess(in, handler);

        case 16: // StartProcess
            return _OB_op_StartProcess(in, handler);

        case 17: // StopMainProcess
            return _OB_op_StopMainProcess(in, handler);

        case 18: // StopProcess
            return _OB_op_StopProcess(in, handler);

        case 19: // SynchronizationMode
            return _OB_op_SynchronizationMode(in, handler);

        case 20: // TriggerSynchro
            return _OB_op_TriggerSynchro(in, handler);

        case 21: // destroy
            return _OB_op_destroy(in, handler);

        case 22: // getCameraSeq
            return _OB_op_getCameraSeq(in, handler);

        case 23: // getEdgeImage
            return _OB_op_getEdgeImage(in, handler);

        case 24: // getHarrisDetector
            return _OB_op_getHarrisDetector(in, handler);

        case 25: // getImage
            return _OB_op_getImage(in, handler);

        case 26: // getImageDerivative
            return _OB_op_getImageDerivative(in, handler);

        case 27: // getLowLevelVisionProcesses
            return _OB_op_getLowLevelVisionProcesses(in, handler);

        case 28: // getOpticalFlow
            return _OB_op_getOpticalFlow(in, handler);

        case 29: // getRangeMap
            return _OB_op_getRangeMap(in, handler);

        case 30: // getRectifiedImage
            return _OB_op_getRectifiedImage(in, handler);
        }

        throw new org.omg.CORBA.BAD_OPERATION();
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_GetBoundaryRepresentation(org.omg.CORBA.portable.InputStream in,
                                     org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        CBREPSeqHolder _ob_ah0 = new CBREPSeqHolder();
        int _ob_r = GetBoundaryRepresentation(_ob_ah0);
        out = handler.createReply();
        out.write_long(_ob_r);
        CBREPSeqHelper.write(out, _ob_ah0.value);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_GetDumpImageMode(org.omg.CORBA.portable.InputStream in,
                            org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        jp.go.aist.jrl.vision.LowLevelVisionSystemPackage.DumpImageMode _ob_r = GetDumpImageMode();
        out = handler.createReply();
        jp.go.aist.jrl.vision.LowLevelVisionSystemPackage.DumpImageModeHelper.write(out, _ob_r);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_GetImageIdentifier(org.omg.CORBA.portable.InputStream in,
                              org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        int _ob_r = GetImageIdentifier();
        out = handler.createReply();
        out.write_long(_ob_r);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_GetInputMode(org.omg.CORBA.portable.InputStream in,
                        org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        jp.go.aist.jrl.vision.LowLevelVisionSystemPackage.InputMode _ob_r = GetInputMode();
        out = handler.createReply();
        jp.go.aist.jrl.vision.LowLevelVisionSystemPackage.InputModeHelper.write(out, _ob_r);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_GetMatrixHeadTOrg(org.omg.CORBA.portable.InputStream in,
                             org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        DoubleBufferHolder _ob_ah0 = new DoubleBufferHolder();
        int _ob_r = GetMatrixHeadTOrg(_ob_ah0);
        out = handler.createReply();
        out.write_long(_ob_r);
        DoubleBufferHelper.write(out, _ob_ah0.value);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_GetProcessParameter(org.omg.CORBA.portable.InputStream in,
                               org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        String _ob_a0 = in.read_string();
        String _ob_a1 = in.read_string();
        org.omg.CORBA.StringHolder _ob_ah2 = new org.omg.CORBA.StringHolder();
        int _ob_r = GetProcessParameter(_ob_a0, _ob_a1, _ob_ah2);
        out = handler.createReply();
        out.write_long(_ob_r);
        out.write_string(_ob_ah2.value);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_GetProcessParameters(org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        String _ob_a0 = in.read_string();
        HRP2LowLevelVisionParametersSeqHolder _ob_ah1 = new HRP2LowLevelVisionParametersSeqHolder();
        HRP2LowLevelVisionParametersSeqHolder _ob_ah2 = new HRP2LowLevelVisionParametersSeqHolder();
        int _ob_r = GetProcessParameters(_ob_a0, _ob_ah1, _ob_ah2);
        out = handler.createReply();
        out.write_long(_ob_r);
        HRP2LowLevelVisionParametersSeqHelper.write(out, _ob_ah1.value);
        HRP2LowLevelVisionParametersSeqHelper.write(out, _ob_ah2.value);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_GetSceneObject(org.omg.CORBA.portable.InputStream in,
                          org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        SceneObjectHolder _ob_ah0 = new SceneObjectHolder();
        int _ob_r = GetSceneObject(_ob_ah0);
        out = handler.createReply();
        out.write_long(_ob_r);
        SceneObjectHelper.write(out, _ob_ah0.value);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_GetVersion(org.omg.CORBA.portable.InputStream in,
                      org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        int _ob_r = GetVersion();
        out = handler.createReply();
        out.write_long(_ob_r);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_ProcessStatus(org.omg.CORBA.portable.InputStream in,
                         org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        String _ob_a0 = in.read_string();
        int _ob_r = ProcessStatus(_ob_a0);
        out = handler.createReply();
        out.write_long(_ob_r);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_SceneDeleteFeature(org.omg.CORBA.portable.InputStream in,
                              org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        int _ob_a0 = in.read_long();
        SceneDeleteFeature(_ob_a0);
        out = handler.createReply();
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_SetAProcessParameterAndValue(org.omg.CORBA.portable.InputStream in,
                                        org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        String _ob_a0 = in.read_string();
        String _ob_a1 = in.read_string();
        String _ob_a2 = in.read_string();
        SetAProcessParameterAndValue(_ob_a0, _ob_a1, _ob_a2);
        out = handler.createReply();
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_SetDumpImageMode(org.omg.CORBA.portable.InputStream in,
                            org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        jp.go.aist.jrl.vision.LowLevelVisionSystemPackage.DumpImageMode _ob_a0 = jp.go.aist.jrl.vision.LowLevelVisionSystemPackage.DumpImageModeHelper.read(in);
        float[] _ob_a1 = FloatBufferHelper.read(in);
        int _ob_a2 = in.read_long();
        SetDumpImageMode(_ob_a0, _ob_a1, _ob_a2);
        out = handler.createReply();
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_SetImage(org.omg.CORBA.portable.InputStream in,
                    org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        int[] _ob_a0 = ColorBufferHelper.read(in);
        int _ob_a1 = in.read_long();
        int _ob_a2 = in.read_long();
        int _ob_r = SetImage(_ob_a0, _ob_a1, _ob_a2);
        out = handler.createReply();
        out.write_long(_ob_r);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_SetImagesGrabbedSize(org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        int _ob_a0 = in.read_long();
        int _ob_a1 = in.read_long();
        int _ob_r = SetImagesGrabbedSize(_ob_a0, _ob_a1);
        out = handler.createReply();
        out.write_long(_ob_r);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_StartMainProcess(org.omg.CORBA.portable.InputStream in,
                            org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        int _ob_r = StartMainProcess();
        out = handler.createReply();
        out.write_long(_ob_r);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_StartProcess(org.omg.CORBA.portable.InputStream in,
                        org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        String _ob_a0 = in.read_string();
        int _ob_r = StartProcess(_ob_a0);
        out = handler.createReply();
        out.write_long(_ob_r);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_StopMainProcess(org.omg.CORBA.portable.InputStream in,
                           org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        int _ob_r = StopMainProcess();
        out = handler.createReply();
        out.write_long(_ob_r);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_StopProcess(org.omg.CORBA.portable.InputStream in,
                       org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        String _ob_a0 = in.read_string();
        int _ob_r = StopProcess(_ob_a0);
        out = handler.createReply();
        out.write_long(_ob_r);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_SynchronizationMode(org.omg.CORBA.portable.InputStream in,
                               org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        jp.go.aist.jrl.vision.LowLevelVisionSystemPackage.SynchroMode _ob_r = SynchronizationMode();
        out = handler.createReply();
        jp.go.aist.jrl.vision.LowLevelVisionSystemPackage.SynchroModeHelper.write(out, _ob_r);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_TriggerSynchro(org.omg.CORBA.portable.InputStream in,
                          org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        int _ob_r = TriggerSynchro();
        out = handler.createReply();
        out.write_long(_ob_r);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_destroy(org.omg.CORBA.portable.InputStream in,
                   org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        destroy();
        out = handler.createReply();
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_getCameraSeq(org.omg.CORBA.portable.InputStream in,
                        org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        HRP2CameraSeqHolder _ob_ah0 = new HRP2CameraSeqHolder();
        int _ob_r = getCameraSeq(_ob_ah0);
        out = handler.createReply();
        out.write_long(_ob_r);
        HRP2CameraSeqHelper.write(out, _ob_ah0.value);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_getEdgeImage(org.omg.CORBA.portable.InputStream in,
                        org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        int _ob_a0 = in.read_long();
        ImageDataHolder _ob_ah1 = new ImageDataHolder();
        org.omg.CORBA.StringHolder _ob_ah2 = new org.omg.CORBA.StringHolder();
        _ob_ah2.value = in.read_string();
        int _ob_r = getEdgeImage(_ob_a0, _ob_ah1, _ob_ah2);
        out = handler.createReply();
        out.write_long(_ob_r);
        ImageDataHelper.write(out, _ob_ah1.value);
        out.write_string(_ob_ah2.value);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_getHarrisDetector(org.omg.CORBA.portable.InputStream in,
                             org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        int _ob_a0 = in.read_long();
        FloatBufferHolder _ob_ah1 = new FloatBufferHolder();
        org.omg.CORBA.IntHolder _ob_ah2 = new org.omg.CORBA.IntHolder();
        org.omg.CORBA.IntHolder _ob_ah3 = new org.omg.CORBA.IntHolder();
        int _ob_r = getHarrisDetector(_ob_a0, _ob_ah1, _ob_ah2, _ob_ah3);
        out = handler.createReply();
        out.write_long(_ob_r);
        FloatBufferHelper.write(out, _ob_ah1.value);
        out.write_long(_ob_ah2.value);
        out.write_long(_ob_ah3.value);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_getImage(org.omg.CORBA.portable.InputStream in,
                    org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        int _ob_a0 = in.read_long();
        ImageDataHolder _ob_ah1 = new ImageDataHolder();
        org.omg.CORBA.StringHolder _ob_ah2 = new org.omg.CORBA.StringHolder();
        _ob_ah2.value = in.read_string();
        int _ob_r = getImage(_ob_a0, _ob_ah1, _ob_ah2);
        out = handler.createReply();
        out.write_long(_ob_r);
        ImageDataHelper.write(out, _ob_ah1.value);
        out.write_string(_ob_ah2.value);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_getImageDerivative(org.omg.CORBA.portable.InputStream in,
                              org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        int _ob_a0 = in.read_long();
        int _ob_a1 = in.read_long();
        FloatBufferHolder _ob_ah2 = new FloatBufferHolder();
        org.omg.CORBA.IntHolder _ob_ah3 = new org.omg.CORBA.IntHolder();
        org.omg.CORBA.IntHolder _ob_ah4 = new org.omg.CORBA.IntHolder();
        int _ob_r = getImageDerivative(_ob_a0, _ob_a1, _ob_ah2, _ob_ah3, _ob_ah4);
        out = handler.createReply();
        out.write_long(_ob_r);
        FloatBufferHelper.write(out, _ob_ah2.value);
        out.write_long(_ob_ah3.value);
        out.write_long(_ob_ah4.value);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_getLowLevelVisionProcesses(org.omg.CORBA.portable.InputStream in,
                                      org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        HRP2LowLevelVisionProcessesSeqHolder _ob_ah0 = new HRP2LowLevelVisionProcessesSeqHolder();
        int _ob_r = getLowLevelVisionProcesses(_ob_ah0);
        out = handler.createReply();
        out.write_long(_ob_r);
        HRP2LowLevelVisionProcessesSeqHelper.write(out, _ob_ah0.value);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_getOpticalFlow(org.omg.CORBA.portable.InputStream in,
                          org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        int _ob_a0 = in.read_long();
        FloatBufferHolder _ob_ah1 = new FloatBufferHolder();
        FloatBufferHolder _ob_ah2 = new FloatBufferHolder();
        org.omg.CORBA.IntHolder _ob_ah3 = new org.omg.CORBA.IntHolder();
        org.omg.CORBA.IntHolder _ob_ah4 = new org.omg.CORBA.IntHolder();
        int _ob_r = getOpticalFlow(_ob_a0, _ob_ah1, _ob_ah2, _ob_ah3, _ob_ah4);
        out = handler.createReply();
        out.write_long(_ob_r);
        FloatBufferHelper.write(out, _ob_ah1.value);
        FloatBufferHelper.write(out, _ob_ah2.value);
        out.write_long(_ob_ah3.value);
        out.write_long(_ob_ah4.value);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_getRangeMap(org.omg.CORBA.portable.InputStream in,
                       org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        FloatBufferHolder _ob_ah0 = new FloatBufferHolder();
        org.omg.CORBA.StringHolder _ob_ah1 = new org.omg.CORBA.StringHolder();
        _ob_ah1.value = in.read_string();
        int _ob_r = getRangeMap(_ob_ah0, _ob_ah1);
        out = handler.createReply();
        out.write_long(_ob_r);
        RangeMapHelper.write(out, _ob_ah0.value);
        out.write_string(_ob_ah1.value);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_getRectifiedImage(org.omg.CORBA.portable.InputStream in,
                             org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        int _ob_a0 = in.read_long();
        ImageDataHolder _ob_ah1 = new ImageDataHolder();
        org.omg.CORBA.StringHolder _ob_ah2 = new org.omg.CORBA.StringHolder();
        _ob_ah2.value = in.read_string();
        int _ob_r = getRectifiedImage(_ob_a0, _ob_ah1, _ob_ah2);
        out = handler.createReply();
        out.write_long(_ob_r);
        ImageDataHelper.write(out, _ob_ah1.value);
        out.write_string(_ob_ah2.value);
        return out;
    }
}
