// **********************************************************************
//
// Generated by the Orbix/E IDL to Java Translator
//
// Copyright (c) 2003
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 2.0.1

package jp.go.aist.jrl.vision;

//
// IDL:HRP2Camera:1.0
//
public abstract class HRP2CameraPOA
    extends org.omg.PortableServer.Servant
    implements org.omg.CORBA.portable.InvokeHandler,
               HRP2CameraOperations
{
    static final String[] _ob_ids_ =
    {
        "IDL:HRP2Camera:1.0",
    };

    public HRP2Camera
    _this()
    {
        return HRP2CameraHelper.narrow(super._this_object());
    }

    public HRP2Camera
    _this(org.omg.CORBA.ORB orb)
    {
        return HRP2CameraHelper.narrow(super._this_object(orb));
    }

    public String[]
    _all_interfaces(org.omg.PortableServer.POA poa, byte[] objectId)
    {
        return _ob_ids_;
    }

    public org.omg.CORBA.portable.OutputStream
    _invoke(String opName,
            org.omg.CORBA.portable.InputStream in,
            org.omg.CORBA.portable.ResponseHandler handler)
    {
        final String[] _ob_names =
        {
            "GetCameraParameter",
            "GetIntrinsicParameters",
            "GetProjectiveParameters",
            "SetAcquisitionSize"
        };

        int _ob_left = 0;
        int _ob_right = _ob_names.length;
        int _ob_index = -1;

        while(_ob_left < _ob_right)
        {
            int _ob_m = (_ob_left + _ob_right) / 2;
            int _ob_res = _ob_names[_ob_m].compareTo(opName);
            if(_ob_res == 0)
            {
                _ob_index = _ob_m;
                break;
            }
            else if(_ob_res > 0)
                _ob_right = _ob_m;
            else
                _ob_left = _ob_m + 1;
        }

        switch(_ob_index)
        {
        case 0: // GetCameraParameter
            return _OB_op_GetCameraParameter(in, handler);

        case 1: // GetIntrinsicParameters
            return _OB_op_GetIntrinsicParameters(in, handler);

        case 2: // GetProjectiveParameters
            return _OB_op_GetProjectiveParameters(in, handler);

        case 3: // SetAcquisitionSize
            return _OB_op_SetAcquisitionSize(in, handler);
        }

        throw new org.omg.CORBA.BAD_OPERATION();
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_GetCameraParameter(org.omg.CORBA.portable.InputStream in,
                              org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        jp.go.aist.jrl.vision.HRP2CameraPackage.CameraParameter _ob_r = GetCameraParameter();
        out = handler.createReply();
        jp.go.aist.jrl.vision.HRP2CameraPackage.CameraParameterHelper.write(out, _ob_r);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_GetIntrinsicParameters(org.omg.CORBA.portable.InputStream in,
                                  org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        jp.go.aist.jrl.vision.HRP2CameraPackage.IntrinsicParameters _ob_r = GetIntrinsicParameters();
        out = handler.createReply();
        jp.go.aist.jrl.vision.HRP2CameraPackage.IntrinsicParametersHelper.write(out, _ob_r);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_GetProjectiveParameters(org.omg.CORBA.portable.InputStream in,
                                   org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        jp.go.aist.jrl.vision.HRP2CameraPackage.ProjectiveParameters _ob_r = GetProjectiveParameters();
        out = handler.createReply();
        jp.go.aist.jrl.vision.HRP2CameraPackage.ProjectiveParametersHelper.write(out, _ob_r);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_SetAcquisitionSize(org.omg.CORBA.portable.InputStream in,
                              org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        int _ob_a0 = in.read_long();
        int _ob_a1 = in.read_long();
        int _ob_r = SetAcquisitionSize(_ob_a0, _ob_a1);
        out = handler.createReply();
        out.write_long(_ob_r);
        return out;
    }
}
