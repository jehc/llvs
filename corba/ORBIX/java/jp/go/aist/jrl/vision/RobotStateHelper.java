// **********************************************************************
//
// Generated by the Orbix/E IDL to Java Translator
//
// Copyright (c) 2003
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 2.0.1

package jp.go.aist.jrl.vision;

//
// IDL:RobotState:1.0
//
final public class RobotStateHelper
{
    public static void
    insert(org.omg.CORBA.Any any, RobotState val)
    {
        org.omg.CORBA.portable.OutputStream out = any.create_output_stream();
        write(out, val);
        any.read_value(out.create_input_stream(), type());
    }

    public static RobotState
    extract(org.omg.CORBA.Any any)
    {
        if(any.type().equivalent(type()))
            return read(any.create_input_stream());
        else
            throw new org.omg.CORBA.BAD_OPERATION();
    }

    private static org.omg.CORBA.TypeCode typeCode_;

    public static org.omg.CORBA.TypeCode
    type()
    {
        if(typeCode_ == null)
        {
            org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init();
            org.omg.CORBA.StructMember[] members = new org.omg.CORBA.StructMember[10];

            members[0] = new org.omg.CORBA.StructMember();
            members[0].name = "angle";
            members[0].type = dsequenceHelper.type();

            members[1] = new org.omg.CORBA.StructMember();
            members[1].name = "velocity";
            members[1].type = dsequenceHelper.type();

            members[2] = new org.omg.CORBA.StructMember();
            members[2].name = "force";
            members[2].type = orb.create_sequence_tc(0, dsequenceHelper.type());

            members[3] = new org.omg.CORBA.StructMember();
            members[3].name = "rate";
            members[3].type = orb.create_sequence_tc(0, dsequenceHelper.type());

            members[4] = new org.omg.CORBA.StructMember();
            members[4].name = "accel";
            members[4].type = orb.create_sequence_tc(0, dsequenceHelper.type());

            members[5] = new org.omg.CORBA.StructMember();
            members[5].name = "attitude";
            members[5].type = orb.create_sequence_tc(0, dsequenceHelper.type());

            members[6] = new org.omg.CORBA.StructMember();
            members[6].name = "zmp";
            members[6].type = dsequenceHelper.type();

            members[7] = new org.omg.CORBA.StructMember();
            members[7].name = "waistPos";
            members[7].type = dsequenceHelper.type();

            members[8] = new org.omg.CORBA.StructMember();
            members[8].name = "waistRpy";
            members[8].type = dsequenceHelper.type();

            members[9] = new org.omg.CORBA.StructMember();
            members[9].name = "image";
            members[9].type = orb.create_sequence_tc(0, ImageDataHelper.type());

            typeCode_ = orb.create_struct_tc(id(), "RobotState", members);
        }

        return typeCode_;
    }

    public static String
    id()
    {
        return "IDL:RobotState:1.0";
    }

    public static RobotState
    read(org.omg.CORBA.portable.InputStream in)
    {
        RobotState _ob_v = new RobotState();
        _ob_v.angle = dsequenceHelper.read(in);
        _ob_v.velocity = dsequenceHelper.read(in);
        int len0 = in.read_ulong();
        _ob_v.force = new double[len0][];
        for(int i0 = 0 ; i0 < len0 ; i0++)
        {
            _ob_v.force[i0] = dsequenceHelper.read(in);
        }
        int len1 = in.read_ulong();
        _ob_v.rate = new double[len1][];
        for(int i1 = 0 ; i1 < len1 ; i1++)
        {
            _ob_v.rate[i1] = dsequenceHelper.read(in);
        }
        int len2 = in.read_ulong();
        _ob_v.accel = new double[len2][];
        for(int i2 = 0 ; i2 < len2 ; i2++)
        {
            _ob_v.accel[i2] = dsequenceHelper.read(in);
        }
        int len3 = in.read_ulong();
        _ob_v.attitude = new double[len3][];
        for(int i3 = 0 ; i3 < len3 ; i3++)
        {
            _ob_v.attitude[i3] = dsequenceHelper.read(in);
        }
        _ob_v.zmp = dsequenceHelper.read(in);
        _ob_v.waistPos = dsequenceHelper.read(in);
        _ob_v.waistRpy = dsequenceHelper.read(in);
        int len4 = in.read_ulong();
        _ob_v.image = new ImageData[len4];
        for(int i4 = 0 ; i4 < len4 ; i4++)
            _ob_v.image[i4] = ImageDataHelper.read(in);
        return _ob_v;
    }

    public static void
    write(org.omg.CORBA.portable.OutputStream out, RobotState val)
    {
        dsequenceHelper.write(out, val.angle);
        dsequenceHelper.write(out, val.velocity);
        int len0 = val.force.length;
        out.write_ulong(len0);
        for(int i0 = 0 ; i0 < len0 ; i0++)
        {
            dsequenceHelper.write(out, val.force[i0]);
        }
        int len1 = val.rate.length;
        out.write_ulong(len1);
        for(int i1 = 0 ; i1 < len1 ; i1++)
        {
            dsequenceHelper.write(out, val.rate[i1]);
        }
        int len2 = val.accel.length;
        out.write_ulong(len2);
        for(int i2 = 0 ; i2 < len2 ; i2++)
        {
            dsequenceHelper.write(out, val.accel[i2]);
        }
        int len3 = val.attitude.length;
        out.write_ulong(len3);
        for(int i3 = 0 ; i3 < len3 ; i3++)
        {
            dsequenceHelper.write(out, val.attitude[i3]);
        }
        dsequenceHelper.write(out, val.zmp);
        dsequenceHelper.write(out, val.waistPos);
        dsequenceHelper.write(out, val.waistRpy);
        int len4 = val.image.length;
        out.write_ulong(len4);
        for(int i4 = 0 ; i4 < len4 ; i4++)
            ImageDataHelper.write(out, val.image[i4]);
    }
}
