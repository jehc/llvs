# Olivier Stasse, JRL, CNRS/AIST
# Creation: 09/09/2008
# Copyright CNRS/AIST

cmake_minimum_required(VERSION 2.6)

enable_language(CXX)

# Debug mode for cmake
SET(CMAKE_VERBOSE_MAKEFILE ON)

# Name of the Project
project(LLVS)

# Set the name of the library generated by this package
SET(LLVS_INTERN_LIBS "llvs-0")

# Specify the compile flags for the overall library

# To be used for debugging
SET(LLVS_CXX_FLAGS "-g -c  -Wall -Wno-unused -fexceptions -DSTDC_HEADERS")
# Normal settings
#SET(LLVS_CXX_FLAGS "-O3 -c  -Wall -Wno-unused -fexceptions -DSTDC_HEADERS")

# Specify the binary directory 
SET(LLVS_BINARY_DIR ${LLVS_SOURCE_DIR}/server)


SET(LLVS_VERSION_MAJOR "1")
SET(LLVS_VERSION_MINOR "0")
SET(LLVS_VERSION_PATCH "0")
SET(LLVS_VERSION "${LLVS_VERSION_MAJOR}.${LLVS_VERSION_MINOR}.${LLVS_VERSION_PATCH}")

#--------------------------
SET(LLVS_INCLUDE_DIR "${LLVS_BINARY_DIR}/include/llvs")
SET(LLVS_DOC_DIR "${LLVS_BINARY_DIR}/doc")

# Specify the include directory on which the code depend upon
SET(LLVS_INTERN_INCLUDE_DIR ${LLVS_SOURCE_DIR}/include/llvs)

# The location in which to install LLVS binaries

# Specify the files on which the library depend upon
SET(CMAKE_C_INCLUDE_PATH "")
SET(CMAKE_CXX_INCLUDE_PATH "")
INCLUDE_DIRECTORIES(${LLVS_INTERN_INCLUDE_DIR})

# Get the OS
SET(OS ${CMAKE_SYSTEM_NAME})

# where are use-specific cmake modules
SET(CMAKE_MODULE_PATH ${LLVS_SOURCE_DIR}/CMakeModules)

# Detect Pkg config
INCLUDE(FindPkgConfig)

# Detect OpenHRP
INCLUDE(FindOpenHRP)

# Detect VW config
INCLUDE(FindVW)
IF (VW_FOUND)
   SET(LLVS_CXX_FLAGS "${LLVS_CXX_FLAGS} ${VW_CXX_FLAGS}")
   SET(LLVS_LINK_FLAGS "${LLVS_LINK_FLAGS} ${VW_LD_FLAGS}")
   SET(LLVS_HAVE_VW TRUE)
   #MESSAGE(STATUS "LLVS_CXX_FLAGS: ${LLVS_CXX_FLAGS}")
ENDIF(VW_FOUND)

# Detect VVV
INCLUDE(FindVVV)
IF (VVV_FOUND)
   SET(LLVS_CXX_FLAGS "${LLVS_CXX_FLAGS} ${VVV_CXX_FLAGS}")
   SET(LLVS_LINK_FLAGS "${LLVS_LINK_FLAGS} ${VVV_LD_FLAGS}")
   SET(LLVS_HAVE_VVV TRUE)
   #MESSAGE(STATUS "LLVS_CXX_FLAGS: ${LLVS_CXX_FLAGS}")
ENDIF(VVV_FOUND)

# Detect OpenCV config
INCLUDE(FindOpenCV)
IF (OPENCV_FOUND)
   SET(LLVS_CXX_FLAGS "${LLVS_CXX_FLAGS} ${OPENCV_CXX_FLAGS}")
   SET(LLVS_LINK_FLAGS "${LLVS_LINK_FLAGS} ${OPENCV_LD_FLAGS}")
   SET(LLVS_HAVE_OPENCV TRUE)
   #MESSAGE(STATUS "LLVS_CXX_FLAGS: ${LLVS_CXX_FLAGS}")
ENDIF(OPENCV_FOUND)

# Detect Scene
INCLUDE(FindScene)
IF (SCENE_FOUND)
   SET(LLVS_CXX_FLAGS "${LLVS_CXX_FLAGS} ${SCENE_CXX_FLAGS}")
   SET(LLVS_LINK_FLAGS "${LLVS_LINK_FLAGS} ${SCENE_LD_FLAGS}")
   SET(LLVS_HAVE_SCENE TRUE)
   #MESSAGE(STATUS "LLVS_CXX_FLAGS: ${LLVS_CXX_FLAGS}")
ENDIF(SCENE_FOUND)

# Detect OmniOrb.
INCLUDE(${CMAKE_MODULE_PATH}/UseOmniORB4.cmake)
IF (OMNIORB4_FOUND)

  SET(LLVS_CXX_FLAGS "${LLVS_CXX_FLAGS} ${omniORB4_cflags}")
  IF(omniORB4_include_DIR)
    SET(LLVS_CXX_FLAGS "-I${omniORB4_include_DIR}")
  ENDIF(omniORB4_include_DIR)
  SET(LLVS_HAVE_OMNIORB4 TRUE)
  SET(LLVS_LINK_FLAGS "${LLVS_LINK_FLAGS} ${omniORB4_link_FLAGS}")

ENDIF (OMNIORB4_FOUND)

SET(LLVS_SRC_FILES "")
SET(LLVS_HEADERS_FILES "")   

#----------------------------------------------------
# Generate the package dependent file sotConfig.h
#----------------------------------------------------
CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/include/llvs/llvsConfig.h.cmake
	${PROJECT_SOURCE_DIR}/include/llvs/llvsConfig.h
)

#----------------------------------------------------
# Include the rules to make the server library,
# the server itself,
# and the necessary CORBA related files. 
#----------------------------------------------------
INCLUDE(${PROJECT_SOURCE_DIR}/corba/SourceList.cmake)
INCLUDE(${PROJECT_SOURCE_DIR}/src/SourceList.cmake)
INCLUDE(${PROJECT_SOURCE_DIR}/include/llvs/SourceList.cmake)

#MESSAGE(STATUS "LLVS_SRC_FILES: ${LLVS_SRC_FILES}")
#MESSAGE(STATUS "LLVS_HEADER_FILES: ${LLVS_HEADER_FILES}")
#----------------------------------------------------
# Create the library. 
#----------------------------------------------------
ADD_LIBRARY(${LLVS_INTERN_LIBS} ${LLVS_SRC_FILES} ${LLVS_HEADER_FILES})
SET_TARGET_PROPERTIES(${LLVS_INTERN_LIBS} PROPERTIES COMPILE_FLAGS "${LLVS_CXX_FLAGS}")

#----------------------------------------------------
# Create the server.
#----------------------------------------------------
ADD_EXECUTABLE(LLVS_server ./src/MainEntryPoint.cpp )

SET_TARGET_PROPERTIES(LLVS_server PROPERTIES COMPILE_FLAGS 
  "${LLVS_server_CXX_FLAGS} ${LLVS_CXX_FLAGS}"
  LINK_FLAGS 
  "${LLVS_server_LINK_FLAGS} ./libllvs-0.a ${LLVS_LINK_FLAGS}  ")

ADD_DEPENDENCIES(LLVS_server ${LLVS_INTERN_LIBS})