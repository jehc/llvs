// **********************************************************************
//
// Generated by the Orbix/E IDL-to-C++ Translator
//
// Copyright (c) 2003
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 2.2.0

#ifndef ___LowLevelVisionSystem_skel_h__
#define ___LowLevelVisionSystem_skel_h__

#include <LowLevelVisionSystem.h>

#include <common_skel.h>
#include <visionsensor_skel.h>
#include <BRep_skel.h>
#include <Scene_skel.h>
#include <StereoVision_skel.h>

#ifndef OBEC_INTEGER_VERSION
#   error No Orbix/E version defined! Is <OBE/CORBA.h> included?
#endif

#ifndef OBEC_NO_VERSION_CHECK
#   if (OBEC_INTEGER_VERSION != 2020000L)
#       error Orbix/E version mismatch!
#   endif
#endif

//
// IDL:HRP2Camera:1.0
//
class POA_HRP2Camera : virtual public PortableServer::ServantBase
{
    POA_HRP2Camera(const POA_HRP2Camera&);
    void operator=(const POA_HRP2Camera&);

protected:

    //
    // IDL:HRP2Camera/GetCameraParameter:1.0
    //
    void
    _OB_op_GetCameraParameter(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:HRP2Camera/GetIntrinsicParameters:1.0
    //
    void
    _OB_op_GetIntrinsicParameters(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:HRP2Camera/SetAcquisitionSize:1.0
    //
    void
    _OB_op_SetAcquisitionSize(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:HRP2Camera/GetProjectiveParameters:1.0
    //
    void
    _OB_op_GetProjectiveParameters(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

public:

    POA_HRP2Camera() { }

    virtual CORBA::Boolean
    _is_a(
        const char* _ob_repid
    ) throw(CORBA::SystemException);

    virtual CORBA::RepositoryId
    _primary_interface(
        const PortableServer::ObjectId& _ob_oid,
        PortableServer::POA_ptr _ob_poa
    );

    ::HRP2Camera_ptr
    _this(
    );

    virtual void
    _OB_dispatch(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:HRP2Camera/GetCameraParameter:1.0
    //
    virtual ::HRP2Camera::CameraParameter* GetCameraParameter(
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:HRP2Camera/GetIntrinsicParameters:1.0
    //
    virtual ::HRP2Camera::IntrinsicParameters GetIntrinsicParameters(
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:HRP2Camera/SetAcquisitionSize:1.0
    //
    virtual CORBA::Long SetAcquisitionSize(
        CORBA::Long aWidth,
        CORBA::Long aHeight
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:HRP2Camera/GetProjectiveParameters:1.0
    //
    virtual ::HRP2Camera::ProjectiveParameters GetProjectiveParameters(
    ) throw(CORBA::SystemException) = 0;
};

//
// IDL:LowLevelVisionSystem:1.0
//
class POA_LowLevelVisionSystem : virtual public PortableServer::ServantBase
{
    POA_LowLevelVisionSystem(const POA_LowLevelVisionSystem&);
    void operator=(const POA_LowLevelVisionSystem&);

protected:

    //
    // IDL:LowLevelVisionSystem/destroy:1.0
    //
    void
    _OB_op_destroy(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/GetVersion:1.0
    //
    void
    _OB_op_GetVersion(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/StartMainProcess:1.0
    //
    void
    _OB_op_StartMainProcess(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/StopMainProcess:1.0
    //
    void
    _OB_op_StopMainProcess(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/StartProcess:1.0
    //
    void
    _OB_op_StartProcess(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/StopProcess:1.0
    //
    void
    _OB_op_StopProcess(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/ProcessStatus:1.0
    //
    void
    _OB_op_ProcessStatus(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/GetInputMode:1.0
    //
    void
    _OB_op_GetInputMode(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/SynchronizationMode:1.0
    //
    void
    _OB_op_SynchronizationMode(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/SetImage:1.0
    //
    void
    _OB_op_SetImage(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/SetImagesGrabbedSize:1.0
    //
    void
    _OB_op_SetImagesGrabbedSize(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/TriggerSynchro:1.0
    //
    void
    _OB_op_TriggerSynchro(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/getCameraSeq:1.0
    //
    void
    _OB_op_getCameraSeq(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/getImage:1.0
    //
    void
    _OB_op_getImage(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/getEdgeImage:1.0
    //
    void
    _OB_op_getEdgeImage(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/getRectifiedImage:1.0
    //
    void
    _OB_op_getRectifiedImage(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/getRangeMap:1.0
    //
    void
    _OB_op_getRangeMap(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/getImageDerivative:1.0
    //
    void
    _OB_op_getImageDerivative(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/getOpticalFlow:1.0
    //
    void
    _OB_op_getOpticalFlow(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/getHarrisDetector:1.0
    //
    void
    _OB_op_getHarrisDetector(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/getLowLevelVisionProcesses:1.0
    //
    void
    _OB_op_getLowLevelVisionProcesses(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/SetAProcessParameterAndValue:1.0
    //
    void
    _OB_op_SetAProcessParameterAndValue(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/GetProcessParameter:1.0
    //
    void
    _OB_op_GetProcessParameter(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/GetProcessParameters:1.0
    //
    void
    _OB_op_GetProcessParameters(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/SetDumpImageMode:1.0
    //
    void
    _OB_op_SetDumpImageMode(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/GetDumpImageMode:1.0
    //
    void
    _OB_op_GetDumpImageMode(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/GetMatrixHeadTOrg:1.0
    //
    void
    _OB_op_GetMatrixHeadTOrg(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/GetBoundaryRepresentation:1.0
    //
    void
    _OB_op_GetBoundaryRepresentation(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/GetSceneObject:1.0
    //
    void
    _OB_op_GetSceneObject(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/SceneDeleteFeature:1.0
    //
    void
    _OB_op_SceneDeleteFeature(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/GetImageIdentifier:1.0
    //
    void
    _OB_op_GetImageIdentifier(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/getStereoVision:1.0
    //
    void
    _OB_op_getStereoVision(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

public:

    POA_LowLevelVisionSystem() { }

    virtual CORBA::Boolean
    _is_a(
        const char* _ob_repid
    ) throw(CORBA::SystemException);

    virtual CORBA::RepositoryId
    _primary_interface(
        const PortableServer::ObjectId& _ob_oid,
        PortableServer::POA_ptr _ob_poa
    );

    ::LowLevelVisionSystem_ptr
    _this(
    );

    virtual void
    _OB_dispatch(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/destroy:1.0
    //
    virtual void destroy(
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/GetVersion:1.0
    //
    virtual CORBA::Long GetVersion(
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/StartMainProcess:1.0
    //
    virtual CORBA::Long StartMainProcess(
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/StopMainProcess:1.0
    //
    virtual CORBA::Long StopMainProcess(
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/StartProcess:1.0
    //
    virtual CORBA::Long StartProcess(
        const char* ProcessName
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/StopProcess:1.0
    //
    virtual CORBA::Long StopProcess(
        const char* ProcessName
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/ProcessStatus:1.0
    //
    virtual CORBA::Long ProcessStatus(
        const char* ProcessName
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/GetInputMode:1.0
    //
    virtual ::LowLevelVisionSystem::InputMode GetInputMode(
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/SynchronizationMode:1.0
    //
    virtual ::LowLevelVisionSystem::SynchroMode SynchronizationMode(
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/SetImage:1.0
    //
    virtual CORBA::Long SetImage(
        const ColorBuffer& aColorBuffer,
        CORBA::Long aWidth,
        CORBA::Long aHeight
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/SetImagesGrabbedSize:1.0
    //
    virtual CORBA::Long SetImagesGrabbedSize(
        CORBA::Long NewWidth,
        CORBA::Long NewHeight
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/TriggerSynchro:1.0
    //
    virtual CORBA::Long TriggerSynchro(
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/getCameraSeq:1.0
    //
    virtual CORBA::Long getCameraSeq(
        HRP2CameraSeq_out cameras
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/getImage:1.0
    //
    virtual CORBA::Long getImage(
        CORBA::Long CameraID,
        ImageData_out anImage,
        char*& Format
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/getEdgeImage:1.0
    //
    virtual CORBA::Long getEdgeImage(
        CORBA::Long CameraID,
        ImageData_out anImage,
        char*& Format
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/getRectifiedImage:1.0
    //
    virtual CORBA::Long getRectifiedImage(
        CORBA::Long CameraID,
        ImageData_out anImage,
        char*& Format
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/getRangeMap:1.0
    //
    virtual CORBA::Long getRangeMap(
        RangeMap_out aRangeMap,
        char*& Format
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/getImageDerivative:1.0
    //
    virtual CORBA::Long getImageDerivative(
        CORBA::Long CameraID,
        CORBA::Long DerivativeID,
        FloatBuffer_out ImageDerivative,
        CORBA::Long_out Width,
        CORBA::Long_out Height
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/getOpticalFlow:1.0
    //
    virtual CORBA::Long getOpticalFlow(
        CORBA::Long CameraID,
        FloatBuffer_out OpticalFlow,
        FloatBuffer_out Confidence,
        CORBA::Long_out Width,
        CORBA::Long_out Height
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/getHarrisDetector:1.0
    //
    virtual CORBA::Long getHarrisDetector(
        CORBA::Long CameraId,
        FloatBuffer_out Harris,
        CORBA::Long_out Width,
        CORBA::Long_out Height
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/getLowLevelVisionProcesses:1.0
    //
    virtual CORBA::Long getLowLevelVisionProcesses(
        HRP2LowLevelVisionProcessesSeq_out ProcessesSeq
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/SetAProcessParameterAndValue:1.0
    //
    virtual void SetAProcessParameterAndValue(
        const char* aProcessName,
        const char* aParameter,
        const char* aValue
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/GetProcessParameter:1.0
    //
    virtual CORBA::Long GetProcessParameter(
        const char* aProcessName,
        const char* aParameterName,
        CORBA::String_out ParameterValue
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/GetProcessParameters:1.0
    //
    virtual CORBA::Long GetProcessParameters(
        const char* aProcessName,
        HRP2LowLevelVisionParametersSeq_out ParametersSeq,
        HRP2LowLevelVisionParametersSeq_out ParametersValueSeq
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/SetDumpImageMode:1.0
    //
    virtual void SetDumpImageMode(
        LowLevelVisionSystem::DumpImageMode aDumpImageMode,
        const FloatBuffer& Informations,
        CORBA::Long SizeOfInformations
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/GetDumpImageMode:1.0
    //
    virtual ::LowLevelVisionSystem::DumpImageMode GetDumpImageMode(
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/GetMatrixHeadTOrg:1.0
    //
    virtual CORBA::Long GetMatrixHeadTOrg(
        DoubleBuffer_out HeadTOrg
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/GetBoundaryRepresentation:1.0
    //
    virtual CORBA::Long GetBoundaryRepresentation(
        CBREPSeq_out aBrep
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/GetSceneObject:1.0
    //
    virtual CORBA::Long GetSceneObject(
        SceneObject_out aSceneObject
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/SceneDeleteFeature:1.0
    //
    virtual void SceneDeleteFeature(
        CORBA::Long FeatureLabel
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/GetImageIdentifier:1.0
    //
    virtual CORBA::Long GetImageIdentifier(
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:LowLevelVisionSystem/getStereoVision:1.0
    //
    virtual ::StereoVision_ptr getStereoVision(
    ) throw(CORBA::SystemException) = 0;
};

#endif
