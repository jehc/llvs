// **********************************************************************
//
// Generated by the Orbix/E IDL-to-C++ Translator
//
// Copyright (c) 2003
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 2.2.0

#ifndef ___LowLevelVisionSystem_h__
#define ___LowLevelVisionSystem_h__

#include <common.h>
#include <visionsensor.h>
#include <BRep.h>
#include <Scene.h>
#include <StereoVision.h>

#ifndef OBEC_INTEGER_VERSION
#   error No Orbix/E version defined! Is <OBE/CORBA.h> included?
#endif

#ifndef OBEC_NO_VERSION_CHECK
#   if (OBEC_INTEGER_VERSION != 2020000L)
#       error Orbix/E version mismatch!
#   endif
#endif

class HRP2Camera;
typedef HRP2Camera* HRP2Camera_ptr;
typedef HRP2Camera* HRP2CameraRef;
extern CORBA::TypeCode_ptr _tc_HRP2Camera;

class LowLevelVisionSystem;
typedef LowLevelVisionSystem* LowLevelVisionSystem_ptr;
typedef LowLevelVisionSystem* LowLevelVisionSystemRef;
extern CORBA::TypeCode_ptr _tc_LowLevelVisionSystem;

 void OBDuplicate(HRP2Camera_ptr);
 void OBRelease(HRP2Camera_ptr);

 void OBMarshal(HRP2Camera_ptr, OBEC_OutputStreamImpl*, CORBA_Environment*);
 void OBUnmarshal(HRP2Camera_ptr&, OBEC_InputStreamImpl*, CORBA_Environment*);

 void OBDuplicate(LowLevelVisionSystem_ptr);
 void OBRelease(LowLevelVisionSystem_ptr);

 void OBMarshal(LowLevelVisionSystem_ptr, OBEC_OutputStreamImpl*, CORBA_Environment*);
 void OBUnmarshal(LowLevelVisionSystem_ptr&, OBEC_InputStreamImpl*, CORBA_Environment*);

#ifdef OBEA_DLL
#   ifndef HAVE_NO_EXPLICIT_TEMPLATES
template class  OB::ObjVar< HRP2Camera >;
#   endif
#endif
typedef OB::ObjVar< HRP2Camera > HRP2Camera_var;
#ifdef OBEA_DLL
#   ifndef HAVE_NO_EXPLICIT_TEMPLATES
template class  OB::ObjOut< HRP2Camera >;
#   endif
#endif
typedef OB::ObjOut< HRP2Camera > HRP2Camera_out;

#ifdef OBEA_DLL
#   ifndef HAVE_NO_EXPLICIT_TEMPLATES
template class  OB::ObjVar< LowLevelVisionSystem >;
#   endif
#endif
typedef OB::ObjVar< LowLevelVisionSystem > LowLevelVisionSystem_var;
#ifdef OBEA_DLL
#   ifndef HAVE_NO_EXPLICIT_TEMPLATES
template class  OB::ObjOut< LowLevelVisionSystem >;
#   endif
#endif
typedef OB::ObjOut< LowLevelVisionSystem > LowLevelVisionSystem_out;

//
// IDL:DoubleBuffer:1.0
//
class OBUnique_DoubleBuffer { };

typedef OB::FixSeq< CORBA::Double, OBUnique_DoubleBuffer > DoubleBuffer;
typedef OB::SeqVar< OB::FixSeq< CORBA::Double, OBUnique_DoubleBuffer > > DoubleBuffer_var;
typedef OB::SeqOut< OB::FixSeq< CORBA::Double, OBUnique_DoubleBuffer > > DoubleBuffer_out;
extern CORBA::TypeCode_ptr _tc_DoubleBuffer;

//
// IDL:HRP2Camera:1.0
//
class HRP2Camera : public OBCORBA::Object
{
    HRP2Camera(const HRP2Camera&);
    void operator=(const HRP2Camera&);

protected:

    static const char* ids_[];

public:

    HRP2Camera() { }
    virtual ~HRP2Camera() { }

    typedef HRP2Camera_ptr _ptr_type;
    typedef HRP2Camera_var _var_type;

    static inline HRP2Camera_ptr
    _duplicate(HRP2Camera_ptr p)
    {
        if (p)
            p -> _OB_incRef();
        return p;
    }

    static inline HRP2Camera_ptr
    _nil()
    {
        return 0;
    }

    static HRP2Camera_ptr _narrow(CORBA::Object_ptr);

    static const char** _OB_staticIds();
    virtual const char** _OB_ids() const;

    //
    // IDL:HRP2Camera/CameraParameter:1.0
    //
    struct CameraParameter;
    typedef OB::VarVar< CameraParameter > CameraParameter_var;
    typedef OB::VarOut< CameraParameter > CameraParameter_out;

    struct CameraParameter
    {
#ifdef OB_PURIFY_CLEAN
        CameraParameter();
#else
        CameraParameter() { }
#endif
        CameraParameter(const CameraParameter&);
        CameraParameter& operator=(const CameraParameter&);

        typedef CameraParameter_var _var_type;

        CORBA::Long type;
        CORBA::Long CameraId;
        OB::StrForStruct CameraName;
        CORBA::Long Width;
        CORBA::Long Height;
        CORBA::Long CalibrationWidth;
        CORBA::Long CalibrationHeight;

        void _OB_marshal(
            OBEC_OutputStreamImpl* _ob_out,
            CORBA_Environment* _ob_cev
        ) const;
        static void _OB_unmarshal(
            CameraParameter& _ob_v,
            OBEC_InputStreamImpl* _ob_in,
            CORBA_Environment* _ob_cev
        );

        void
        _OB_convert_to(
            void* _ob_data
        ) const;

        static void
        _OB_convert_from(
            CameraParameter& _ob_v,
            void* _ob_data
        );
    };

    static CORBA::TypeCode_ptr _tc_CameraParameter;

    //
    // IDL:HRP2Camera/IntrinsicParameters:1.0
    //
    struct IntrinsicParameters;
    typedef OB::FixVar< IntrinsicParameters > IntrinsicParameters_var;
    typedef IntrinsicParameters& IntrinsicParameters_out;

    struct IntrinsicParameters
    {
        typedef IntrinsicParameters_var _var_type;

        CORBA::Float Focal;
        CORBA::Float Scale[2];
        CORBA::Float SkewFactor;
        CORBA::Float ImageCenter[2];

        void _OB_marshal(
            OBEC_OutputStreamImpl* _ob_out,
            CORBA_Environment* _ob_cev
        ) const;
        static void _OB_unmarshal(
            IntrinsicParameters& _ob_v,
            OBEC_InputStreamImpl* _ob_in,
            CORBA_Environment* _ob_cev
        );

        void
        _OB_convert_to(
            void* _ob_data
        ) const;

        static void
        _OB_convert_from(
            IntrinsicParameters& _ob_v,
            void* _ob_data
        );
    };

    static CORBA::TypeCode_ptr _tc_IntrinsicParameters;

    //
    // IDL:HRP2Camera/ProjectiveParameters:1.0
    //
    struct ProjectiveParameters;
    typedef OB::FixVar< ProjectiveParameters > ProjectiveParameters_var;
    typedef ProjectiveParameters& ProjectiveParameters_out;

    struct ProjectiveParameters
    {
        typedef ProjectiveParameters_var _var_type;

        CORBA::Double ProjectiveMatrix[3][4];
        CORBA::Double RotationMatrix[3][3];
        CORBA::Double PositionVector[3];
        CORBA::Double IntrinsicMatrix[3][3];

        void _OB_marshal(
            OBEC_OutputStreamImpl* _ob_out,
            CORBA_Environment* _ob_cev
        ) const;
        static void _OB_unmarshal(
            ProjectiveParameters& _ob_v,
            OBEC_InputStreamImpl* _ob_in,
            CORBA_Environment* _ob_cev
        );

        void
        _OB_convert_to(
            void* _ob_data
        ) const;

        static void
        _OB_convert_from(
            ProjectiveParameters& _ob_v,
            void* _ob_data
        );
    };

    static CORBA::TypeCode_ptr _tc_ProjectiveParameters;

    //
    // IDL:HRP2Camera/GetCameraParameter:1.0
    //
    ::HRP2Camera::CameraParameter* GetCameraParameter();

    //
    // IDL:HRP2Camera/GetIntrinsicParameters:1.0
    //
    ::HRP2Camera::IntrinsicParameters GetIntrinsicParameters();

    //
    // IDL:HRP2Camera/SetAcquisitionSize:1.0
    //
    CORBA::Long SetAcquisitionSize(CORBA::Long aWidth,
                                   CORBA::Long aHeight);

    //
    // IDL:HRP2Camera/GetProjectiveParameters:1.0
    //
    ::HRP2Camera::ProjectiveParameters GetProjectiveParameters();

protected:

    //
    // IDL:HRP2Camera/GetCameraParameter:1.0
    //
    ::HRP2Camera::CameraParameter*
    _OB_op_GetCameraParameter(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:HRP2Camera/GetIntrinsicParameters:1.0
    //
    ::HRP2Camera::IntrinsicParameters
    _OB_op_GetIntrinsicParameters(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:HRP2Camera/SetAcquisitionSize:1.0
    //
    CORBA::Long
    _OB_op_SetAcquisitionSize(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA::Long aWidth,
        CORBA::Long aHeight,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:HRP2Camera/GetProjectiveParameters:1.0
    //
    ::HRP2Camera::ProjectiveParameters
    _OB_op_GetProjectiveParameters(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA_Environment* _ob_cev
    );
};

//
// IDL:HRP2CameraSeq:1.0
//
class OBUnique_HRP2CameraSeq { };

typedef OB::ObjSeq< ::HRP2Camera, OBUnique_HRP2CameraSeq > HRP2CameraSeq;
typedef OB::SeqVar< OB::ObjSeq< ::HRP2Camera, OBUnique_HRP2CameraSeq > > HRP2CameraSeq_var;
typedef OB::SeqOut< OB::ObjSeq< ::HRP2Camera, OBUnique_HRP2CameraSeq > > HRP2CameraSeq_out;
extern CORBA::TypeCode_ptr _tc_HRP2CameraSeq;

//
// IDL:HRP2LowLevelVisionProcessesSeq:1.0
//
class OBUnique_HRP2LowLevelVisionProcessesSeq { };

typedef OB::StrSeq< OBUnique_HRP2LowLevelVisionProcessesSeq > HRP2LowLevelVisionProcessesSeq;
typedef OB::SeqVar< OB::StrSeq< OBUnique_HRP2LowLevelVisionProcessesSeq > > HRP2LowLevelVisionProcessesSeq_var;
typedef OB::SeqOut< OB::StrSeq< OBUnique_HRP2LowLevelVisionProcessesSeq > > HRP2LowLevelVisionProcessesSeq_out;
extern CORBA::TypeCode_ptr _tc_HRP2LowLevelVisionProcessesSeq;

//
// IDL:HRP2LowLevelVisionParametersSeq:1.0
//
class OBUnique_HRP2LowLevelVisionParametersSeq { };

typedef OB::StrSeq< OBUnique_HRP2LowLevelVisionParametersSeq > HRP2LowLevelVisionParametersSeq;
typedef OB::SeqVar< OB::StrSeq< OBUnique_HRP2LowLevelVisionParametersSeq > > HRP2LowLevelVisionParametersSeq_var;
typedef OB::SeqOut< OB::StrSeq< OBUnique_HRP2LowLevelVisionParametersSeq > > HRP2LowLevelVisionParametersSeq_out;
extern CORBA::TypeCode_ptr _tc_HRP2LowLevelVisionParametersSeq;

//
// IDL:LowLevelVisionSystem:1.0
//
class LowLevelVisionSystem : public OBCORBA::Object
{
    LowLevelVisionSystem(const LowLevelVisionSystem&);
    void operator=(const LowLevelVisionSystem&);

protected:

    static const char* ids_[];

public:

    LowLevelVisionSystem() { }
    virtual ~LowLevelVisionSystem() { }

    typedef LowLevelVisionSystem_ptr _ptr_type;
    typedef LowLevelVisionSystem_var _var_type;

    static inline LowLevelVisionSystem_ptr
    _duplicate(LowLevelVisionSystem_ptr p)
    {
        if (p)
            p -> _OB_incRef();
        return p;
    }

    static inline LowLevelVisionSystem_ptr
    _nil()
    {
        return 0;
    }

    static LowLevelVisionSystem_ptr _narrow(CORBA::Object_ptr);

    static const char** _OB_staticIds();
    virtual const char** _OB_ids() const;

    //
    // IDL:LowLevelVisionSystem/DerivativeID:1.0
    //
    enum DerivativeID
    {
        IDT,
        IDX,
        IDY,
        IDXDX,
        IDXDY,
        IDYDY,
        IDXDX2,
        IDXDY2,
        IDYDY2,
        IDXDT,
        IDYDT,
        IDT2,
        IDXDT2,
        IDYDT2
    };

    typedef DerivativeID& DerivativeID_out;

    static CORBA::TypeCode_ptr _tc_DerivativeID;

    //
    // IDL:LowLevelVisionSystem/InputMode:1.0
    //
    enum InputMode
    {
        FRAMEGRABBER,
        FILES,
        FILESINGLE,
        SIMULATION
    };

    typedef InputMode& InputMode_out;

    static CORBA::TypeCode_ptr _tc_InputMode;

    //
    // IDL:LowLevelVisionSystem/SynchroMode:1.0
    //
    enum SynchroMode
    {
        SYNCHRO_FLOW,
        SYNCHRO_TRIGGER
    };

    typedef SynchroMode& SynchroMode_out;

    static CORBA::TypeCode_ptr _tc_SynchroMode;

    //
    // IDL:LowLevelVisionSystem/DumpImageMode:1.0
    //
    enum DumpImageMode
    {
        NONE,
        SINGLE,
        FLOW
    };

    typedef DumpImageMode& DumpImageMode_out;

    static CORBA::TypeCode_ptr _tc_DumpImageMode;

    //
    // IDL:LowLevelVisionSystem/VisionSensorException:1.0
    //
    struct VisionSensorException : public CORBA::UserException
    {
        VisionSensorException() { }
        VisionSensorException(const VisionSensorException&);
        VisionSensorException& operator=(const VisionSensorException&);

        virtual void _raise() const { throw *this; }
        virtual const char* _rep_id() const;

        virtual CORBA::Exception* _OB_clone() const;

        OB::StrForStruct description;

        VisionSensorException(const char*);

        virtual void _OB_marshal(
            OBEC_OutputStreamImpl* _ob_out,
            CORBA_Environment* _ob_cev
        ) const;
        static void _OB_unmarshal(
            VisionSensorException& _ob_v,
            OBEC_InputStreamImpl* _ob_in,
            CORBA_Environment* _ob_cev
        );

        void
        _OB_convert_to(
            void* _ob_data
        ) const;

        static void
        _OB_convert_from(
            VisionSensorException& _ob_v,
            void* _ob_data
        );
    };

    static CORBA::TypeCode_ptr _tc_VisionSensorException;

    //
    // IDL:LowLevelVisionSystem/destroy:1.0
    //
    void destroy();

    //
    // IDL:LowLevelVisionSystem/GetVersion:1.0
    //
    CORBA::Long GetVersion();

    //
    // IDL:LowLevelVisionSystem/StartMainProcess:1.0
    //
    CORBA::Long StartMainProcess();

    //
    // IDL:LowLevelVisionSystem/StopMainProcess:1.0
    //
    CORBA::Long StopMainProcess();

    //
    // IDL:LowLevelVisionSystem/StartProcess:1.0
    //
    CORBA::Long StartProcess(const char* ProcessName);

    //
    // IDL:LowLevelVisionSystem/StopProcess:1.0
    //
    CORBA::Long StopProcess(const char* ProcessName);

    //
    // IDL:LowLevelVisionSystem/ProcessStatus:1.0
    //
    CORBA::Long ProcessStatus(const char* ProcessName);

    //
    // IDL:LowLevelVisionSystem/GetInputMode:1.0
    //
    ::LowLevelVisionSystem::InputMode GetInputMode();

    //
    // IDL:LowLevelVisionSystem/SynchronizationMode:1.0
    //
    ::LowLevelVisionSystem::SynchroMode SynchronizationMode();

    //
    // IDL:LowLevelVisionSystem/SetImage:1.0
    //
    CORBA::Long SetImage(const ::ColorBuffer& aColorBuffer,
                         CORBA::Long aWidth,
                         CORBA::Long aHeight);

    //
    // IDL:LowLevelVisionSystem/SetImagesGrabbedSize:1.0
    //
    CORBA::Long SetImagesGrabbedSize(CORBA::Long NewWidth,
                                     CORBA::Long NewHeight);

    //
    // IDL:LowLevelVisionSystem/TriggerSynchro:1.0
    //
    CORBA::Long TriggerSynchro();

    //
    // IDL:LowLevelVisionSystem/getCameraSeq:1.0
    //
    CORBA::Long getCameraSeq(::HRP2CameraSeq_out cameras);

    //
    // IDL:LowLevelVisionSystem/getImage:1.0
    //
    CORBA::Long getImage(CORBA::Long CameraID,
                         ::ImageData_out anImage,
                         char*& Format);

    //
    // IDL:LowLevelVisionSystem/getEdgeImage:1.0
    //
    CORBA::Long getEdgeImage(CORBA::Long CameraID,
                             ::ImageData_out anImage,
                             char*& Format);

    //
    // IDL:LowLevelVisionSystem/getRectifiedImage:1.0
    //
    CORBA::Long getRectifiedImage(CORBA::Long CameraID,
                                  ::ImageData_out anImage,
                                  char*& Format);

    //
    // IDL:LowLevelVisionSystem/getRangeMap:1.0
    //
    CORBA::Long getRangeMap(::RangeMap_out aRangeMap,
                            char*& Format);

    //
    // IDL:LowLevelVisionSystem/getImageDerivative:1.0
    //
    CORBA::Long getImageDerivative(CORBA::Long CameraID,
                                   CORBA::Long DerivativeID,
                                   ::FloatBuffer_out ImageDerivative,
                                   CORBA::Long_out Width,
                                   CORBA::Long_out Height);

    //
    // IDL:LowLevelVisionSystem/getOpticalFlow:1.0
    //
    CORBA::Long getOpticalFlow(CORBA::Long CameraID,
                               ::FloatBuffer_out OpticalFlow,
                               ::FloatBuffer_out Confidence,
                               CORBA::Long_out Width,
                               CORBA::Long_out Height);

    //
    // IDL:LowLevelVisionSystem/getHarrisDetector:1.0
    //
    CORBA::Long getHarrisDetector(CORBA::Long CameraId,
                                  ::FloatBuffer_out Harris,
                                  CORBA::Long_out Width,
                                  CORBA::Long_out Height);

    //
    // IDL:LowLevelVisionSystem/getLowLevelVisionProcesses:1.0
    //
    CORBA::Long getLowLevelVisionProcesses(::HRP2LowLevelVisionProcessesSeq_out ProcessesSeq);

    //
    // IDL:LowLevelVisionSystem/SetAProcessParameterAndValue:1.0
    //
    void SetAProcessParameterAndValue(const char* aProcessName,
                                      const char* aParameter,
                                      const char* aValue);

    //
    // IDL:LowLevelVisionSystem/GetProcessParameter:1.0
    //
    CORBA::Long GetProcessParameter(const char* aProcessName,
                                    const char* aParameterName,
                                    CORBA::String_out ParameterValue);

    //
    // IDL:LowLevelVisionSystem/GetProcessParameters:1.0
    //
    CORBA::Long GetProcessParameters(const char* aProcessName,
                                     ::HRP2LowLevelVisionParametersSeq_out ParametersSeq,
                                     ::HRP2LowLevelVisionParametersSeq_out ParametersValueSeq);

    //
    // IDL:LowLevelVisionSystem/SetDumpImageMode:1.0
    //
    void SetDumpImageMode(DumpImageMode aDumpImageMode,
                          const ::FloatBuffer& Informations,
                          CORBA::Long SizeOfInformations);

    //
    // IDL:LowLevelVisionSystem/GetDumpImageMode:1.0
    //
    ::LowLevelVisionSystem::DumpImageMode GetDumpImageMode();

    //
    // IDL:LowLevelVisionSystem/GetMatrixHeadTOrg:1.0
    //
    CORBA::Long GetMatrixHeadTOrg(::DoubleBuffer_out HeadTOrg);

    //
    // IDL:LowLevelVisionSystem/GetBoundaryRepresentation:1.0
    //
    CORBA::Long GetBoundaryRepresentation(::CBREPSeq_out aBrep);

    //
    // IDL:LowLevelVisionSystem/GetSceneObject:1.0
    //
    CORBA::Long GetSceneObject(::SceneObject_out aSceneObject);

    //
    // IDL:LowLevelVisionSystem/SceneDeleteFeature:1.0
    //
    void SceneDeleteFeature(CORBA::Long FeatureLabel);

    //
    // IDL:LowLevelVisionSystem/GetImageIdentifier:1.0
    //
    CORBA::Long GetImageIdentifier();

    //
    // IDL:LowLevelVisionSystem/getStereoVision:1.0
    //
    ::StereoVision_ptr getStereoVision();

protected:

    //
    // IDL:LowLevelVisionSystem/destroy:1.0
    //
    void
    _OB_op_destroy(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/GetVersion:1.0
    //
    CORBA::Long
    _OB_op_GetVersion(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/StartMainProcess:1.0
    //
    CORBA::Long
    _OB_op_StartMainProcess(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/StopMainProcess:1.0
    //
    CORBA::Long
    _OB_op_StopMainProcess(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/StartProcess:1.0
    //
    CORBA::Long
    _OB_op_StartProcess(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        const char* ProcessName,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/StopProcess:1.0
    //
    CORBA::Long
    _OB_op_StopProcess(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        const char* ProcessName,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/ProcessStatus:1.0
    //
    CORBA::Long
    _OB_op_ProcessStatus(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        const char* ProcessName,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/GetInputMode:1.0
    //
    ::LowLevelVisionSystem::InputMode
    _OB_op_GetInputMode(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/SynchronizationMode:1.0
    //
    ::LowLevelVisionSystem::SynchroMode
    _OB_op_SynchronizationMode(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/SetImage:1.0
    //
    CORBA::Long
    _OB_op_SetImage(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        const ColorBuffer& aColorBuffer,
        CORBA::Long aWidth,
        CORBA::Long aHeight,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/SetImagesGrabbedSize:1.0
    //
    CORBA::Long
    _OB_op_SetImagesGrabbedSize(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA::Long NewWidth,
        CORBA::Long NewHeight,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/TriggerSynchro:1.0
    //
    CORBA::Long
    _OB_op_TriggerSynchro(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/getCameraSeq:1.0
    //
    CORBA::Long
    _OB_op_getCameraSeq(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        HRP2CameraSeq_out cameras,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/getImage:1.0
    //
    CORBA::Long
    _OB_op_getImage(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA::Long CameraID,
        ImageData_out anImage,
        char*& Format,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/getEdgeImage:1.0
    //
    CORBA::Long
    _OB_op_getEdgeImage(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA::Long CameraID,
        ImageData_out anImage,
        char*& Format,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/getRectifiedImage:1.0
    //
    CORBA::Long
    _OB_op_getRectifiedImage(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA::Long CameraID,
        ImageData_out anImage,
        char*& Format,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/getRangeMap:1.0
    //
    CORBA::Long
    _OB_op_getRangeMap(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        RangeMap_out aRangeMap,
        char*& Format,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/getImageDerivative:1.0
    //
    CORBA::Long
    _OB_op_getImageDerivative(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA::Long CameraID,
        CORBA::Long DerivativeID,
        FloatBuffer_out ImageDerivative,
        CORBA::Long_out Width,
        CORBA::Long_out Height,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/getOpticalFlow:1.0
    //
    CORBA::Long
    _OB_op_getOpticalFlow(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA::Long CameraID,
        FloatBuffer_out OpticalFlow,
        FloatBuffer_out Confidence,
        CORBA::Long_out Width,
        CORBA::Long_out Height,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/getHarrisDetector:1.0
    //
    CORBA::Long
    _OB_op_getHarrisDetector(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA::Long CameraId,
        FloatBuffer_out Harris,
        CORBA::Long_out Width,
        CORBA::Long_out Height,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/getLowLevelVisionProcesses:1.0
    //
    CORBA::Long
    _OB_op_getLowLevelVisionProcesses(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        HRP2LowLevelVisionProcessesSeq_out ProcessesSeq,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/SetAProcessParameterAndValue:1.0
    //
    void
    _OB_op_SetAProcessParameterAndValue(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        const char* aProcessName,
        const char* aParameter,
        const char* aValue,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/GetProcessParameter:1.0
    //
    CORBA::Long
    _OB_op_GetProcessParameter(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        const char* aProcessName,
        const char* aParameterName,
        CORBA::String_out ParameterValue,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/GetProcessParameters:1.0
    //
    CORBA::Long
    _OB_op_GetProcessParameters(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        const char* aProcessName,
        HRP2LowLevelVisionParametersSeq_out ParametersSeq,
        HRP2LowLevelVisionParametersSeq_out ParametersValueSeq,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/SetDumpImageMode:1.0
    //
    void
    _OB_op_SetDumpImageMode(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        DumpImageMode aDumpImageMode,
        const FloatBuffer& Informations,
        CORBA::Long SizeOfInformations,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/GetDumpImageMode:1.0
    //
    ::LowLevelVisionSystem::DumpImageMode
    _OB_op_GetDumpImageMode(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/GetMatrixHeadTOrg:1.0
    //
    CORBA::Long
    _OB_op_GetMatrixHeadTOrg(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        DoubleBuffer_out HeadTOrg,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/GetBoundaryRepresentation:1.0
    //
    CORBA::Long
    _OB_op_GetBoundaryRepresentation(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CBREPSeq_out aBrep,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/GetSceneObject:1.0
    //
    CORBA::Long
    _OB_op_GetSceneObject(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        SceneObject_out aSceneObject,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/SceneDeleteFeature:1.0
    //
    void
    _OB_op_SceneDeleteFeature(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA::Long FeatureLabel,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/GetImageIdentifier:1.0
    //
    CORBA::Long
    _OB_op_GetImageIdentifier(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:LowLevelVisionSystem/getStereoVision:1.0
    //
    ::StereoVision_ptr
    _OB_op_getStereoVision(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA_Environment* _ob_cev
    );
};

//
// IDL:DoubleBuffer:1.0
//
void operator<<=(CORBA::Any&, DoubleBuffer*);
void operator<<=(CORBA::Any&, const DoubleBuffer&);
CORBA::Boolean operator>>=(const CORBA::Any&, const DoubleBuffer*&);

inline void
operator<<=(CORBA::Any_var& any, DoubleBuffer* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, const DoubleBuffer& val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, const DoubleBuffer*& val)
{
    return any.in() >>= val;
}

//
// IDL:HRP2Camera:1.0
//
namespace CORBA
{

inline void
release(::HRP2Camera_ptr p)
{
    if (p)
        p -> _OB_decRef();
}

inline Boolean
is_nil(::HRP2Camera_ptr p)
{
    return p == 0;
}

} // End of namespace CORBA

void operator<<=(CORBA::Any&, HRP2Camera_ptr*);
void operator<<=(CORBA::Any&, HRP2Camera_ptr);
CORBA::Boolean operator>>=(const CORBA::Any&, HRP2Camera_ptr&);

inline void
operator<<=(CORBA::Any_var& any, HRP2Camera_ptr* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, HRP2Camera_ptr val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, HRP2Camera_ptr& val)
{
    return any.in() >>= val;
}

//
// IDL:HRP2Camera/CameraParameter:1.0
//
void operator<<=(CORBA::Any&, HRP2Camera::CameraParameter*);
void operator<<=(CORBA::Any&, const HRP2Camera::CameraParameter&);
CORBA::Boolean operator>>=(const CORBA::Any&, const HRP2Camera::CameraParameter*&);

inline void
operator<<=(CORBA::Any_var& any, HRP2Camera::CameraParameter* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, const HRP2Camera::CameraParameter& val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, const HRP2Camera::CameraParameter*& val)
{
    return any.in() >>= val;
}

//
// IDL:HRP2Camera/IntrinsicParameters:1.0
//
void operator<<=(CORBA::Any&, HRP2Camera::IntrinsicParameters*);
void operator<<=(CORBA::Any&, const HRP2Camera::IntrinsicParameters&);
CORBA::Boolean operator>>=(const CORBA::Any&, const HRP2Camera::IntrinsicParameters*&);

inline void
operator<<=(CORBA::Any_var& any, HRP2Camera::IntrinsicParameters* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, const HRP2Camera::IntrinsicParameters& val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, const HRP2Camera::IntrinsicParameters*& val)
{
    return any.in() >>= val;
}

//
// IDL:HRP2Camera/ProjectiveParameters:1.0
//
void operator<<=(CORBA::Any&, HRP2Camera::ProjectiveParameters*);
void operator<<=(CORBA::Any&, const HRP2Camera::ProjectiveParameters&);
CORBA::Boolean operator>>=(const CORBA::Any&, const HRP2Camera::ProjectiveParameters*&);

inline void
operator<<=(CORBA::Any_var& any, HRP2Camera::ProjectiveParameters* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, const HRP2Camera::ProjectiveParameters& val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, const HRP2Camera::ProjectiveParameters*& val)
{
    return any.in() >>= val;
}

//
// IDL:HRP2CameraSeq:1.0
//
void operator<<=(CORBA::Any&, HRP2CameraSeq*);
void operator<<=(CORBA::Any&, const HRP2CameraSeq&);
CORBA::Boolean operator>>=(const CORBA::Any&, const HRP2CameraSeq*&);

inline void
operator<<=(CORBA::Any_var& any, HRP2CameraSeq* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, const HRP2CameraSeq& val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, const HRP2CameraSeq*& val)
{
    return any.in() >>= val;
}

//
// IDL:HRP2LowLevelVisionProcessesSeq:1.0
//
void operator<<=(CORBA::Any&, HRP2LowLevelVisionProcessesSeq*);
void operator<<=(CORBA::Any&, const HRP2LowLevelVisionProcessesSeq&);
CORBA::Boolean operator>>=(const CORBA::Any&, const HRP2LowLevelVisionProcessesSeq*&);

inline void
operator<<=(CORBA::Any_var& any, HRP2LowLevelVisionProcessesSeq* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, const HRP2LowLevelVisionProcessesSeq& val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, const HRP2LowLevelVisionProcessesSeq*& val)
{
    return any.in() >>= val;
}

//
// IDL:HRP2LowLevelVisionParametersSeq:1.0
//
void operator<<=(CORBA::Any&, HRP2LowLevelVisionParametersSeq*);
void operator<<=(CORBA::Any&, const HRP2LowLevelVisionParametersSeq&);
CORBA::Boolean operator>>=(const CORBA::Any&, const HRP2LowLevelVisionParametersSeq*&);

inline void
operator<<=(CORBA::Any_var& any, HRP2LowLevelVisionParametersSeq* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, const HRP2LowLevelVisionParametersSeq& val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, const HRP2LowLevelVisionParametersSeq*& val)
{
    return any.in() >>= val;
}

//
// IDL:LowLevelVisionSystem:1.0
//
namespace CORBA
{

inline void
release(::LowLevelVisionSystem_ptr p)
{
    if (p)
        p -> _OB_decRef();
}

inline Boolean
is_nil(::LowLevelVisionSystem_ptr p)
{
    return p == 0;
}

} // End of namespace CORBA

void operator<<=(CORBA::Any&, LowLevelVisionSystem_ptr*);
void operator<<=(CORBA::Any&, LowLevelVisionSystem_ptr);
CORBA::Boolean operator>>=(const CORBA::Any&, LowLevelVisionSystem_ptr&);

inline void
operator<<=(CORBA::Any_var& any, LowLevelVisionSystem_ptr* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, LowLevelVisionSystem_ptr val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, LowLevelVisionSystem_ptr& val)
{
    return any.in() >>= val;
}

//
// IDL:LowLevelVisionSystem/DerivativeID:1.0
//
void operator<<=(CORBA::Any&, LowLevelVisionSystem::DerivativeID);
CORBA::Boolean operator>>=(const CORBA::Any&, LowLevelVisionSystem::DerivativeID&);

inline void
operator<<=(CORBA::Any_var& any, LowLevelVisionSystem::DerivativeID val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, LowLevelVisionSystem::DerivativeID& val)
{
    return any.in() >>= val;
}

//
// IDL:LowLevelVisionSystem/InputMode:1.0
//
void operator<<=(CORBA::Any&, LowLevelVisionSystem::InputMode);
CORBA::Boolean operator>>=(const CORBA::Any&, LowLevelVisionSystem::InputMode&);

inline void
operator<<=(CORBA::Any_var& any, LowLevelVisionSystem::InputMode val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, LowLevelVisionSystem::InputMode& val)
{
    return any.in() >>= val;
}

//
// IDL:LowLevelVisionSystem/SynchroMode:1.0
//
void operator<<=(CORBA::Any&, LowLevelVisionSystem::SynchroMode);
CORBA::Boolean operator>>=(const CORBA::Any&, LowLevelVisionSystem::SynchroMode&);

inline void
operator<<=(CORBA::Any_var& any, LowLevelVisionSystem::SynchroMode val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, LowLevelVisionSystem::SynchroMode& val)
{
    return any.in() >>= val;
}

//
// IDL:LowLevelVisionSystem/DumpImageMode:1.0
//
void operator<<=(CORBA::Any&, LowLevelVisionSystem::DumpImageMode);
CORBA::Boolean operator>>=(const CORBA::Any&, LowLevelVisionSystem::DumpImageMode&);

inline void
operator<<=(CORBA::Any_var& any, LowLevelVisionSystem::DumpImageMode val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, LowLevelVisionSystem::DumpImageMode& val)
{
    return any.in() >>= val;
}

//
// IDL:LowLevelVisionSystem/VisionSensorException:1.0
//
void operator<<=(CORBA::Any&, LowLevelVisionSystem::VisionSensorException*);
void operator<<=(CORBA::Any&, const LowLevelVisionSystem::VisionSensorException&);
CORBA::Boolean operator>>=(const CORBA::Any&, const LowLevelVisionSystem::VisionSensorException*&);

inline void
operator<<=(CORBA::Any_var& any, LowLevelVisionSystem::VisionSensorException* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, const LowLevelVisionSystem::VisionSensorException& val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, const LowLevelVisionSystem::VisionSensorException*& val)
{
    return any.in() >>= val;
}

#endif
