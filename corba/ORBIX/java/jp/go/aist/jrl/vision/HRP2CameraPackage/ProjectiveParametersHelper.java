// **********************************************************************
//
// Generated by the Orbix/E IDL to Java Translator
//
// Copyright (c) 2003
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 2.0.1

package jp.go.aist.jrl.vision.HRP2CameraPackage;

//
// IDL:HRP2Camera/ProjectiveParameters:1.0
//
final public class ProjectiveParametersHelper
{
    public static void
    insert(org.omg.CORBA.Any any, ProjectiveParameters val)
    {
        org.omg.CORBA.portable.OutputStream out = any.create_output_stream();
        write(out, val);
        any.read_value(out.create_input_stream(), type());
    }

    public static ProjectiveParameters
    extract(org.omg.CORBA.Any any)
    {
        if(any.type().equivalent(type()))
            return read(any.create_input_stream());
        else
            throw new org.omg.CORBA.BAD_OPERATION();
    }

    private static org.omg.CORBA.TypeCode typeCode_;

    public static org.omg.CORBA.TypeCode
    type()
    {
        if(typeCode_ == null)
        {
            org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init();
            org.omg.CORBA.StructMember[] members = new org.omg.CORBA.StructMember[4];

            members[0] = new org.omg.CORBA.StructMember();
            members[0].name = "ProjectiveMatrix";
            members[0].type = orb.create_array_tc(3, orb.create_array_tc(4, orb.get_primitive_tc(org.omg.CORBA.TCKind.tk_double)));

            members[1] = new org.omg.CORBA.StructMember();
            members[1].name = "RotationMatrix";
            members[1].type = orb.create_array_tc(3, orb.create_array_tc(3, orb.get_primitive_tc(org.omg.CORBA.TCKind.tk_double)));

            members[2] = new org.omg.CORBA.StructMember();
            members[2].name = "PositionVector";
            members[2].type = orb.create_array_tc(3, orb.get_primitive_tc(org.omg.CORBA.TCKind.tk_double));

            members[3] = new org.omg.CORBA.StructMember();
            members[3].name = "IntrinsicMatrix";
            members[3].type = orb.create_array_tc(3, orb.create_array_tc(3, orb.get_primitive_tc(org.omg.CORBA.TCKind.tk_double)));

            typeCode_ = orb.create_struct_tc(id(), "ProjectiveParameters", members);
        }

        return typeCode_;
    }

    public static String
    id()
    {
        return "IDL:HRP2Camera/ProjectiveParameters:1.0";
    }

    public static ProjectiveParameters
    read(org.omg.CORBA.portable.InputStream in)
    {
        ProjectiveParameters _ob_v = new ProjectiveParameters();
        int len0 = 3;
        _ob_v.ProjectiveMatrix = new double[len0][];
        for(int i0 = 0 ; i0 < len0 ; i0++)
        {
            int len1 = 4;
            _ob_v.ProjectiveMatrix[i0] = new double[len1];
            in.read_double_array(_ob_v.ProjectiveMatrix[i0], 0, len1);
        }
        int len2 = 3;
        _ob_v.RotationMatrix = new double[len2][];
        for(int i2 = 0 ; i2 < len2 ; i2++)
        {
            int len3 = 3;
            _ob_v.RotationMatrix[i2] = new double[len3];
            in.read_double_array(_ob_v.RotationMatrix[i2], 0, len3);
        }
        int len4 = 3;
        _ob_v.PositionVector = new double[len4];
        in.read_double_array(_ob_v.PositionVector, 0, len4);
        int len5 = 3;
        _ob_v.IntrinsicMatrix = new double[len5][];
        for(int i5 = 0 ; i5 < len5 ; i5++)
        {
            int len6 = 3;
            _ob_v.IntrinsicMatrix[i5] = new double[len6];
            in.read_double_array(_ob_v.IntrinsicMatrix[i5], 0, len6);
        }
        return _ob_v;
    }

    public static void
    write(org.omg.CORBA.portable.OutputStream out, ProjectiveParameters val)
    {
        int len0 = val.ProjectiveMatrix.length;
        if(len0 != 3)
             throw new org.omg.CORBA.MARSHAL();
        for(int i0 = 0 ; i0 < len0 ; i0++)
        {
            int len1 = val.ProjectiveMatrix[i0].length;
            if(len1 != 4)
                 throw new org.omg.CORBA.MARSHAL();
            out.write_double_array(val.ProjectiveMatrix[i0], 0, len1);
        }
        int len2 = val.RotationMatrix.length;
        if(len2 != 3)
             throw new org.omg.CORBA.MARSHAL();
        for(int i2 = 0 ; i2 < len2 ; i2++)
        {
            int len3 = val.RotationMatrix[i2].length;
            if(len3 != 3)
                 throw new org.omg.CORBA.MARSHAL();
            out.write_double_array(val.RotationMatrix[i2], 0, len3);
        }
        int len4 = val.PositionVector.length;
        if(len4 != 3)
             throw new org.omg.CORBA.MARSHAL();
        out.write_double_array(val.PositionVector, 0, len4);
        int len5 = val.IntrinsicMatrix.length;
        if(len5 != 3)
             throw new org.omg.CORBA.MARSHAL();
        for(int i5 = 0 ; i5 < len5 ; i5++)
        {
            int len6 = val.IntrinsicMatrix[i5].length;
            if(len6 != 3)
                 throw new org.omg.CORBA.MARSHAL();
            out.write_double_array(val.IntrinsicMatrix[i5], 0, len6);
        }
    }
}
