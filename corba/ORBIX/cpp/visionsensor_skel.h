// **********************************************************************
//
// Generated by the Orbix/E IDL-to-C++ Translator
//
// Copyright (c) 2003
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 2.2.0

#ifndef ___visionsensor_skel_h__
#define ___visionsensor_skel_h__

#include <visionsensor.h>

#include <common_skel.h>

#ifndef OBEC_INTEGER_VERSION
#   error No Orbix/E version defined! Is <OBE/CORBA.h> included?
#endif

#ifndef OBEC_NO_VERSION_CHECK
#   if (OBEC_INTEGER_VERSION != 2020000L)
#       error Orbix/E version mismatch!
#   endif
#endif

//
// IDL:Camera:1.0
//
class POA_Camera : virtual public PortableServer::ServantBase
{
    POA_Camera(const POA_Camera&);
    void operator=(const POA_Camera&);

protected:

    //
    // IDL:Camera/destroy:1.0
    //
    void
    _OB_op_destroy(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:Camera/getCameraParameter:1.0
    //
    void
    _OB_op_getCameraParameter(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:Camera/getColorBuffer:1.0
    //
    void
    _OB_op_getColorBuffer(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:Camera/getDepthBuffer:1.0
    //
    void
    _OB_op_getDepthBuffer(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:Camera/getImageData:1.0
    //
    void
    _OB_op_getImageData(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

public:

    POA_Camera() { }

    virtual CORBA::Boolean
    _is_a(
        const char* _ob_repid
    ) throw(CORBA::SystemException);

    virtual CORBA::RepositoryId
    _primary_interface(
        const PortableServer::ObjectId& _ob_oid,
        PortableServer::POA_ptr _ob_poa
    );

    ::Camera_ptr
    _this(
    );

    virtual void
    _OB_dispatch(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:Camera/destroy:1.0
    //
    virtual void destroy(
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:Camera/getCameraParameter:1.0
    //
    virtual ::Camera::CameraParameter* getCameraParameter(
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:Camera/getColorBuffer:1.0
    //
    virtual ::ColorBuffer* getColorBuffer(
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:Camera/getDepthBuffer:1.0
    //
    virtual ::DepthBuffer* getDepthBuffer(
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:Camera/getImageData:1.0
    //
    virtual ::ImageData* getImageData(
    ) throw(CORBA::SystemException) = 0;
};

//
// IDL:VisionSensor:1.0
//
class POA_VisionSensor : virtual public PortableServer::ServantBase
{
    POA_VisionSensor(const POA_VisionSensor&);
    void operator=(const POA_VisionSensor&);

protected:

    //
    // IDL:VisionSensor/destroy:1.0
    //
    void
    _OB_op_destroy(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:VisionSensor/loadObject:1.0
    //
    void
    _OB_op_loadObject(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:VisionSensor/showObject:1.0
    //
    void
    _OB_op_showObject(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:VisionSensor/getCameraSeq:1.0
    //
    void
    _OB_op_getCameraSeq(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:VisionSensor/getCameraSeqOf:1.0
    //
    void
    _OB_op_getCameraSeqOf(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:VisionSensor/addCamera:1.0
    //
    void
    _OB_op_addCamera(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:VisionSensor/updateScene:1.0
    //
    void
    _OB_op_updateScene(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

public:

    POA_VisionSensor() { }

    virtual CORBA::Boolean
    _is_a(
        const char* _ob_repid
    ) throw(CORBA::SystemException);

    virtual CORBA::RepositoryId
    _primary_interface(
        const PortableServer::ObjectId& _ob_oid,
        PortableServer::POA_ptr _ob_poa
    );

    ::VisionSensor_ptr
    _this(
    );

    virtual void
    _OB_dispatch(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:VisionSensor/destroy:1.0
    //
    virtual void destroy(
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:VisionSensor/loadObject:1.0
    //
    virtual void loadObject(
        const char* src,
        const char* objectName
    ) throw(VisionSensor::VisionSensorException,
        CORBA::SystemException) = 0;

    //
    // IDL:VisionSensor/showObject:1.0
    //
    virtual void showObject(
        const char* objectName
    ) throw(VisionSensor::VisionSensorException,
        CORBA::SystemException) = 0;

    //
    // IDL:VisionSensor/getCameraSeq:1.0
    //
    virtual CORBA::Long getCameraSeq(
        CameraSeq_out cameras
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:VisionSensor/getCameraSeqOf:1.0
    //
    virtual CORBA::Long getCameraSeqOf(
        const char* objectName,
        CameraSeq_out cameras
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:VisionSensor/addCamera:1.0
    //
    virtual ::Camera_ptr addCamera(
        const char* objectName,
        const char* jointName,
        const Transform& transformation,
        const Camera::CameraParameter& cameraParam
    ) throw(VisionSensor::VisionSensorException,
        CORBA::SystemException) = 0;

    //
    // IDL:VisionSensor/updateScene:1.0
    //
    virtual void updateScene(
        const WorldState& state
    ) throw(CORBA::SystemException) = 0;
};

//
// IDL:VisionSensorFactory:1.0
//
class POA_VisionSensorFactory : virtual public POA_OpenHRPObject
{
    POA_VisionSensorFactory(const POA_VisionSensorFactory&);
    void operator=(const POA_VisionSensorFactory&);

protected:

    //
    // IDL:VisionSensorFactory/createVisionSensor:1.0
    //
    void
    _OB_op_createVisionSensor(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

public:

    POA_VisionSensorFactory() { }

    virtual CORBA::Boolean
    _is_a(
        const char* _ob_repid
    ) throw(CORBA::SystemException);

    virtual CORBA::RepositoryId
    _primary_interface(
        const PortableServer::ObjectId& _ob_oid,
        PortableServer::POA_ptr _ob_poa
    );

    ::VisionSensorFactory_ptr
    _this(
    );

    virtual void
    _OB_dispatch(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:VisionSensorFactory/createVisionSensor:1.0
    //
    virtual ::VisionSensor_ptr createVisionSensor(
    ) throw(CORBA::SystemException) = 0;
};

#endif
